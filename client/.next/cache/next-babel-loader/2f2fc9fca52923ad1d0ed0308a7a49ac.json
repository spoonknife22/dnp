{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport UserInfo from \"./UserInfo\";\nimport MyAddBar from \"./AddressBar.js\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { newContextComponents } from \"@drizzle/react-components\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\";\nimport { Loader } from 'rimble-ui';\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\nconst {\n  ContractData\n} = newContextComponents;\nconst drizzle = new Drizzle(options);\n\nconst AccountsContainer = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return __jsx(Loader, {\n        size: \"30px\",\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 20\n        }\n      });\n    } else {\n      const account = drizzleState.accounts[0];\n\n      const getMember = async () => {\n        let isMember;\n        isMember = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\n        return isMember;\n      };\n\n      const get = getMember().then(member => {\n        if (!member) {\n          return __jsx(MyAddBar, {\n            drizzleState: drizzleState,\n            drizzle: drizzle,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 18\n            }\n          });\n        }\n\n        return __jsx(JoinButton, {\n          drizzleState: drizzleState,\n          drizzle: drizzle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 18\n          }\n        });\n      });\n      const got = get.then(ge => {\n        const values = Object.values(ge);\n        const button = values[1]; //console.log({button});\n\n        return button;\n      });\n      const {\n        button\n      } = got;\n      console.log(got.MyAddBar);\n      return button;\n    }\n  }));\n};\n\nexport default AccountsContainer;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","UserInfo","MyAddBar","DrizzleContext","newContextComponents","Drizzle","options","Loader","JoinButton","ContractData","drizzle","AccountsContainer","drizzleContext","drizzleState","initialized","account","accounts","getMember","isMember","contracts","UserStorage","methods","addresses","call","get","then","member","got","ge","values","Object","button","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAUC,MAAV,QAAwB,WAAxB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAmBL,oBAAzB;AACA,MAAMM,OAAO,GAAG,IAAIL,OAAJ,CAAYC,OAAZ,CAAhB;;AAEA,MAAMK,iBAAiB,GAAG,MAAM;AAE9B,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,OAAO,EAAED,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,cAAc,IAAI;AACjB,UAAM;AAACF,MAAAA,OAAD;AAAUG,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,QAAwCF,cAA9C;;AAEA,QAAG,CAACE,WAAJ,EAAiB;AACf,aAAO,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,KAAK,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAGM;AACN,YAAMC,OAAO,GAAGF,YAAY,CAACG,QAAb,CAAsB,CAAtB,CAAhB;;AAEA,YAAMC,SAAS,GAAG,YAAY;AAC9B,YAAIC,QAAJ;AACAA,QAAAA,QAAQ,GAAG,MAAMR,OAAO,CAACS,SAAR,CAAkBC,WAAlB,CAA8BC,OAA9B,CAAsCC,SAAtC,CAAgDT,YAAY,CAACG,QAAb,CAAsB,CAAtB,CAAhD,EAA0EO,IAA1E,EAAjB;AACA,eAAOL,QAAP;AACC,OAJD;;AAOA,YAAMM,GAAG,GAAGP,SAAS,GAAGQ,IAAZ,CAAkBC,MAAD,IAAY;AAEzC,YAAG,CAACA,MAAJ,EAAY;AACZ,iBAAO,MAAC,QAAD;AAAU,YAAA,YAAY,EAAEb,YAAxB;AAAsC,YAAA,OAAO,EAAEH,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACC;;AACD,eAAO,MAAC,UAAD;AAAY,UAAA,YAAY,EAAEG,YAA1B;AAAwC,UAAA,OAAO,EAAEH,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAED,OAPa,CAAZ;AASH,YAAMiB,GAAG,GAAGH,GAAG,CAACC,IAAJ,CAAUG,EAAD,IAAQ;AAC1B,cAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcD,EAAd,CAAf;AACA,cAAMG,MAAM,GAAGF,MAAM,CAAC,CAAD,CAArB,CAF0B,CAG1B;;AACA,eAAOE,MAAP;AACD,OALU,CAAZ;AAMC,YAAM;AAAEA,QAAAA;AAAF,UAAaJ,GAAnB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACzB,QAAhB;AAEA,aAAO6B,MAAP;AAGG;AAEF,GAxCH,CADF,CADF;AA+CD,CAjDD;;AAkDA,eAAepB,iBAAf","sourcesContent":["import React from \"react\";\r\nimport UserInfo from \"./UserInfo\"; \r\nimport MyAddBar from \"./AddressBar.js\"; \r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\nimport {  Loader } from 'rimble-ui';\r\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\r\n\r\nconst { ContractData } = newContextComponents;\r\nconst drizzle = new Drizzle(options);\r\n\r\nconst AccountsContainer = () => {\r\n \r\n  return  (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized } = drizzleContext;\r\n\r\n          if(!initialized) {\r\n            return <Loader size=\"30px\" color=\"white\" />\r\n          }\r\n          else  {\r\n          const account = drizzleState.accounts[0];\r\n        \r\n          const getMember = async () => {\r\n          let isMember;\r\n          isMember = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\r\n          return isMember;\r\n          };\r\n        \r\n          \r\n          const get = getMember().then((member) => {\r\n    \r\n          if(!member) {\r\n          return <MyAddBar drizzleState={drizzleState} drizzle={drizzle} />\r\n          }\r\n          return <JoinButton drizzleState={drizzleState} drizzle={drizzle} />\r\n\r\n        });\r\n\r\n       const got = get.then((ge) => {\r\n          const values = Object.values(ge);\r\n          const button = values[1];\r\n          //console.log({button});\r\n          return button;\r\n        })\r\n        const { button } = got;\r\n        console.log(got.MyAddBar)\r\n     \r\n        return button;\r\n  \r\n\r\n          }\r\n\r\n        }}\r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n);\r\n  \r\n}\r\nexport default AccountsContainer;"]},"metadata":{},"sourceType":"module"}