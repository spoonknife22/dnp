{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === \"TX_BROADCASTED\") {\n    store.dispatch({\n      type: \"TX_PROCESSING\"\n    });\n  }\n\n  if (action.type === \"TX_SUCCESSFUL\") {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    store.dispatch({\n      type: \"TX_PROCESSING_DONE\"\n    });\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const depositCurrency = store => next => action => {\n  if (action.type === \"GOT_STACK_ID\") {\n    const _store$getState = store.getState(),\n          transactions = _store$getState.transactions,\n          transactionStack = _store$getState.transactionStack,\n          appReducers = _store$getState.appReducers,\n          contracts = _store$getState.contracts,\n          drizzleStatus = _store$getState.drizzleStatus,\n          accounts = _store$getState.accounts;\n\n    const account = accounts[0];\n    const stackId = appReducers.stackId;\n    let state = store.getState();\n    console.log(appReducers.contractBalance);\n    const convertedContribution = action.convertedContribution,\n          propAddress = action.propAddress;\n\n    if (state.transactionStack[stackId]) {\n      const txHash = transactionStack[stackId];\n\n      if (!txHash) {\n        return console.log(\"!txHash capMiddleWare 32\");\n      } else {\n        const propContract = contracts[\"\".concat(propAddress)];\n        console.log(propContract);\n        propContract.methods[\"contribute\"].cacheSend(convertedContribution, {\n          from: \"\".concat(account),\n          gas: 3000000\n        });\n        toast('you', {\n          position: toast.POSITION.BOTTOM_LEFT,\n          className: 'successful-stackId'\n        });\n      }\n\n      return console.log(\"loading from capMiddleWare 49\");\n    } //toast('Loading', { position: toast.POSITION.BOTTOM_LEFT})\n\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n\n      if (action.event.event === \"ContributionSuccess\") {\n        const poolDepth = action.event.returnValues.currentContractBalance;\n        store.dispatch({\n          type: \"PROPOSAL_BALANCE\",\n          balance: \"\".concat(poolDepth)\n        });\n      }\n\n      if (action.event.event === \"AssetNomination\") {\n        const propAddress = action.event.returnValues._proposalAddress;\n        const proposalAddress = \"\".concat(propAddress);\n        store.dispatch({\n          type: \"GOT_PROP_ADDRESS\",\n          proposalAddress: proposalAddress\n        });\n      }\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","dispatch","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","depositCurrency","getState","transactions","transactionStack","appReducers","contracts","drizzleStatus","accounts","account","stackId","state","console","log","contractBalance","convertedContribution","propAddress","propContract","methods","cacheSend","from","gas","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","poolDepth","currentContractBalance","balance","_proposalAddress","proposalAddress","info","TOP_RIGHT"],"mappings":"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","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === \"TX_BROADCASTED\") {\r\n    store.dispatch({type:\"TX_PROCESSING\"})\r\n  }\r\n  if (action.type === \"TX_SUCCESSFUL\") { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    store.dispatch({type:\"TX_PROCESSING_DONE\"})\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\nexport const depositCurrency = store => next => action => {\r\n  if (action.type === \"GOT_STACK_ID\") {\r\n    const { transactions, transactionStack, appReducers, contracts, drizzleStatus, accounts } = store.getState();\r\n    const account = accounts[0];\r\n    const { stackId } = appReducers;\r\n    let state = store.getState();\r\n    console.log(appReducers.contractBalance)\r\n    const { convertedContribution, propAddress } = action;\r\n\r\n    if (state.transactionStack[stackId]) {\r\n      const txHash = transactionStack[stackId];\r\n      if (!txHash) {\r\n        return(\r\n          console.log(\"!txHash capMiddleWare 32\")\r\n        )\r\n      }\r\n      else {\r\n        const propContract = contracts[`${propAddress}`];\r\n        console.log(propContract)\r\n        propContract.methods[\"contribute\"].cacheSend(convertedContribution,{from:`${account}`, gas:3000000}) \r\n        toast('you', { position: toast.POSITION.BOTTOM_LEFT,className:'successful-stackId' })\r\n      }\r\n      return(\r\n        console.log(\"loading from capMiddleWare 49\")\r\n      )\r\n    }\r\n      \r\n  \r\n    //toast('Loading', { position: toast.POSITION.BOTTOM_LEFT})\r\n   \r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       if(action.event.event === \"ContributionSuccess\"){\r\n        const poolDepth = action.event.returnValues.currentContractBalance\r\n        store.dispatch({type:\"PROPOSAL_BALANCE\", balance:`${poolDepth}`})\r\n       }\r\n       if(action.event.event === \"AssetNomination\"){\r\n        const propAddress = action.event.returnValues._proposalAddress\r\n        const proposalAddress = `${propAddress}`\r\n        store.dispatch({type:\"GOT_PROP_ADDRESS\", proposalAddress:proposalAddress})\r\n        }\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}