{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance,\n  expiredAt,\n  orderId\n}) => {\n  _s();\n\n  const nowUnix = moment().valueOf();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1]; //const [graphql, setGraphql] = useState([]);\n  //else if(propData[0] == 0 && propData[2] < nowUnix){\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var proposalContract, deployedAddresses, i, expiredOrderIdArray, address, propData, orderId, graphql, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context2.sent;\n              _context2.next = 5;\n              return proposalContract.methods.getDeployedAddresses().call();\n\n            case 5:\n              deployedAddresses = _context2.sent;\n              expiredOrderIdArray = [];\n              i = 0;\n\n            case 8:\n              if (!(i < deployedAddresses.length)) {\n                _context2.next = 18;\n                break;\n              }\n\n              address = deployedAddresses[i];\n              _context2.next = 12;\n              return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n            case 12:\n              propData = _context2.sent;\n              orderId = propData[3];\n              graphql = JSON.stringify({\n                query: \"{\\n            orders(where: {id:\".concat(orderId, \", status:cancelled, category:parcel }) {\\n              nft{\\n                parcel {\\n                  x,\\n                  y, \\n                  tokenId\\n                }\\n                activeOrder {\\n                  price\\n                  expiresAt\\n                  nftAddress\\n                  txHash\\n                }\\n              }\\n            }\\n          }\")\n              }); //setGraphql(graphqlLoop)\n\n            case 15:\n              i++;\n              _context2.next = 8;\n              break;\n\n            case 18:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  var ordersGQL, ordersFiltered, proposalContract, deployedAddresses, i, fundingArrayExpired, purchasedArray, forSaleArrayExpired, soldArray, paidOutArray, address, propData, purchasedFilter, soldFilter, paidOutFilter;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.nfts;\n\n                      case 2:\n                        ordersGQL = _context.sent;\n                        _context.next = 5;\n                        return result.data.nfts;\n\n                      case 5:\n                        ordersFiltered = _context.sent;\n                        _context.next = 8;\n                        return props.drizzle.contracts.ProposalController;\n\n                      case 8:\n                        proposalContract = _context.sent;\n                        _context.next = 11;\n                        return proposalContract.methods.getDeployedAddresses().call();\n\n                      case 11:\n                        deployedAddresses = _context.sent;\n                        fundingArrayExpired = [];\n                        purchasedArray = [];\n                        forSaleArrayExpired = [];\n                        soldArray = [];\n                        paidOutArray = [];\n                        i = 0;\n\n                      case 18:\n                        if (!(i < deployedAddresses.length)) {\n                          _context.next = 27;\n                          break;\n                        }\n\n                        address = deployedAddresses[i];\n                        _context.next = 22;\n                        return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n                      case 22:\n                        propData = _context.sent;\n\n                        if (propData[0] == 0 && propData[2] < nowUnix) {\n                          fundingArrayExpired.push(propData[1]);\n                        } else if (propData[0] == 3) {\n                          purchasedArray.push(propData[1]);\n                        } else if (propData[0] == 5 && propData[2] < nowUnix) {\n                          forSaleArrayExpired.push(propData[1]);\n                        } else if (propData[0] == 4) {\n                          soldArray.push(propData[1]);\n                        } else if (propData[0] == 7) {\n                          paidOutArray.push(propData[1]);\n                        }\n\n                      case 24:\n                        i++;\n                        _context.next = 18;\n                        break;\n\n                      case 27:\n                        //Old Example\n                        //  else if(propData[0] == 7){\n                        //   paidOutArray.push([i, propData[1], propData[2]]);\n                        // }\n                        //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\n                        purchasedFilter = ordersGQL.filter(item => purchasedArray.includes(item.parcel.tokenId));\n                        soldFilter = ordersGQL.filter(item => soldArray.includes(item.parcel.tokenId));\n                        paidOutFilter = ordersGQL.filter(item => paidOutArray.includes(item.parcel.tokenId)); //console.log(ordersFilter, ordersFiltered)\n\n                        setOrders(ordersFiltered);\n                        setTotalOrders(ordersFiltered.length);\n                        setLoading(false);\n\n                      case 33:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 8\n    }\n  }));\n};\n\n_s(NominatedCardsExpired, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired; // const graphql= JSON.stringify({ query: \n//   `{\n//     orders(where: {id:${orderId }, status:cancelled, category:parcel, expiresAt:${expiredAt}}) {\n//     id\n//       nft{\n//           name\n//           tokenId\n//           parcel{          \n//                   x\n//                   y\n//               }\n//           activeOrder{\n//               nftAddress\n//               price\n//               expiresAt\n//               txHash\n//           }\n//       }\n//     }\n//   }`\n// })\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominatedCardsExpired","props","userManaBalance","expiredAt","orderId","nowUnix","valueOf","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","expiredOrderIdArray","i","length","address","getPropData","propData","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","nfts","ordersGQL","ordersFiltered","fundingArrayExpired","purchasedArray","forSaleArrayExpired","soldArray","paidOutArray","push","purchasedFilter","filter","item","includes","parcel","tokenId","soldFilter","paidOutFilter","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance, expiredAt, orderId }) => {\r\n  \r\n  const nowUnix = moment().valueOf();\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n  //const [graphql, setGraphql] = useState([]);\r\n\r\n  //else if(propData[0] == 0 && propData[2] < nowUnix){\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n \r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n  \r\n  \r\n    \r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n      let expiredOrderIdArray = [];\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n        const orderId = propData[3];\r\n        const graphql= JSON.stringify({ query: \r\n          `{\r\n            orders(where: {id:${orderId}, status:cancelled, category:parcel }) {\r\n              nft{\r\n                parcel {\r\n                  x,\r\n                  y, \r\n                  tokenId\r\n                }\r\n                activeOrder {\r\n                  price\r\n                  expiresAt\r\n                  nftAddress\r\n                  txHash\r\n                }\r\n              }\r\n            }\r\n          }`\r\n      })\r\n      //setGraphql(graphqlLoop)\r\n    }\r\n\r\n\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n        const ordersGQL = await result.data.nfts;\r\n        const ordersFiltered = await result.data.nfts;\r\n\r\n        const proposalContract = await props.drizzle.contracts.ProposalController;\r\n        const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n    \r\n        let i;\r\n        let fundingArrayExpired = [];\r\n        let purchasedArray = [];\r\n        let forSaleArrayExpired = [];\r\n        let soldArray = [];\r\n        let paidOutArray = [];\r\n \r\n        for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n\r\n        if(propData[0] == 0 && propData[2] < nowUnix){\r\n          fundingArrayExpired.push(propData[1]);\r\n        }\r\n        else if(propData[0] == 3){\r\n          purchasedArray.push(propData[1]);\r\n        }\r\n        else if(propData[0] == 5 && propData[2] < nowUnix){\r\n          forSaleArrayExpired.push(propData[1]);\r\n          }\r\n\r\n        else if(propData[0] == 4){\r\n          soldArray.push(propData[1]);\r\n        }\r\n\r\n        else if(propData[0] == 7){\r\n            paidOutArray.push(propData[1]);\r\n          }\r\n          \r\n       }\r\n      //Old Example\r\n      //  else if(propData[0] == 7){\r\n      //   paidOutArray.push([i, propData[1], propData[2]]);\r\n      // }\r\n\r\n       //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\r\n       const purchasedFilter = ordersGQL.filter(item =>  purchasedArray.includes(item.parcel.tokenId));\r\n       const soldFilter = ordersGQL.filter(item => soldArray.includes(item.parcel.tokenId));\r\n       const paidOutFilter = ordersGQL.filter(item => paidOutArray.includes(item.parcel.tokenId));\r\n      \r\n       \r\n    \r\n        //console.log(ordersFilter, ordersFiltered)\r\n        \r\n          setOrders(ordersFiltered);\r\n          setTotalOrders(ordersFiltered.length)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n\r\n// const graphql= JSON.stringify({ query: \r\n//   `{\r\n//     orders(where: {id:${orderId }, status:cancelled, category:parcel, expiresAt:${expiredAt}}) {\r\n//     id\r\n//       nft{\r\n//           name\r\n//           tokenId\r\n//           parcel{          \r\n//                   x\r\n//                   y\r\n//               }\r\n//           activeOrder{\r\n//               nftAddress\r\n//               price\r\n//               expiresAt\r\n//               txHash\r\n//           }\r\n//       }\r\n//     }\r\n//   }`\r\n// })"]},"metadata":{},"sourceType":"module"}