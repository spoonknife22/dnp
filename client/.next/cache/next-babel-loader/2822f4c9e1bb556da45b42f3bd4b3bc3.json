{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null,\n      userId: null\n    });\n\n    _defineProperty(this, \"getDataKey\", async (contract, drizzleState, drizzle) => {\n      const user = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\n      const userId = await parseInt(user); //const userId = await contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\n\n      const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\n      this.setState({\n        dataKey,\n        userId\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage; // const account = drizzleState.accounts[0];\n\n    const user = await contract.methods[(\"addresses\", drizzleState.accounts[0])].cacheCall(); //const user = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\n\n    const userId = parseInt(user);\n    const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\n    this.setState({\n      dataKey,\n      userId\n    }); //this.getDataKey(contract, drizzleState, drizzle);\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    console.log(this.state.userId); //username: Web3.utils.toAscii(username),\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 6\n      }\n    }, \"Hi: \", displayData && displayData.value[1]);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","userId","contract","drizzleState","drizzle","user","contracts","UserStorage","methods","addresses","accounts","call","parseInt","cacheCall","setState","componentDidMount","props","render","displayData","profiles","state","console","log","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KADiC;;AAAA,wCAuB7B,OAAMC,QAAN,EAAeC,YAAf,EAA4BC,OAA5B,KAAwC;AACnD,YAAMC,IAAI,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkBC,WAAlB,CAA8BC,OAA9B,CAAsCC,SAAtC,CAAgDN,YAAY,CAACO,QAAb,CAAsB,CAAtB,CAAhD,EAA0EC,IAA1E,EAAnB;AACA,YAAMV,MAAM,GAAG,MAAMW,QAAQ,CAACP,IAAD,CAA7B,CAFmD,CAGnD;;AACA,YAAML,OAAO,GAAG,MAAME,QAAQ,CAACM,OAAT,CAAiB,UAAjB,EAA6BK,SAA7B,CAAuCZ,MAAvC,CAAtB;AACA,WAAKa,QAAL,CAAc;AAAEd,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAd;AACD,KA7ByC;AAAA;;AAGzC,QAAMc,iBAAN,GAA0B;AACxB,UAAM;AAAEX,MAAAA,OAAF;AAAWD,MAAAA;AAAX,QAA4B,KAAKa,KAAvC;AACA,UAAMd,QAAQ,GAAGE,OAAO,CAACE,SAAR,CAAkBC,WAAnC,CAFwB,CAGzB;;AAEC,UAAMF,IAAI,GAAG,MAAMH,QAAQ,CAACM,OAAT,EAAiB,aAAaL,YAAY,CAACO,QAAb,CAAsB,CAAtB,CAA9B,GAAyDG,SAAzD,EAAnB,CALwB,CAMzB;;AACA,UAAMZ,MAAM,GAAIW,QAAQ,CAACP,IAAD,CAAxB;AAEA,UAAML,OAAO,GAAG,MAAME,QAAQ,CAACM,OAAT,CAAiB,UAAjB,EAA6BK,SAA7B,CAAuCZ,MAAvC,CAAtB;AACA,SAAKa,QAAL,CAAc;AAAEd,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAd,EAVyB,CAevB;AACF;;AAYDgB,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEV,MAAAA;AAAF,QAAkB,KAAKS,KAAL,CAAWb,YAAX,CAAwBG,SAAhD;AACA,UAAMY,WAAW,GAAGX,WAAW,CAACY,QAAZ,CAAqB,KAAKC,KAAL,CAAWpB,OAAhC,CAApB,CAHO,CAGuD;;AAC9DqB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWnB,MAAvB,EAJO,CAOP;;AAEA,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQiB,WAAW,IAAIA,WAAW,CAACK,KAAZ,CAAkB,CAAlB,CAAvB,CAFF;AAID;;AA5CwC;;AA+C1C,eAAezB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null, userId: null };\r\n\r\n async componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n  // const account = drizzleState.accounts[0];\r\n  \r\n   const user = await contract.methods[\"addresses\",(drizzleState.accounts[0])].cacheCall()\r\n  //const user = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\r\n  const userId =  parseInt(user);\r\n \r\n  const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\r\n  this.setState({ dataKey, userId });\r\n\r\n\r\n\r\n\r\n    //this.getDataKey(contract, drizzleState, drizzle);\r\n }\r\n\r\n\r\n\r\ngetDataKey = async(contract,drizzleState,drizzle) => {\r\n  const user = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\r\n  const userId = await parseInt(user);\r\n  //const userId = await contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\r\n  const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\r\n  this.setState({ dataKey, userId });\r\n}\r\n\r\n render() {\r\n  \r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   console.log(this.state.userId)\r\n\r\n   \r\n   //username: Web3.utils.toAscii(username),\r\n\r\n   return (\r\n    \r\n     <p>Hi: {displayData && displayData.value[1]}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}