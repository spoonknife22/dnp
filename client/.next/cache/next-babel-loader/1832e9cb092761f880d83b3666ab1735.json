{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\NominateButton.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Button } from \"shards-react\";\nimport { Loader } from 'rimble-ui';\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst AccountData = newContextComponents.AccountData,\n      ContractData = newContextComponents.ContractData,\n      ContractForm = newContextComponents.ContractForm;\n\nconst NominationButton = ({\n  nominateAsset,\n  transactionProcessing,\n  drizzle,\n  drizzleState,\n  tokenId\n}) => {\n  // let state = drizzle.store.getState();\n  // let transactProcessing = state.transactionProcessing;\n  // useEffect(  () => {\n  //   if(transactProcessing){ \n  //     setShow(true);\n  //   }\n  //   else{\n  //   setShow(false);\n  //   }\n  // }, [transactProcessing]);  \n  const member = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(tokenId) {\n      var isMember;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\n\n          case 2:\n            isMember = _context.sent;\n            return _context.abrupt(\"return\", isMember);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function member(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); //const member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getPropTokenIdMap\" methodArgs={[tokenId]} />\n  //const propAddress = drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\n  //const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getProposalIdsFromUser\" methodArgs={[1]} />\n\n\n  if (!transactionProcessing) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }, __jsx(Button, {\n      className: \"btn btn-block btn-success contribute-form-btn\",\n      key: \"submit\",\n      type: \"button\",\n      onClick: nominateAsset,\n      theme: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"Nominate\"), console.log(member())));\n  }\n\n  if (transactionProcessing) {\n    return __jsx(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, __jsx(Loader, {\n      color: \"#007bff\",\n      size: \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }));\n  }\n};\n\nconst mapStateToProps = state => ({\n  transactionProcessing: state.appReducers.transactionProcessing\n});\n\nconst mapDispatchToProps = dispatch => ({\n  nominationProcess: () => dispatch({\n    type: \"NOM_TX_PROCESSING\"\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/NominateButton.js"],"names":["React","useState","useEffect","connect","Button","Loader","newContextComponents","AccountData","ContractData","ContractForm","NominationButton","nominateAsset","transactionProcessing","drizzle","drizzleState","tokenId","member","contracts","ProposalController","methods","getPropTokenIdMap","call","isMember","console","log","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","nominationProcess","type"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,QAAqC,2BAArC;MACQC,W,GAA4CD,oB,CAA5CC,W;MAAaC,Y,GAA+BF,oB,CAA/BE,Y;MAAcC,Y,GAAiBH,oB,CAAjBG,Y;;AAEnC,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,qBAAjB;AAAwCC,EAAAA,OAAxC;AAAiDC,EAAAA,YAAjD;AAA+DC,EAAAA;AAA/D,CAAD,KAA8E;AAErG;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,MAAM;AAAA,uEAAG,iBAAOD,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACUF,OAAO,CAACI,SAAR,CAAkBC,kBAAlB,CAAqCC,OAArC,CAA6CC,iBAA7C,CAA+DL,OAA/D,EAAwEM,IAAxE,EADV;;AAAA;AACPC,YAAAA,QADO;AAAA,6CAGLA,QAHK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANN,MAAM;AAAA;AAAA;AAAA,KAAZ,CAdqG,CAqBrG;AACA;AACA;;;AACA,MAAG,CAACJ,qBAAJ,EAA4B;AAE5B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGM,MAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,+CAAlB;AAAkE,MAAA,GAAG,EAAC,QAAtE;AAA+E,MAAA,IAAI,EAAC,QAApF;AAA6F,MAAA,OAAO,EAAED,aAAtG;AAAsH,MAAA,KAAK,EAAC,SAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EACmCY,OAAO,CAACC,GAAR,CAAYR,MAAM,EAAlB,CADnC,CAHN,CADF;AAUC;;AACD,MAAGJ,qBAAH,EAA2B;AACzB,WACQ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADR;AAKD;AAEF,CA7CD;;AA+CA,MAAMa,eAAe,GAAIC,KAAD,KAAY;AAClCd,EAAAA,qBAAqB,EAAEc,KAAK,CAACC,WAAN,CAAkBf;AADP,CAAZ,CAAxB;;AAIA,MAAMgB,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,iBAAiB,EAAE,MAAOD,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD;AADM,CAAf,CAA3B;;AAKA,eAAe5B,OAAO,CAACsB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ClB,gBAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Button } from \"shards-react\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\nconst NominationButton = ({ nominateAsset, transactionProcessing, drizzle, drizzleState, tokenId }) => {     \r\n\r\n  // let state = drizzle.store.getState();\r\n  // let transactProcessing = state.transactionProcessing;\r\n \r\n  // useEffect(  () => {\r\n\r\n  //   if(transactProcessing){ \r\n  //     setShow(true);\r\n  //   }\r\n  //   else{\r\n  //   setShow(false);\r\n  //   }\r\n  // }, [transactProcessing]);  \r\n  const member = async (tokenId) => {\r\n    const isMember = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\r\n    //console.log(isMember)\r\n     return isMember;\r\n    } \r\n     \r\n  \r\n  //const member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getPropTokenIdMap\" methodArgs={[tokenId]} />\r\n  //const propAddress = drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\r\n  //const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getProposalIdsFromUser\" methodArgs={[1]} />\r\n  if(!transactionProcessing)  {  \r\n    \r\n  return (\r\n    <div>\r\n    \r\n    {/* <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"deployedProposals\" methodArgs={[tokenId]} /> */}\r\n          <Button className=\"btn btn-block btn-success contribute-form-btn\" key=\"submit\" type=\"button\" onClick={nominateAsset}  theme=\"success\" >\r\n            <p className=\"mb-0\">Nominate</p>{console.log(member())}\r\n          \r\n          </Button>\r\n          </div>\r\n        )   \r\n  } \r\n  if(transactionProcessing)  {\r\n    return (   \r\n            <div className=\"mx-auto\">   \r\n              <Loader color=\"#007bff\" size=\"40px\" />\r\n            </div>\r\n        )   \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  transactionProcessing: state.appReducers.transactionProcessing,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nominationProcess: () =>  dispatch({ type: \"NOM_TX_PROCESSING\" })\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\r\n"]},"metadata":{},"sourceType":"module"}