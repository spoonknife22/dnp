{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport { capRootSaga } from './capSagas';\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; // const CHECKING_TX_UI = \"CHECKING_TX_UI\";\n// const TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\n// const CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\n// const TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\n// const initialState = {\n//   metaMaskReject: false,\n//   checkingTx: false,\n//   txSuccessful: false,\n//   redirectToHome: false,\n// };\n// export function capReducer(state = initialState, action) {\n//   switch (action.type) {\n//     case TX_ERROR_METAMASK:\n//       return { ...state, checkMetaMask: false, metaMaskReject: true };\n//     case CHECKING_TX_UI:\n//       return { ...state, checkMetaMask: false, checkingTx: true };\n//     case CHECKING_TX_UI_DONE:\n//       return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\n//     case TX_SUCCESSFUL_UPDATE_UI:\n//       return { ...state, checkingTx: false, txSuccessful: true };\n//     default:\n//       return state;\n//   }\n// }\n// export default combineReducers({\n//   capReducer,\n//   ...drizzleReducers\n// });\n// actions\n\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH';\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED'; //const TX_BROADCASTED = 'TX_BROADCASTED'\n\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst initialState = {\n  transactionProcessing: false,\n  transactionComplete: false\n};\n\nfunction transactionReducer(state = initialState, action) {\n  switch (action.type) {\n    case TX_PROCESSING:\n      return _objectSpread({}, state, {\n        transactionProcessing: true\n      });\n\n    case TX_DONE:\n      return _objectSpread({}, state, {\n        transactionComplete: true\n      });\n    // case CHECKING_TX_UI_DONE:\n    //   return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\n    // case TX_SUCCESSFUL_UPDATE_UI:\n    //   return { ...state, checkingTx: false, txSuccessful: true };\n\n    default:\n      return state;\n  }\n} // const todosReducer = (state= [], action) => {\n//   if (action.type === TX_PROCESSING) {\n//     // update your state\n//     return action.process\n//   }\n//     return state\n//  }\n// fetch data from service using sagas\n\n\nfunction* fetchTransaction() {\n  //const process = yield('Transaction Processing')\n  yield put({\n    type: TX_PROCESSING,\n    process\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_DONE\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeEvery('TX_BROADCASTED', fetchTransaction);\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\n}\n\nexport const appReducers = {\n  transaction: transactionReducer\n};\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capReducers.js"],"names":["combineReducers","drizzleReducers","capRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","TODOS_FETCH","TODOS_RECEIVED","TX_DONE","TX_PROCESSING","initialState","transactionProcessing","transactionComplete","transactionReducer","state","action","type","fetchTransaction","process","txSuccessful","appRootSaga","appReducers","transaction","appSagas"],"mappings":";;;;;;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,oBAApB;AACA,MAAMC,cAAc,GAAG,uBAAvB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,mBAAmB,EAAE;AAFF,CAArB;;AAKA,SAASC,kBAAT,CAA4BC,KAAK,GAAGJ,YAApC,EAAkDK,MAAlD,EAA0D;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAL;AACE,+BAAYK,KAAZ;AAAmBH,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKH,OAAL;AACE,+BAAYM,KAAZ;AAAmBF,QAAAA,mBAAmB,EAAE;AAAxC;AACF;AACA;AACA;AACA;;AACA;AACE,aAAOE,KAAP;AAVJ;AAYD,C,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;AACA,UAAUG,gBAAV,GAA6B;AAC3B;AACA,QAAMjB,GAAG,CAAC;AAAEgB,IAAAA,IAAI,EAAEP,aAAR;AAAuBS,IAAAA;AAAvB,GAAD,CAAT;AACA;;AAGF,UAAUC,YAAV,GAAyB;AACvB,QAAMnB,GAAG,CAAC;AAAEgB,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAUY,WAAV,GAAwB;AACvB,QAAMf,SAAS,CAAC,gBAAD,EAAmBY,gBAAnB,CAAf;AACA,QAAMZ,SAAS,CAAC,eAAD,EAAkBc,YAAlB,CAAf;AACA;;AAED,OAAO,MAAME,WAAW,GAAG;AAAEC,EAAAA,WAAW,EAAET;AAAf,CAApB;AACP,OAAO,MAAMU,QAAQ,GAAG,CAACH,WAAD,CAAjB","sourcesContent":["\r\nimport { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport { capRootSaga } from './capSagas';\r\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n\r\n// const CHECKING_TX_UI = \"CHECKING_TX_UI\";\r\n// const TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\r\n// const CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\r\n// const TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\r\n\r\n// const initialState = {\r\n//   metaMaskReject: false,\r\n//   checkingTx: false,\r\n//   txSuccessful: false,\r\n//   redirectToHome: false,\r\n// };\r\n\r\n\r\n\r\n// export function capReducer(state = initialState, action) {\r\n//   switch (action.type) {\r\n//     case TX_ERROR_METAMASK:\r\n//       return { ...state, checkMetaMask: false, metaMaskReject: true };\r\n//     case CHECKING_TX_UI:\r\n//       return { ...state, checkMetaMask: false, checkingTx: true };\r\n//     case CHECKING_TX_UI_DONE:\r\n//       return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\r\n//     case TX_SUCCESSFUL_UPDATE_UI:\r\n//       return { ...state, checkingTx: false, txSuccessful: true };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// export default combineReducers({\r\n//   capReducer,\r\n//   ...drizzleReducers\r\n// });\r\n// actions\r\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH'\r\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED'\r\n\r\n//const TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  transactionComplete: false\r\n};\r\n\r\nfunction transactionReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case TX_PROCESSING:\r\n        return { ...state, transactionProcessing: true };\r\n      case TX_DONE:\r\n        return { ...state, transactionComplete: true };\r\n      // case CHECKING_TX_UI_DONE:\r\n      //   return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\r\n      // case TX_SUCCESSFUL_UPDATE_UI:\r\n      //   return { ...state, checkingTx: false, txSuccessful: true };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n// const todosReducer = (state= [], action) => {\r\n//   if (action.type === TX_PROCESSING) {\r\n//     // update your state\r\n//     return action.process\r\n//   }\r\n//     return state\r\n//  }\r\n \r\n\r\n\r\n\r\n// fetch data from service using sagas\r\nfunction *fetchTransaction() {\r\n  //const process = yield('Transaction Processing')\r\n  yield put({ type: TX_PROCESSING, process })\r\n }\r\n\r\n \r\nfunction *txSuccessful() {\r\n  yield put({ type: TX_DONE});\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction *appRootSaga() {\r\n yield takeEvery('TX_BROADCASTED', fetchTransaction)\r\n yield takeEvery('TX_SUCCESSFUL', txSuccessful)\r\n}\r\n\r\nexport const appReducers = { transaction: transactionReducer }\r\nexport const appSagas = [appRootSaga]"]},"metadata":{},"sourceType":"module"}