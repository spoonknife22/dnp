{"ast":null,"code":"import { generateStore, EventActions, drizzleReducers, drizzleSagas } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nexport const contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = \"\".concat(message);\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n}; // const joinTransactionSaga = store => next => action => {\n//   if (action.type === 'TX_SUCCESSFUL') {\n//     const broadcast = action.txHash\n//     //const txStatus = action.event.event\n//     const message = action.receipt\n//     console.log({broadcast})\n//     const display = `${broadcast}`\n//     toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\n//   }\n//   return next(action)\n// }\n//export default contractEventSaga;\n// function *appRootSaga() {\n//   yield takeEvery(TODOS_FETCH, fetchTodos)\n//  }\n// export default function* root() {\n//   yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n//   yield takeLatest('TX_ERROR', showTxErrorMsg);\n//   yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\n//   yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n//   yield all(\n//     drizzleSagas.map(saga => fork(saga))\n//   );\n//   //yield getStoredValueWatcher();\n// }","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["generateStore","EventActions","drizzleReducers","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","contractEventSaga","store","next","action","type","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT"],"mappings":"AACA,SAASA,aAAT,EAAwBC,YAAxB,EAAsCC,eAAtC,EAAuDC,YAAvD,QAA2E,gBAA3E;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgBhB,YAAY,CAACiB,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,aAAMJ,OAAN,CAAb;AAEAP,IAAAA,KAAK,CAACY,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEb,KAAK,CAACc,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,CARM,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport { generateStore, EventActions, drizzleReducers, drizzleSagas } from '@drizzle/store'\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nexport const contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n// const joinTransactionSaga = store => next => action => {\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//     const broadcast = action.txHash\r\n//     //const txStatus = action.event.event\r\n//     const message = action.receipt\r\n//     console.log({broadcast})\r\n//     const display = `${broadcast}`\r\n \r\n//     toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\n\r\n//export default contractEventSaga;\r\n// function *appRootSaga() {\r\n//   yield takeEvery(TODOS_FETCH, fetchTodos)\r\n//  }\r\n\r\n// export default function* root() {\r\n//   yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n//   yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n//   yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\r\n//   yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n//   yield all(\r\n//     drizzleSagas.map(saga => fork(saga))\r\n//   );\r\n//   //yield getStoredValueWatcher();\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}