{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const nowUnix = moment().valueOf(); //const [theArrayOfObjects, setTheArrayOfObjects] = useState([]);\n\n  const _useState = useState([1, red]),\n        theArray = _useState[0],\n        setTheArray = _useState[1]; //const [theArrayOfObjects, setTheArrayOfObjects] = useState([{ color: \"blue\" }]);\n\n\n  console.log(theArray); //const [orders, setOrders] = useState([]);\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  let expiredOrderIdArray = [];\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var proposalContract, deployedAddresses, i, address, propData, j, orderId, graphql, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context2.sent;\n              _context2.next = 5;\n              return proposalContract.methods.getDeployedAddresses().call();\n\n            case 5:\n              deployedAddresses = _context2.sent;\n              console.log(expiredOrderIdArray);\n              i = 0;\n\n            case 8:\n              if (!(i < deployedAddresses.length)) {\n                _context2.next = 18;\n                break;\n              }\n\n              address = deployedAddresses[i];\n              _context2.next = 12;\n              return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n            case 12:\n              propData = _context2.sent;\n              orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1', '0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6', '0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\n\n              for (j = 0; j < orderId.length; j++) {\n                graphql = JSON.stringify({\n                  query: \"{\\n              orders(where: {id:\\\"\".concat(orderId[j], \"\\\", status:cancelled, category:parcel }) {\\n                nft{\\n                  parcel{          \\n                          x,\\n                          y,\\n                          tokenId\\n                      }\\n                  activeOrder{\\n                      price\\n                      expiresAt\\n                      txHash\\n                      nftAddress\\n                  }\\n              }\\n              }\\n            }\")\n                });\n                targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n                fetch(targetUrl, {\n                  method: \"POST\",\n                  headers: myHeaders,\n                  body: graphql,\n                  variables: {},\n                  redirect: 'follow'\n                }).then(res => res.json()).then( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          expiredOrderIdArray.push(result.data.orders);\n                          setTheArray(prev => [...prev, result.data.orders]); //setTheArrayOfObjects(prevState => [...prevState, { [name]: result.data.orders}]);\n\n                        case 2:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }(), error => {\n                  return error;\n                });\n              }\n\n            case 15:\n              i++;\n              _context2.next = 8;\n              break;\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = expiredOrderIdArray.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(NominatedCardsExpired, \"Dz9xcHx1gCRDXV25o0qhEXbuJ4k=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominatedCardsExpired","props","userManaBalance","nowUnix","valueOf","red","theArray","setTheArray","console","log","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","expiredOrderIdArray","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","i","length","address","getPropData","propData","orderId","j","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","orders","prev","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  \r\nconst nowUnix = moment().valueOf();\r\n\r\n//const [theArrayOfObjects, setTheArrayOfObjects] = useState([]);\r\n\r\nconst [theArray, setTheArray] = useState([1, red]);\r\n\r\n\r\n//const [theArrayOfObjects, setTheArrayOfObjects] = useState([{ color: \"blue\" }]);\r\n\r\nconsole.log(theArray)\r\n\r\n  //const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  let expiredOrderIdArray = [];\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n    \r\n      console.log(expiredOrderIdArray);\r\n     \r\n\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n      //const orderId = propData[3];\r\n        let j;\r\n        let orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1','0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6','0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\r\n       \r\n        for (j = 0; j < orderId.length; j++) {\r\n          const graphql = JSON.stringify({ query: \r\n            `{\r\n              orders(where: {id:\"${orderId[j]}\", status:cancelled, category:parcel }) {\r\n                nft{\r\n                  parcel{          \r\n                          x,\r\n                          y,\r\n                          tokenId\r\n                      }\r\n                  activeOrder{\r\n                      price\r\n                      expiresAt\r\n                      txHash\r\n                      nftAddress\r\n                  }\r\n              }\r\n              }\r\n            }`\r\n        })\r\n    \r\n        const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n        fetch(targetUrl, {\r\n          method: \"POST\",\r\n          headers:myHeaders,  \r\n          body:graphql, variables:{},\r\n          redirect: 'follow'\r\n        })\r\n          .then(res => res.json())\r\n          .then( async (result) => {\r\n            expiredOrderIdArray.push(result.data.orders);\r\n\r\n\r\n            setTheArray(prev => [...prev, result.data.orders]);\r\n\r\n            //setTheArrayOfObjects(prevState => [...prevState, { [name]: result.data.orders}]);\r\n\r\n          },\r\n          (error) => {\r\n          return error;\r\n          }\r\n        ) \r\n      }\r\n    }\r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = expiredOrderIdArray.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n      <Pagination\r\n      currentPage ={currentPage }\r\n      parcelsPerPage={parcelsPerPage}\r\n      totalParcels={totalOrders}\r\n      paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}