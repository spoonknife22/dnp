{"ast":null,"code":"import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify'; // const TX_PROCESSING = 'TX_PROCESSING'\n\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst GET_TOKEN_ID = 'GET_TOKEN_ID'; // function* showMetaMaskOverlay() {\n//   yield put({ type: 'CHECK_METAMASK' });\n// }\n// function* showTxErrorMsg() {\n//   yield put({ type: 'TX_ERROR_METAMASK' });\n// }\n// function* showCheckingTxMsg() {\n//   yield put({ type: 'CHECKING_TX_UI' });\n// } \n// function* fetchTransaction() {\n//   yield put({ type: TX_PROCESSING })\n//  }\n// const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n\nfunction* txSuccessful() {\n  console.log('hi');\n  yield put({\n    type: TX_PROCESSING_DONE\n  });\n} //Working\n// export const cappSagas = store => next => action => {\n//   if (action.type === 'GOT_TOKEN_ID') { \n//     console.log('hello');\n//   }\n//   return next(action)\n// }\n\n\nfunction* fetchTokenId() {\n  toast.info('hi', {\n    position: toast.POSITION.TOP_RIGHT\n  });\n  console.log('hello');\n  yield put({\n    type: GOT_TOKEN_ID,\n    tokenId: 33\n  });\n} // function* fetchTokenId() {\n// const myHeaders = new Headers();  \n// myHeaders.append(\"Content-Type\", \"application/json\");\n// const [tokenId, setTokenId] = useState();\n// const [loading, setLoading] = useState(false);\n// const graphql= JSON.stringify({ query: \n// `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\n// })\n// const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n// targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\n// fetch(proxyUrl + targetUrl, {\n//   method: \"POST\",\n//   headers:myHeaders,  \n//   body:graphql, variables:{},\n//   redirect: 'follow'\n// })\n//   .then(res => res.json())\n//   .then(\n//     (result) => {\n//       const parcelData = result.data.parcels[0];\n//       const gotTokenId = parcelData.tokenId;\n//       setTokenId(gotTokenId);\n//   });\n//   yield put({ type: GET_TOKEN_ID, tokenId: 2});\n// } \n//const drizzleSagas = drizzleSagas;\n// app root saga\n\n\nfunction* appRootSaga() {\n  // yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  // yield takeLatest('TX_ERROR', showTxErrorMsg);\n  // yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield takeEvery('GOT_TOKEN_ID', fetchTokenId); // yield all(\n  //   drizzleSagas.map(saga => fork(saga))\n  //  );\n}\n\nexport const appSagas = [appRootSaga]; //export const cappSagas = [fetchTokenId];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","TX_PROCESSING_DONE","GET_TOKEN_ID","txSuccessful","console","log","type","fetchTokenId","info","position","POSITION","TOP_RIGHT","GOT_TOKEN_ID","tokenId","appRootSaga","appSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,UAAUC,YAAV,GAAyB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,QAAMX,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAT;AACD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAUM,YAAV,GAAyB;AACvBP,EAAAA,KAAK,CAACQ,IAAN,CAAW,IAAX,EAAiB;AAAEC,IAAAA,QAAQ,EAAET,KAAK,CAACU,QAAN,CAAeC;AAA3B,GAAjB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAMX,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEM,YAAR;AAAqBC,IAAAA,OAAO,EAAC;AAA7B,GAAD,CAAT;AACA,C,CAKF;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;AACA,UAAUC,WAAV,GAAwB;AACtB;AACA;AACA;AACA,QAAMrB,UAAU,CAAC,eAAD,EAAkBU,YAAlB,CAAhB;AACA,QAAMJ,SAAS,CAAC,cAAD,EAAiBQ,YAAjB,CAAf,CALsB,CAMpB;AACA;AACA;AACH;;AAED,OAAO,MAAMQ,QAAQ,GAAG,CAACD,WAAD,CAAjB,C,CAEP","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n// const TX_PROCESSING = 'TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst GET_TOKEN_ID = 'GET_TOKEN_ID';\r\n \r\n\r\n\r\n\r\n// function* showMetaMaskOverlay() {\r\n//   yield put({ type: 'CHECK_METAMASK' });\r\n// }\r\n\r\n// function* showTxErrorMsg() {\r\n//   yield put({ type: 'TX_ERROR_METAMASK' });\r\n// }\r\n\r\n// function* showCheckingTxMsg() {\r\n//   yield put({ type: 'CHECKING_TX_UI' });\r\n// } \r\n\r\n// function* fetchTransaction() {\r\n//   yield put({ type: TX_PROCESSING })\r\n//  }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\nfunction* txSuccessful() {\r\n  console.log('hi')\r\n  yield put({ type: TX_PROCESSING_DONE});\r\n}\r\n\r\n\r\n//Working\r\n// export const cappSagas = store => next => action => {\r\n//   if (action.type === 'GOT_TOKEN_ID') { \r\n//     console.log('hello');\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\nfunction* fetchTokenId() {\r\n  toast.info('hi', { position: toast.POSITION.TOP_RIGHT })\r\n  console.log('hello')\r\n  yield put({ type: GOT_TOKEN_ID,tokenId:33 })\r\n }\r\n\r\n\r\n\r\n\r\n// function* fetchTokenId() {\r\n\r\n// const myHeaders = new Headers();  \r\n// myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n// const [tokenId, setTokenId] = useState();\r\n// const [loading, setLoading] = useState(false);\r\n\r\n// const graphql= JSON.stringify({ query: \r\n// `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\r\n// })\r\n\r\n// const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n// targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n// fetch(proxyUrl + targetUrl, {\r\n//   method: \"POST\",\r\n//   headers:myHeaders,  \r\n//   body:graphql, variables:{},\r\n//   redirect: 'follow'\r\n// })\r\n//   .then(res => res.json())\r\n//   .then(\r\n//     (result) => {\r\n//       const parcelData = result.data.parcels[0];\r\n//       const gotTokenId = parcelData.tokenId;\r\n//       setTokenId(gotTokenId);\r\n//   });\r\n//   yield put({ type: GET_TOKEN_ID, tokenId: 2});\r\n\r\n// } \r\n\r\n//const drizzleSagas = drizzleSagas;\r\n\r\n// app root saga\r\nfunction *appRootSaga() {\r\n  // yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  // yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  // yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeEvery('GOT_TOKEN_ID', fetchTokenId)\r\n    // yield all(\r\n    //   drizzleSagas.map(saga => fork(saga))\r\n    //  );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n\r\n//export const cappSagas = [fetchTokenId];"]},"metadata":{},"sourceType":"module"}