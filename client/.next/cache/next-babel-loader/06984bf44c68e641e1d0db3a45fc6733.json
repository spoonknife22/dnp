{"ast":null,"code":"var _s = $RefreshSig$();\n\n//import { useState } from 'react';\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nfunction* fetchTokenId(action) {\n  _s();\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const [tokenId, setTokenId] = useState(); // const [loading, setLoading] = useState(false);\n\n  const graphql = JSON.stringify({\n    query: `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\n  });\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n  fetch(proxyUrl + targetUrl, {\n    method: \"POST\",\n    headers: myHeaders,\n    body: graphql,\n    variables: {},\n    redirect: 'follow'\n  }).then(res => res.json()).then(result => {\n    const parcelData = result.data.parcels[0];\n    const gotTokenId = parcelData.tokenId;\n    setTokenId(gotTokenId);\n  });\n  yield put({\n    type: 'TOKEN_ID_FETCHING',\n    tokenId: 22\n  });\n}\n\n_s(fetchTokenId, \"j2py1OIN7tAX6j2AGeFAmYeKV+0=\");\n\nfunction* txSuccessful() {\n  console.log('hi taxes');\n}\n\nfunction* appSagas() {\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n}\n\nexport default appSagas;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","fetchTokenId","action","myHeaders","Headers","append","tokenId","setTokenId","useState","graphql","JSON","stringify","query","parcel","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","json","result","parcelData","data","parcels","gotTokenId","type","txSuccessful","console","log","appSagas"],"mappings":";;AAAA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAGA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;;AAEA,UAAUC,YAAV,CAAwBC,MAAxB,EAAgC;AAAA;;AAE9B,QAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,EAAtC,CAL8B,CAM9B;;AAEA,QAAMC,OAAO,GAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,KAAK,EACpC,wBAAuBV,MAAM,CAACW,MAAP,CAAcC,CAAE,QAAOZ,MAAM,CAACW,MAAP,CAAcE,CAAE;AADjC,GAAf,CAAf;AAIA,QAAMC,QAAQ,GAAG,sCAAjB;AAAA,QACAC,SAAS,GAAG,kEADZ;AAGAC,EAAAA,KAAK,CAACF,QAAQ,GAAGC,SAAZ,EAAuB;AAC1BE,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAACjB,SAFkB;AAG1BkB,IAAAA,IAAI,EAACZ,OAHqB;AAGZa,IAAAA,SAAS,EAAC,EAHE;AAI1BC,IAAAA,QAAQ,EAAE;AAJgB,GAAvB,CAAL,CAMGC,IANH,CAMQ1B,GAAG,IAAIA,GAAG,CAAC2B,IAAJ,EANf,EAOGD,IAPH,CAQKE,MAAD,IAAY;AACV,UAAMC,UAAU,GAAGD,MAAM,CAACE,IAAP,CAAYC,OAAZ,CAAoB,CAApB,CAAnB;AACA,UAAMC,UAAU,GAAGH,UAAU,CAACrB,OAA9B;AACAC,IAAAA,UAAU,CAACuB,UAAD,CAAV;AACH,GAZH;AAcA,QAAM1C,GAAG,CAAC;AAAE2C,IAAAA,IAAI,EAAE,mBAAR;AAA6BzB,IAAAA,OAAO,EAAC;AAArC,GAAD,CAAT;AACD;;GA9BSL,Y;;AAkCV,UAAU+B,YAAV,GAAyB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;;AAGD,UAAUC,QAAV,GAAsB;AACpB,QAAM1C,SAAS,CAAC,eAAD,EAAkBuC,YAAlB,CAAf;AACA,QAAM7C,UAAU,CAAC,gBAAD,EAAmBc,YAAnB,CAAhB;AACD;;AACD,eAAekC,QAAf","sourcesContent":["//import { useState } from 'react';\r\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\nfunction* fetchTokenId (action) {\r\n\r\n  const myHeaders = new Headers();  \r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  \r\n  const [tokenId, setTokenId] = useState();\r\n  // const [loading, setLoading] = useState(false);\r\n  \r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\r\n  })\r\n  \r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        const parcelData = result.data.parcels[0];\r\n        const gotTokenId = parcelData.tokenId;\r\n        setTokenId(gotTokenId);\r\n    });\r\n  \r\n  yield put({ type: 'TOKEN_ID_FETCHING', tokenId:22  });\r\n}\r\n\r\n\r\n\r\nfunction* txSuccessful() {\r\n  console.log('hi taxes')\r\n}\r\n\r\n\r\nfunction* appSagas () {\r\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId)\r\n}\r\nexport default appSagas;\r\n\r\n"]},"metadata":{},"sourceType":"module"}