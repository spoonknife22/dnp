{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\NominateButton.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Button } from \"shards-react\";\nimport { Loader } from 'rimble-ui';\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst AccountData = newContextComponents.AccountData,\n      ContractData = newContextComponents.ContractData,\n      ContractForm = newContextComponents.ContractForm;\n\nconst NominationButton = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee({\n    nominateAsset,\n    transactionProcessing,\n    drizzle,\n    drizzleState,\n    tokenId\n  }) {\n    var propAddress;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\n\n        case 2:\n          propAddress = _context.sent;\n\n          if (transactionProcessing) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 5\n            }\n          }, __jsx(Button, {\n            className: \"btn btn-block btn-success contribute-form-btn\",\n            key: \"submit\",\n            type: \"button\",\n            onClick: nominateAsset,\n            theme: \"success\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 11\n            }\n          }, __jsx(\"p\", {\n            className: \"mb-0\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 13\n            }\n          }, \"Nominate\"), console.log(propAddress))));\n\n        case 5:\n          if (!transactionProcessing) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            className: \"mx-auto\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 13\n            }\n          }, __jsx(Loader, {\n            color: \"#007bff\",\n            size: \"40px\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }\n          })));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function NominationButton(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c = NominationButton;\n\nconst mapStateToProps = state => ({\n  transactionProcessing: state.appReducers.transactionProcessing\n});\n\nconst mapDispatchToProps = dispatch => ({\n  nominationProcess: () => dispatch({\n    type: \"NOM_TX_PROCESSING\"\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationButton\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/NominateButton.js"],"names":["React","useState","useEffect","connect","Button","Loader","newContextComponents","AccountData","ContractData","ContractForm","NominationButton","nominateAsset","transactionProcessing","drizzle","drizzleState","tokenId","contracts","ProposalController","methods","getPropTokenIdMap","call","propAddress","console","log","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","nominationProcess","type"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,QAAqC,2BAArC;MACQC,W,GAA4CD,oB,CAA5CC,W;MAAaC,Y,GAA+BF,oB,CAA/BE,Y;MAAcC,Y,GAAiBH,oB,CAAjBG,Y;;AAEnC,MAAMC,gBAAgB;AAAA,sEAAG,iBAAO;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,qBAAjB;AAAwCC,IAAAA,OAAxC;AAAiDC,IAAAA,YAAjD;AAA+DC,IAAAA;AAA/D,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAgBGF,OAAO,CAACG,SAAR,CAAkBC,kBAAlB,CAAqCC,OAArC,CAA6CC,iBAA7C,CAA+DJ,OAA/D,EAAwEK,IAAxE,EAhBH;;AAAA;AAgBjBC,UAAAA,WAhBiB;;AAAA,cAkBnBT,qBAlBmB;AAAA;AAAA;AAAA;;AAAA,2CAqBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGM,MAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,+CAAlB;AAAkE,YAAA,GAAG,EAAC,QAAtE;AAA+E,YAAA,IAAI,EAAC,QAApF;AAA6F,YAAA,OAAO,EAAED,aAAtG;AAAsH,YAAA,KAAK,EAAC,SAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAG,YAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EACmCW,OAAO,CAACC,GAAR,CAAYF,WAAZ,CADnC,CAHN,CArBqB;;AAAA;AAAA,eA+BpBT,qBA/BoB;AAAA;AAAA;AAAA;;AAAA,2CAiCb;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,MAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAjCa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBF,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;KAAMA,gB;;AAyCN,MAAMc,eAAe,GAAIC,KAAD,KAAY;AAClCb,EAAAA,qBAAqB,EAAEa,KAAK,CAACC,WAAN,CAAkBd;AADP,CAAZ,CAAxB;;AAIA,MAAMe,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,iBAAiB,EAAE,MAAOD,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAD;AADM,CAAf,CAA3B;;AAKA,eAAe3B,OAAO,CAACqB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,gBAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Button } from \"shards-react\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\nconst NominationButton = async ({ nominateAsset, transactionProcessing, drizzle, drizzleState, tokenId }) => {     \r\n\r\n  // let state = drizzle.store.getState();\r\n  // let transactProcessing = state.transactionProcessing;\r\n \r\n  // useEffect(  () => {\r\n\r\n  //   if(transactProcessing){ \r\n  //     setShow(true);\r\n  //   }\r\n  //   else{\r\n  //   setShow(false);\r\n  //   }\r\n  // }, [transactProcessing]);   \r\n  \r\n  //const member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getPropTokenIdMap\" methodArgs={[tokenId]} />\r\n  const propAddress = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\r\n  //const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getProposalIdsFromUser\" methodArgs={[1]} />\r\n  if(!transactionProcessing)  {  \r\n    \r\n  return (\r\n    <div>\r\n    \r\n    {/* <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"deployedProposals\" methodArgs={[tokenId]} /> */}\r\n          <Button className=\"btn btn-block btn-success contribute-form-btn\" key=\"submit\" type=\"button\" onClick={nominateAsset}  theme=\"success\" >\r\n            <p className=\"mb-0\">Nominate</p>{console.log(propAddress)}\r\n          \r\n          </Button>\r\n          </div>\r\n        )   \r\n  } \r\n  if(transactionProcessing)  {\r\n    return (   \r\n            <div className=\"mx-auto\">   \r\n              <Loader color=\"#007bff\" size=\"40px\" />\r\n            </div>\r\n        )   \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  transactionProcessing: state.appReducers.transactionProcessing,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nominationProcess: () =>  dispatch({ type: \"NOM_TX_PROCESSING\" })\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\r\n"]},"metadata":{},"sourceType":"module"}