{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AddrJoinNav.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport AddressBar from \"./AddressBar.js\";\nimport JoinButton from \"./JoinButton.js\";\n\nclass AddrJoinNav extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    let state = drizzle.store.getState();\n    const contract = drizzle.contracts.UserStorage;\n    const account = state.accounts[0];\n\n    try {\n      const dataKey = await contract.methods[\"addresses\"].cacheCall(account);\n      this.setState({\n        dataKey\n      });\n    } catch (err) {\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props; //Typical usage (don't forget to compare props):\n\n    if (this.props.drizzleState.accounts[0] !== this.props.drizzleState.accounts[0]) {\n      updateInterface();\n    }\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.addresses[this.state.dataKey];\n    const user = displayData && displayData.value;\n    console.log(this.props.drizzleState.accounts[0]);\n\n    if (user) {\n      return __jsx(AddressBar, {\n        drizzle: this.props.drizzle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 12\n        }\n      });\n    }\n\n    return __jsx(JoinButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default AddrJoinNav;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AddrJoinNav.js"],"names":["React","AddressBar","JoinButton","AddrJoinNav","Component","dataKey","componentDidMount","drizzle","props","state","store","getState","contract","contracts","UserStorage","account","accounts","methods","cacheCall","setState","err","errorMessage","message","componentDidUpdate","prevProps","drizzleState","updateInterface","render","displayData","addresses","user","value","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;;AAIA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADiC;AAAA;;AAG1C,QAAMC,iBAAN,GAA0B;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,QAAIC,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAcC,QAAd,EAAZ;AACA,UAAMC,QAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGN,KAAK,CAACO,QAAN,CAAe,CAAf,CAAhB;;AAEA,QAAI;AACJ,YAAMX,OAAO,GAAG,MAAMO,QAAQ,CAACK,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCH,OAAxC,CAAtB;AACA,WAAKI,QAAL,CAAc;AAAEd,QAAAA;AAAF,OAAd;AAEC,KAJD,CAKA,OAAOe,GAAP,EAAY;AACV,WAAKD,QAAL,CAAc;AAAEE,QAAAA,YAAY,EAAED,GAAG,CAACE;AAApB,OAAd;AACD;AAED;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC7B,UAAM;AAAEjB,MAAAA,OAAF;AAAWkB,MAAAA;AAAX,QAA4B,KAAKjB,KAAvC,CAD6B,CAE7B;;AACA,QAAI,KAAKA,KAAL,CAAWiB,YAAX,CAAwBT,QAAxB,CAAiC,CAAjC,MAAwC,KAAKR,KAAL,CAAWiB,YAAX,CAAwBT,QAAxB,CAAiC,CAAjC,CAA5C,EAAiF;AAC/EU,MAAAA,eAAe;AAChB;AACF;;AAEAC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEb,MAAAA;AAAF,QAAkB,KAAKN,KAAL,CAAWiB,YAAX,CAAwBZ,SAAhD;AACA,UAAMe,WAAW,GAAGd,WAAW,CAACe,SAAZ,CAAsB,KAAKpB,KAAL,CAAWJ,OAAjC,CAApB;AACA,UAAMyB,IAAI,GAAIF,WAAW,IAAIA,WAAW,CAACG,KAAzC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,KAAL,CAAWiB,YAAX,CAAwBT,QAAxB,CAAiC,CAAjC,CAAZ;;AACA,QAAGc,IAAH,EAAS;AACP,aAAO,MAAC,UAAD;AAAY,QAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWD,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACC,WAAO,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AArCuC;;AAwC1C,eAAeJ,WAAf","sourcesContent":["import React from 'react';\r\nimport AddressBar  from \"./AddressBar.js\"; \r\nimport JoinButton from \"./JoinButton.js\";\r\n\r\n\r\n\r\nclass AddrJoinNav extends React.Component {\r\n state = { dataKey: null };\r\n\r\nasync componentDidMount() {\r\n  const { drizzle } = this.props;\r\n  let state = drizzle.store.getState();\r\n  const contract = drizzle.contracts.UserStorage;\r\n  const account = state.accounts[0];\r\n\r\n  try {\r\n  const dataKey = await contract.methods[\"addresses\"].cacheCall(account);\r\n  this.setState({ dataKey });\r\n \r\n  }\r\n  catch (err) {\r\n    this.setState({ errorMessage: err.message });\r\n  }\r\n  \r\n }\r\n\r\n componentDidUpdate(prevProps) {\r\n  const { drizzle, drizzleState } = this.props;\r\n  //Typical usage (don't forget to compare props):\r\n  if (this.props.drizzleState.accounts[0] !== this.props.drizzleState.accounts[0]) {\r\n    updateInterface();\r\n  }\r\n}\r\n\r\n render() {\r\n  const { UserStorage } = this.props.drizzleState.contracts;\r\n  const displayData = UserStorage.addresses[this.state.dataKey]; \r\n  const user =  displayData && displayData.value;\r\n  console.log(this.props.drizzleState.accounts[0])\r\n  if(user) {\r\n    return <AddressBar drizzle={this.props.drizzle} />;\r\n  }\r\n    return <JoinButton />;\r\n  }\r\n}\r\n\r\nexport default AddrJoinNav;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}