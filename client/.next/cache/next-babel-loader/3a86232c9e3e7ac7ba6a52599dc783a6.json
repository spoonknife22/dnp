{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { eth, getInstance } from './provider';\nimport Web3 from \"web3\";\nimport UserStorage from \"./artifacts/contracts/UserStorage.json\";\nimport UserController from \"./artifacts/contracts/UserController.json\";\nexport var getLoggedInUserId =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var addresses, storage, userId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return ethereum.enable();\n\n          case 3:\n            _context.next = 5;\n            return eth.getAccounts();\n\n          case 5:\n            addresses = _context.sent;\n\n            if (addresses) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return getInstance(UserStorage);\n\n          case 10:\n            storage = _context.sent;\n            _context.next = 13;\n            return storage.addresses.call(addresses[0]);\n\n          case 13:\n            userId = _context.sent;\n            return _context.abrupt(\"return\", _parseInt(userId));\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Err:\", _context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 17]]);\n  }));\n\n  return function getLoggedInUserId() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUserIdFromUsername =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(username) {\n    var storage, userId;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getInstance(UserStorage);\n\n          case 2:\n            storage = _context2.sent;\n            _context2.next = 5;\n            return storage.usernames.call(username);\n\n          case 5:\n            userId = _context2.sent;\n            return _context2.abrupt(\"return\", userId);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getUserIdFromUsername(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getUserInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(userId) {\n    var storage, profile, id, username, firstName, lastName, bio, gravatarEmail;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getInstance(UserStorage);\n\n          case 2:\n            storage = _context3.sent;\n            _context3.next = 5;\n            return storage.profiles.call(userId);\n\n          case 5:\n            profile = _context3.sent;\n            id = profile.id, username = profile.username, firstName = profile.firstName, lastName = profile.lastName, bio = profile.bio, gravatarEmail = profile.gravatarEmail;\n\n            if (_parseInt(id)) {\n              _context3.next = 9;\n              break;\n            }\n\n            throw \"Couldn't find user!\";\n\n          case 9:\n            return _context3.abrupt(\"return\", {\n              id: _parseInt(id),\n              username: Web3.utils.toAscii(username),\n              firstName: Web3.utils.toAscii(firstName),\n              lastName: Web3.utils.toAscii(lastName),\n              bio: bio,\n              gravatarEmail: gravatarEmail\n            });\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getUserInfo(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createUser =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(username, firstName, lastName, bio, gravatarEmail) {\n    var controller, addresses, result;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return ethereum.enable();\n\n          case 3:\n            _context4.next = 5;\n            return getInstance(UserController);\n\n          case 5:\n            controller = _context4.sent;\n            _context4.next = 8;\n            return eth.getAccounts();\n\n          case 8:\n            addresses = _context4.sent;\n            _context4.next = 11;\n            return controller.createUser(Web3.utils.fromAscii(username), Web3.utils.fromAscii(firstName), Web3.utils.fromAscii(lastName), bio, gravatarEmail, {\n              from: addresses[0]\n            });\n\n          case 11:\n            result = _context4.sent;\n            return _context4.abrupt(\"return\", result);\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(\"Err:\", _context4.t0);\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 15]]);\n  }));\n\n  return function createUser(_x3, _x4, _x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Samsung/code/tweether/client/web3/users.js"],"names":["eth","getInstance","Web3","UserStorage","UserController","getLoggedInUserId","ethereum","enable","getAccounts","addresses","storage","call","userId","console","error","getUserIdFromUsername","username","usernames","getUserInfo","profiles","profile","id","firstName","lastName","bio","gravatarEmail","utils","toAscii","createUser","controller","fromAscii","from","result"],"mappings":"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","sourcesContent":["import { eth, getInstance } from './provider'\r\nimport Web3 from \"web3\"\r\nimport UserStorage from \"./artifacts/contracts/UserStorage.json\"\r\nimport UserController from \"./artifacts/contracts/UserController.json\"\r\n\r\n\r\nexport const getLoggedInUserId = async () => {\r\n  try {\r\n    await ethereum.enable()\r\n    const addresses = await eth.getAccounts()\r\n\r\n    if (!addresses) return\r\n\r\n    const storage = await getInstance(UserStorage)\r\n    const userId = await storage.addresses.call(addresses[0])\r\n\r\n    return parseInt(userId)\r\n  } catch (err) {\r\n    console.error(\"Err:\", err)\r\n  }\r\n}\r\n\r\nexport const getUserIdFromUsername = async (username) => {\r\n  const storage = await getInstance(UserStorage)\r\n  const userId = await storage.usernames.call(username)\r\n\r\n  return userId\r\n}\r\n\r\nexport const getUserInfo = async (userId) => {\r\n  const storage = await getInstance(UserStorage)\r\n  const profile = await storage.profiles.call(userId)\r\n\r\n  const {\r\n    id, \r\n    username, \r\n    firstName, \r\n    lastName, \r\n    bio, \r\n    gravatarEmail, \r\n  } = profile\r\n  \r\n  if (!parseInt(id)) throw \"Couldn't find user!\"\r\n\r\n  return {\r\n    id: parseInt(id),\r\n    username: Web3.utils.toAscii(username),\r\n    firstName: Web3.utils.toAscii(firstName),\r\n    lastName: Web3.utils.toAscii(lastName),\r\n    bio,\r\n    gravatarEmail,\r\n  }\r\n}\r\n  \r\nexport const createUser = async (username, firstName, lastName, bio, gravatarEmail) => {\r\n    \r\n    try {\r\n      await ethereum.enable()\r\n\r\n      const controller = await getInstance(UserController)\r\n      const addresses = await eth.getAccounts()\r\n  \r\n      const result = await controller.createUser(\r\n        Web3.utils.fromAscii(username), Web3.utils.fromAscii(firstName), Web3.utils.fromAscii(lastName), bio, gravatarEmail, {\r\n        from: addresses[0],\r\n      })\r\n  \r\n      return result\r\n    } catch (err) {\r\n      console.error(\"Err:\", err)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}