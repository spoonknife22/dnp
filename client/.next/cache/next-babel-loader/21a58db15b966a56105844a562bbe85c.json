{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\n\nfunction fetchPropAddr(store) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        store.dispatch({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 44\n        });\n\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["fetchPropAddr","appRootSaga","put","takeEvery","GET_PROP_ADDRESS","store","dispatch","type","propAddress"],"mappings":";;oDAIUA,a;qDAIAC,W;;AARV,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;;AAEA,SAAUJ,aAAV,CAAyBK,KAAzB;AAAA;AAAA;AAAA;AACEA,QAAAA,KAAK,CAACC,QAAN,CAAe;AAAEC,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,WAAW,EAAC;AAAxC,SAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUP,WAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,SAAS,CAACC,gBAAD,EAAmBJ,aAAnB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,WAAf","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nfunction* fetchPropAddr (store) {\r\n  store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:44});\r\n}\r\n\r\nfunction* appRootSaga () {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n}\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}