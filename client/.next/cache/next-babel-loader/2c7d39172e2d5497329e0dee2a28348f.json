{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\";\nimport EthAccounts from \"./EthAccounts\";\nimport UserAccount from \"./UserAccount\";\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst {\n  AccountData,\n  ContractData,\n  ContractForm\n} = newContextComponents;\nconst drizzle = new Drizzle(options);\n\nconst MyApp = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return \"Loading...\";\n    }\n\n    const {\n      accounts\n    } = drizzleState;\n    return __jsx(ContractData, {\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      contract: \"UserStorage\",\n      method: \"profiles\",\n      methodArgs: [accounts[0]],\n      render: displayData => {\n        const values = Object.values(displayData);\n        console.log(values[1]); //   Object.entries(displayData).map(([key, value]) => {\n        //     console.log(getvalue)\n        // })\n      } //methodArgs={[{ from: accounts[0] }]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }) //console.log(Object.keys(ObjectTest).map( (key)=> { {key}{ObjectTest[key].name}}));\n    //   <AccountData\n    //   drizzle={drizzle}\n    //   drizzleState={drizzleState}\n    //   accountIndex={0}\n    //   units=\"ether\"\n    //   precision={3}\n    //   render={({ address, balance, units }) => (\n    //     <div>\n    //       <div>My Address: <span style={{ color: \"red\" }}>{address}</span></div>\n    //       <div>My Ether: <span style={{ color: \"red\" }}>{balance}</span> {units}</div>\n    //     </div>\n    //   )}\n    // />\n    // <EthAccounts drizzle={drizzle} drizzleState={drizzleState} />\n    //<UserAccount drizzle={drizzle} drizzleState={drizzleState} />\n    ;\n  }));\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","DrizzleContext","Drizzle","options","EthAccounts","UserAccount","newContextComponents","AccountData","ContractData","ContractForm","drizzle","MyApp","drizzleContext","drizzleState","initialized","accounts","displayData","values","Object","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,IAA8CH,oBAApD;AACA,MAAMI,OAAO,GAAG,IAAIR,OAAJ,CAAYC,OAAZ,CAAhB;;AAEA,MAAMQ,KAAK,GAAG,MAAM;AAClB,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,OAAO,EAAED,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,cAAc,IAAI;AACjB,UAAM;AAACF,MAAAA,OAAD;AAAUG,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,QAAuCF,cAA7C;;AAEA,QAAG,CAACE,WAAJ,EAAiB;AACf,aAAO,YAAP;AACD;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAeF,YAArB;AACA,WAEE,MAAC,YAAD;AACA,MAAA,OAAO,EAAEH,OADT;AAEA,MAAA,YAAY,EAAEG,YAFd;AAGA,MAAA,QAAQ,EAAC,aAHT;AAIA,MAAA,MAAM,EAAC,UAJP;AAKA,MAAA,UAAU,EAAE,CAACE,QAAQ,CAAC,CAAD,CAAT,CALZ;AAOA,MAAA,MAAM,EAAEC,WAAW,IAAI;AAErB,cAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcD,WAAd,CAAf;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAAC,CAAD,CAAlB,EAHqB,CAKvB;AACA;AAEA;AACC,OAhBD,CAiBA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAuBL;AACK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AAtCF;AAwCC,GAhDL,CADF,CADF;AAsDD,CAvDD;;AAyDA,eAAeN,KAAf","sourcesContent":["import React from \"react\";\r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\nimport EthAccounts from \"./EthAccounts\"; \r\nimport UserAccount from \"./UserAccount\"; \r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\r\nconst drizzle = new Drizzle(options);\r\n\r\nconst MyApp = () => {\r\n  return (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized} = drizzleContext;\r\n\r\n          if(!initialized) {\r\n            return \"Loading...\"\r\n          }\r\n          const { accounts } = drizzleState;\r\n          return (\r\n\r\n            <ContractData\r\n            drizzle={drizzle}\r\n            drizzleState={drizzleState}\r\n            contract=\"UserStorage\"\r\n            method=\"profiles\"\r\n            methodArgs={[accounts[0]]} \r\n            \r\n            render={displayData => {\r\n\r\n              const values = Object.values(displayData);\r\n              console.log(values[1]);\r\n\r\n            //   Object.entries(displayData).map(([key, value]) => {\r\n            //     console.log(getvalue)\r\n         \r\n            // })\r\n            }}\r\n            //methodArgs={[{ from: accounts[0] }]}\r\n          />\r\n\r\n     \r\n     //console.log(Object.keys(ObjectTest).map( (key)=> { {key}{ObjectTest[key].name}}));\r\n          //   <AccountData\r\n          //   drizzle={drizzle}\r\n          //   drizzleState={drizzleState}\r\n          //   accountIndex={0}\r\n          //   units=\"ether\"\r\n          //   precision={3}\r\n          //   render={({ address, balance, units }) => (\r\n          //     <div>\r\n          //       <div>My Address: <span style={{ color: \"red\" }}>{address}</span></div>\r\n          //       <div>My Ether: <span style={{ color: \"red\" }}>{balance}</span> {units}</div>\r\n          //     </div>\r\n          //   )}\r\n          // />\r\n            // <EthAccounts drizzle={drizzle} drizzleState={drizzleState} />\r\n            //<UserAccount drizzle={drizzle} drizzleState={drizzleState} />\r\n            )\r\n          }}\r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}