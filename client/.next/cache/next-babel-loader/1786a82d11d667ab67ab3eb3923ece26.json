{"ast":null,"code":"import { EventActions } from '@drizzle/store'; //import { drizzleSagas } from 'drizzle'\n//import {  } from '@drizzle/store/src/index'\n\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nexport const contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = `${message}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n};\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash; //const txStatus = action.event.event\n    //const message = action.receipt.status\n\n    const display = `${transactionHash}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n};\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'REDIRECT_HOME'\n  });\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL_UPDATE_UI'\n  });\n}\n\nexport function* appRootSaga() {\n  yield takeEvery('TX_BROADCASTED', showCheckingTxMsg);\n} // export const capRootSaga  = store => next => action => {\n// //export default function* capRootSaga() {\n//   if (action.type === 'TX_SUCCESSFUL') {\n//   takeLatest('TX_ERROR', showTxErrorMsg);\n//   }\n//   if (action.type === 'TX_SUCCESSFUL') {\n//   takeLatest('TX_BROADCASTED', showCheckingTxMsg);\n//   }\n//   if (action.type === 'TX_SUCCESSFUL') {\n//   takeLatest('TX_SUCCESSFUL', txSuccessful);\n//   }\n//   return next(action)\n// }","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["EventActions","all","fork","takeLatest","put","call","take","race","select","toast","contractEventSaga","store","next","action","type","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT","joinTransactionSaga","transactionHash","txHash","BOTTOM_LEFT","showTxErrorMsg","showCheckingTxMsg","txSuccessful","appRootSaga","takeEvery"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B,C,CACA;AACA;;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgBd,YAAY,CAACe,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,GAAI,GAAEJ,OAAQ,EAA3B;AAEAP,IAAAA,KAAK,CAACY,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEb,KAAK,CAACc,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,CARM;AAUP,OAAO,MAAMY,mBAAmB,GAAGd,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMY,eAAe,GAAGb,MAAM,CAACc,MAA/B,CADmC,CAEnC;AACA;;AACA,UAAMP,OAAO,GAAI,GAAEM,eAAgB,EAAnC;AAEAjB,IAAAA,KAAK,CAACY,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEb,KAAK,CAACc,QAAN,CAAeK;AAA3B,KAAvB;AACD;;AACD,SAAOhB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;;AAaP,UAAUgB,cAAV,GAA2B;AACzB,QAAMzB,GAAG,CAAC;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUgB,iBAAV,GAA8B;AAC5B,QAAM1B,GAAG,CAAC;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMV,GAAG,CAAC;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUiB,YAAV,GAAyB;AACvB,QAAM3B,GAAG,CAAC;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,OAAO,UAAUkB,WAAV,GAAwB;AAC7B,QAAMC,SAAS,CAAC,gBAAD,EAAmBH,iBAAnB,CAAf;AACD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["\r\nimport { EventActions } from '@drizzle/store';\r\n//import { drizzleSagas } from 'drizzle'\r\n//import {  } from '@drizzle/store/src/index'\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nexport const contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    //const txStatus = action.event.event\r\n    //const message = action.receipt.status\r\n    const display = `${transactionHash}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'REDIRECT_HOME' });\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_SUCCESSFUL_UPDATE_UI'});\r\n}\r\n\r\nexport function *appRootSaga() {\r\n  yield takeEvery('TX_BROADCASTED', showCheckingTxMsg);\r\n}\r\n\r\n\r\n// export const capRootSaga  = store => next => action => {\r\n// //export default function* capRootSaga() {\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//   takeLatest('TX_ERROR', showTxErrorMsg);\r\n//   }\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//   takeLatest('TX_BROADCASTED', showCheckingTxMsg);\r\n//   }\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//   takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n//   }\r\n//   return next(action)\r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}