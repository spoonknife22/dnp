{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\NominationModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\n\nconst NominationModal = ({\n  parcel,\n  props,\n  userManaBalance,\n  getTokenId,\n  transactionProcessing,\n  onSetDrizzleState,\n  getCurrentProp,\n  tokenIdState,\n  propAddress\n}) => {\n  _s();\n\n  const _useState = useState(false),\n        show = _useState[0],\n        setShow = _useState[1];\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false);\n\n  const _useState2 = useState(null),\n        tokenId = _useState2[0],\n        setTokenId = _useState2[1];\n\n  const _useState3 = useState(true),\n        loading = _useState3[0],\n        setLoading = _useState3[1];\n\n  const _useState4 = useState(props.drizzle),\n        drizzle = _useState4[0],\n        setDrizzle = _useState4[1]; //const [currentProp, setCurrentProp] = useState(null);\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphql, proxyUrl, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              graphql = JSON.stringify({\n                query: \"{ parcels(where: {x:\\\"\".concat(parcel.x, \"\\\",y:\\\"\").concat(parcel.y, \"\\\"}) { tokenId }}\")\n              });\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(proxyUrl + targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                const parcelData = result.data.parcels[0];\n                return parcelData;\n              }).then(result => {\n                const tokenId = result.tokenId;\n\n                if (tokenId === null) {\n                  setLoading(true);\n                }\n\n                setLoading(false);\n                return tokenId;\n              }).then(result => {\n                getCurrentProp();\n                setTokenId(result);\n                getTokenId(result); //onSetDrizzleState(drizzle);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchDetailsLink() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchDetailsLink();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-lg btn-block card-footer-btn\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Nominate Asset\"), __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Header, {\n    className: \"text-center justify-content-center\",\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Title, {\n    className: \"text-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Asset Price:\\xA0\", parcel.publication.price, \"\\xA0MANA\")), console.log(propAddress), __jsx(Modal.Body, {\n    className: \"pt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(NominationForm, {\n    drizzle: props.drizzle,\n    drizzleState: props.drizzleState,\n    assetPrice: parcel.publication.price,\n    props: props,\n    tokenId: tokenId,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }))));\n};\n\n_s(NominationModal, \"VOVIIO71RfrHimR/DwPBoPdHhso=\");\n\n_c = NominationModal;\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.appReducers.tokenId,\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: result => dispatch({\n    type: \"TOKEN_ID_FETCH\",\n    tokenId: result\n  }),\n  onSetDrizzleState: drizzle => dispatch({\n    type: \"SET_DRIZZLE_STATE\",\n    drizzle: drizzle\n  }),\n  getCurrentProp: () => dispatch({\n    type: \"GET_PROP_ADDRESS\"\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal); //export default NominationModal;      \n\nvar _c;\n\n$RefreshReg$(_c, \"NominationModal\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/NominationModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","NominationModal","parcel","props","userManaBalance","getTokenId","transactionProcessing","onSetDrizzleState","getCurrentProp","tokenIdState","propAddress","show","setShow","handleShow","handleClose","tokenId","setTokenId","loading","setLoading","drizzle","setDrizzle","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","publication","price","console","log","drizzleState","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\n\r\n\r\nconst NominationModal = ({ parcel, props, userManaBalance, getTokenId, transactionProcessing, onSetDrizzleState, getCurrentProp, tokenIdState, propAddress }) => {\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n  const [tokenId, setTokenId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const[drizzle, setDrizzle] = useState(props.drizzle)\r\n  //const [currentProp, setCurrentProp] = useState(null);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n      if(tokenId === null){\r\n        setLoading(true)\r\n      }\r\n      setLoading(false);\r\n      return tokenId;\r\n    })\r\n    .then((result) => {  \r\n      getCurrentProp();\r\n      setTokenId(result);\r\n      getTokenId(result);\r\n      //onSetDrizzleState(drizzle);\r\n    }) \r\n  };\r\nfetchDetailsLink();\r\n}, []);\r\n\r\n   \r\nreturn (   \r\n      <> \r\n        <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>Nominate Asset</button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">Asset Price:&nbsp;{parcel.publication.price}&nbsp;MANA</Modal.Title>\r\n          </Modal.Header>{console.log(propAddress)}\r\n          <Modal.Body className=\"pt-1\">\r\n              <NominationForm                   \r\n                drizzle={props.drizzle}\r\n                drizzleState={props.drizzleState}  \r\n                assetPrice={parcel.publication.price}  \r\n                props={props}\r\n                tokenId={tokenId}\r\n                userManaBalance={userManaBalance}\r\n                /> \r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n        );    \r\n      } \r\n        const mapStateToProps = (state) => ({\r\n          tokenIdState: state.appReducers.tokenId,\r\n          propAddress: state.appReducers.propAddress\r\n        })\r\n        \r\n        const mapDispatchToProps = (dispatch) => ({\r\n          getTokenId: (result) =>  dispatch({ type: \"TOKEN_ID_FETCH\", tokenId:result }),\r\n          onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\r\n          getCurrentProp: () =>  dispatch({ type: \"GET_PROP_ADDRESS\" })\r\n        });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal);\r\n\r\n    //export default NominationModal;      "]},"metadata":{},"sourceType":"module"}