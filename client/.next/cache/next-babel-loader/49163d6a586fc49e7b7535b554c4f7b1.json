{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\"; // import EthAccounts from \"./EthAccounts\"; \n// import UserAccount from \"./UserAccount\"; \n\nimport { EthAddress } from 'rimble-ui';\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst {\n  AccountData,\n  ContractData,\n  ContractForm\n} = newContextComponents;\nconst drizzle = new Drizzle(options);\nimport Web3 from \"web3\";\n\nconst MyApp = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return \"Loading...\";\n    }\n\n    const {\n      accounts\n    } = drizzleState;\n\n    __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, \"return (\", __jsx(ContractData, {\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      contract: \"UserStorage\",\n      method: \"profiles\",\n      methodArgs: [accounts[0]],\n      render: displayData => {\n        const values = Object.values(displayData);\n        const username = Web3.utils.toAscii(values[1]);\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 32\n          }\n        }, username);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }), __jsx(AccountData, {\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      accountIndex: 0,\n      units: \"ether\",\n      precision: 3,\n      render: ({\n        address,\n        balance,\n        units\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }, \"My Address: \", __jsx(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 34\n        }\n      }, address)), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, \"My Ether: \", __jsx(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 32\n        }\n      }, balance), \" \", units)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }), \")\");\n  }));\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","DrizzleContext","Drizzle","options","EthAddress","newContextComponents","AccountData","ContractData","ContractForm","drizzle","Web3","MyApp","drizzleContext","drizzleState","initialized","accounts","displayData","values","Object","username","utils","toAscii","address","balance","units","color"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB,C,CACA;AACA;;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,IAA8CH,oBAApD;AACA,MAAMI,OAAO,GAAG,IAAIP,OAAJ,CAAYC,OAAZ,CAAhB;AACA,OAAOO,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,OAAO,EAAEF,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,cAAc,IAAI;AACjB,UAAM;AAACH,MAAAA,OAAD;AAAUI,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,QAAuCF,cAA7C;;AAEA,QAAG,CAACE,WAAJ,EAAiB;AACf,aAAO,YAAP;AACD;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAeF,YAArB;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGE,MAAC,YAAD;AACE,MAAA,OAAO,EAAEJ,OADX;AAEI,MAAA,YAAY,EAAEI,YAFlB;AAGM,MAAA,QAAQ,EAAC,aAHf;AAIM,MAAA,MAAM,EAAC,UAJb;AAKM,MAAA,UAAU,EAAE,CAACE,QAAQ,CAAC,CAAD,CAAT,CALlB;AAMQ,MAAA,MAAM,EAAEC,WAAW,IAAI;AACrB,cAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcD,WAAd,CAAf;AACA,cAAMG,QAAQ,GAAGT,IAAI,CAACU,KAAL,CAAWC,OAAX,CAAmBJ,MAAM,CAAC,CAAD,CAAzB,CAAjB;AAEE,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAME,QAAN,CAAP;AAEH,OAZT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAmBE,MAAC,WAAD;AACA,MAAA,OAAO,EAAEV,OADT;AAEA,MAAA,YAAY,EAAEI,YAFd;AAGA,MAAA,YAAY,EAAE,CAHd;AAIA,MAAA,KAAK,EAAC,OAJN;AAKA,MAAA,SAAS,EAAE,CALX;AAMA,MAAA,MAAM,EAAE,CAAC;AAAES,QAAAA,OAAF;AAAWC,QAAAA,OAAX;AAAoBC,QAAAA;AAApB,OAAD,KACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAiB;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCH,OAAhC,CAAjB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe;AAAM,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCF,OAAhC,CAAf,OAAgEC,KAAhE,CAFF,CAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF;AAmCC,GA3CL,CADF,CADF;AAiDD,CAlDD;;AAoDA,eAAeb,KAAf","sourcesContent":["import React from \"react\";\r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\n// import EthAccounts from \"./EthAccounts\"; \r\n// import UserAccount from \"./UserAccount\"; \r\nimport { EthAddress } from 'rimble-ui';\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\r\nconst drizzle = new Drizzle(options);\r\nimport Web3 from \"web3\";\r\n\r\nconst MyApp = () => {\r\n  return (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized} = drizzleContext;\r\n\r\n          if(!initialized) {\r\n            return \"Loading...\"\r\n          }\r\n          const { accounts } = drizzleState;\r\n          <div>\r\n          return (\r\n\r\n            <ContractData\r\n              drizzle={drizzle}\r\n                drizzleState={drizzleState}\r\n                  contract=\"UserStorage\"\r\n                  method=\"profiles\"\r\n                  methodArgs={[accounts[0]]} \r\n                    render={displayData => {\r\n                      const values = Object.values(displayData);\r\n                      const username = Web3.utils.toAscii(values[1]);\r\n\r\n                        return <div>{username}</div>\r\n\r\n                    }}\r\n            />\r\n\r\n          \r\n            <AccountData\r\n            drizzle={drizzle}\r\n            drizzleState={drizzleState}\r\n            accountIndex={0}\r\n            units=\"ether\"\r\n            precision={3}\r\n            render={({ address, balance, units }) => (\r\n              <div>\r\n                <div>My Address: <span style={{ color: \"red\" }}>{address}</span></div>\r\n                <div>My Ether: <span style={{ color: \"red\" }}>{balance}</span> {units}</div>\r\n              </div>\r\n            )}\r\n          />\r\n\r\n            )\r\n            </div>\r\n          }}\r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}