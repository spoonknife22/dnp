{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\nexport const fetchPropAddr = store => next => action => {\n  if (action.type === GET_PROP_ADDRESS) {\n    const drizzle = action.drizzle;\n    const state = drizzle.store.getState();\n\n    if (state.drizzleStatus.initialized) {\n      //const dataKey = contract.methods['getPropTokenIdMap'].cacheCall(action.tokenId)\n      const contract = drizzle.contracts.ProposalController; //const propAddress = contract.methods[\"getPropTokenIdMap\"]('115792089237316195423570985008687907844762925492617102452873218822118924353538').call();\n      // const propAddress = contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\n\n      const dataKey = contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\n      const propAddress = state.contracts.ProposalController.getPropTokenIdMap[dataKey]; // 0x91dedb9b3e0500e12b67f27e0f82bbfb13aec9e8dc63543f40dd7a28631db3c5\n\n      console.log(dataKey); //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\n    }\n\n    return 'Loading...';\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","put","takeEvery","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","info","TOP_RIGHT","fetchPropAddr","drizzle","state","getState","drizzleStatus","initialized","contract","contracts","ProposalController","dataKey","methods","cacheCall","propAddress","getPropTokenIdMap","console","log"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAT,IAAAA,KAAK,CAACW,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBT,YAAY,CAACmB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,aAAMH,OAAN,CAAb;AACArB,MAAAA,KAAK,CAACyB,IAAN,CAAWD,OAAX,EAAoB;AAAEZ,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAea;AAA3B,OAApB;AACF;AACF;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;AAYP,OAAO,MAAMoB,aAAa,GAAGtB,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACtD,MAAIA,MAAM,CAACC,IAAP,KAAgBL,gBAApB,EAAsC;AACpC,UAAMyB,OAAO,GAAGrB,MAAM,CAACqB,OAAvB;AACA,UAAMC,KAAK,GAAGD,OAAO,CAACvB,KAAR,CAAcyB,QAAd,EAAd;;AACA,QAAID,KAAK,CAACE,aAAN,CAAoBC,WAAxB,EAAqC;AACnC;AACA,YAAMC,QAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkBC,kBAAnC,CAFmC,CAInC;AACD;;AACA,YAAMC,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiB,mBAAjB,EAAsCC,SAAtC,CAAgD,gFAAhD,CAAhB;AACA,YAAMC,WAAW,GAAGV,KAAK,CAACK,SAAN,CAAgBC,kBAAhB,CAAmCK,iBAAnC,CAAqDJ,OAArD,CAApB,CAPoC,CAUpC;;AACCK,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAXmC,CAYnC;AACC;;AACD,WAAO,YAAP;AACD;;AACH,SAAO9B,IAAI,CAACC,MAAD,CAAX;AACD,CArBM","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\nimport { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const fetchPropAddr = store => next => action => {\r\n  if (action.type === GET_PROP_ADDRESS) {\r\n    const drizzle = action.drizzle;\r\n    const state = drizzle.store.getState()\r\n    if (state.drizzleStatus.initialized) {\r\n      //const dataKey = contract.methods['getPropTokenIdMap'].cacheCall(action.tokenId)\r\n      const contract = drizzle.contracts.ProposalController;\r\n\r\n      //const propAddress = contract.methods[\"getPropTokenIdMap\"]('115792089237316195423570985008687907844762925492617102452873218822118924353538').call();\r\n     // const propAddress = contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\r\n     const dataKey = contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\r\n     const propAddress = state.contracts.ProposalController.getPropTokenIdMap[dataKey]\r\n\r\n     \r\n     // 0x91dedb9b3e0500e12b67f27e0f82bbfb13aec9e8dc63543f40dd7a28631db3c5\r\n      console.log(dataKey);\r\n      //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\r\n      }\r\n      return 'Loading...'\r\n    }\r\n  return next(action)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}