{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  const nowUnix = moment().valueOf(); //const [theArray, setTheArray] = useState([]);\n\n  const _useState = useState([{}]),\n        theArrayOfObjects = _useState[0],\n        setTheArrayOfObjects = _useState[1]; //const [theObject, setTheObject] = useState({food: \"gyoza\"});\n  //console.log(theArrayOfObjects)\n\n\n  const _useState2 = useState([]),\n        orders = _useState2[0],\n        setOrders = _useState2[1];\n\n  const _useState3 = useState(false),\n        loading = _useState3[0],\n        setLoading = _useState3[1];\n\n  const _useState4 = useState(1),\n        currentPage = _useState4[0],\n        setCurrentPage = _useState4[1];\n\n  const _useState5 = useState(6),\n        parcelsPerPage = _useState5[0];\n\n  const _useState6 = useState(),\n        totalOrders = _useState6[0],\n        setTotalOrders = _useState6[1];\n\n  console.log(orders);\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    fetchParcels();\n  }, []);\n\n  const fetchParcels = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var proposalContract, deployedAddresses, i, j, expiredOrderIdArray, orderId, graphql, targetUrl;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController;\n\n          case 2:\n            proposalContract = _context2.sent;\n            _context2.next = 5;\n            return proposalContract.methods.getDeployedAddresses().call();\n\n          case 5:\n            deployedAddresses = _context2.sent;\n            expiredOrderIdArray = [];\n            orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1', '0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6', '0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\n\n            for (j = 0; j < orderId.length; j++) {\n              graphql = JSON.stringify({\n                query: \"{\\n              orders(where: {id:\\\"\".concat(orderId[j], \"\\\", status:cancelled, category:parcel }) {\\n                nft{\\n                  parcel{          \\n                          x,\\n                          y,\\n                          tokenId\\n                      }\\n                  activeOrder{\\n                      price\\n                      expiresAt\\n                      txHash\\n                      nftAddress\\n                  }\\n              }\\n              }\\n            }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        expiredOrderIdArray.push(result.data.orders);\n                        setOrders(result.data.orders); //setTheObject(prev => ({...prev, ['nft']:result.data.orders}));\n                        //setTheArray(prev => [...prev, result.data.orders]);\n                        //setTheArrayOfObjects(prevState => [...prevState, {['nft']: result.data.orders}]);\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n            } //}\n\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchParcels() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Get current orders\n\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = expiredOrderIdArray.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default NominatedCardsExpired;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominatedCardsExpired","props","userManaBalance","nowUnix","valueOf","theArrayOfObjects","setTheArrayOfObjects","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","console","log","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","expiredOrderIdArray","orderId","j","length","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  \r\nconst nowUnix = moment().valueOf();\r\n\r\n\r\n//const [theArray, setTheArray] = useState([]);\r\nconst [theArrayOfObjects, setTheArrayOfObjects] = useState([{}]);\r\n\r\n//const [theObject, setTheObject] = useState({food: \"gyoza\"});\r\n\r\n\r\n\r\n//console.log(theArrayOfObjects)\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  console.log(orders);\r\n\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n  useEffect(() => {\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n    \r\n     \r\n     \r\n      // (8) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\r\n      // >nft: {activeOrder: {…}, parcel: {…}}\r\n\r\n      //for (i = 0; i < deployedAddresses.length; i++) {\r\n        // const address = deployedAddresses[i];\r\n        // const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n      //const orderId = propData[3];\r\n\r\n        let j;\r\n        let expiredOrderIdArray = [];\r\n        let orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1','0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6','0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\r\n       \r\n        for (j = 0; j < orderId.length; j++) {\r\n          const graphql = JSON.stringify({ query: \r\n            `{\r\n              orders(where: {id:\"${orderId[j]}\", status:cancelled, category:parcel }) {\r\n                nft{\r\n                  parcel{          \r\n                          x,\r\n                          y,\r\n                          tokenId\r\n                      }\r\n                  activeOrder{\r\n                      price\r\n                      expiresAt\r\n                      txHash\r\n                      nftAddress\r\n                  }\r\n              }\r\n              }\r\n            }`\r\n        })\r\n    \r\n        const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n        fetch(targetUrl, {\r\n          method: \"POST\",\r\n          headers:myHeaders,  \r\n          body:graphql, variables:{},\r\n          redirect: 'follow'\r\n        })\r\n          .then(res => res.json())\r\n          .then( async (result) => {\r\n            expiredOrderIdArray.push(result.data.orders);\r\n            setOrders(result.data.orders);\r\n            //setTheObject(prev => ({...prev, ['nft']:result.data.orders}));\r\n            //setTheArray(prev => [...prev, result.data.orders]);\r\n            \r\n            //setTheArrayOfObjects(prevState => [...prevState, {['nft']: result.data.orders}]);\r\n\r\n          },\r\n          (error) => {\r\n          return error;\r\n          }\r\n        ) \r\n      }\r\n    //}\r\n  }\r\n   \r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = expiredOrderIdArray.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n      <Pagination\r\n      currentPage ={currentPage }\r\n      parcelsPerPage={parcelsPerPage}\r\n      totalParcels={totalOrders}\r\n      paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}