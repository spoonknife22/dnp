{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\NominationModal.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport ProposalForm from '../forms/ProposalForm';\n\nconst NominationModal = ({\n  parcel,\n  props,\n  userManaBalance,\n  getTokenId,\n  getCurrentProp,\n  propAddress\n}) => {\n  const drizzleState = props.drizzleState,\n        drizzle = props.drizzle;\n\n  const _useState = useState(false),\n        show = _useState[0],\n        setShow = _useState[1];\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false);\n\n  const _useState2 = useState(null),\n        tokenId = _useState2[0],\n        setTokenId = _useState2[1];\n\n  const _useState3 = useState(true),\n        loading = _useState3[0],\n        setLoading = _useState3[1]; ///const[drizzle, setDrizzle] = useState(props.drizzle)\n  //const [currentProp, setCurrentProp] = useState(null);\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var graphql, proxyUrl, targetUrl;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              graphql = JSON.stringify({\n                query: \"{ parcels(where: {x:\\\"\".concat(parcel.x, \"\\\",y:\\\"\").concat(parcel.y, \"\\\"}) { tokenId }}\")\n              });\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(proxyUrl + targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                const parcelData = result.data.parcels[0];\n                return parcelData;\n              }).then(result => {\n                const tokenId = result.tokenId;\n\n                if (tokenId === null) {\n                  setLoading(true);\n                }\n\n                setLoading(false);\n                return tokenId;\n              }).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(tokenId) {\n                  var dataKey;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        setTokenId(tokenId);\n                        getTokenId(tokenId);\n                        _context.next = 4;\n                        return drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(\"\".concat(tokenId));\n\n                      case 4:\n                        dataKey = _context.sent;\n                        return _context.abrupt(\"return\", dataKey);\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dataKey) {\n                  var state, proposalAddress;\n                  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        state = drizzle.store.getState();\n                        _context2.next = 3;\n                        return state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\n\n                      case 3:\n                        proposalAddress = _context2.sent;\n                        return _context2.abrupt(\"return\", proposalAddress);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()).then(proposalAddress => {\n                //drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\n                return console.log(proposalAddress);\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n\n      return function fetchDetailsLink() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchDetailsLink();\n  }, []); // var state = drizzle.store.getState()\n  // const propGetter = async () => {\n  //   if (state.drizzleStatus.initialized) {\n  //       const dataKey = await drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${tokenId}`)\n  //       const proposalAddress = await state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\n  //       drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\n  //       return console.log(proposalAddress)\n  //     }\n  //     console.log('Loading...')\n  //   }\n  //   const delay = (ms) => new Promise(res => setTimeout(res, ms));\n  //delay(30).then(() => propGetter());\n\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-lg btn-block card-footer-btn\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Nominate Asset\"), __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Header, {\n    className: \"text-center justify-content-center\",\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Title, {\n    className: \"text-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Asset Price:\\xA0\", parcel.publication.price, \"\\xA0MANA\")), __jsx(Modal.Body, {\n    className: \"pt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(ProposalForm, {\n    assetPrice: parcel.publication.price,\n    props: props,\n    drizzle: drizzle,\n    drizzleState: drizzleState,\n    tokenId: tokenId,\n    userManaBalance: userManaBalance,\n    propAddress: propAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst mapStateToProps = state => ({\n  //tokenIdState: state.appReducers.tokenId,\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: result => dispatch({\n    type: \"TOKEN_ID_FETCH\",\n    tokenId: result\n  }),\n  //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\n  getCurrentProp: (result, drizzle, drizzleState) => dispatch({\n    type: \"GET_PROP_ADDRESS\",\n    tokenId: result,\n    drizzle: drizzle,\n    drizzleState: drizzleState\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal); //export default NominationModal;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/NominationModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","ProposalForm","NominationModal","parcel","props","userManaBalance","getTokenId","getCurrentProp","propAddress","drizzleState","drizzle","show","setShow","handleShow","handleClose","tokenId","setTokenId","loading","setLoading","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","contracts","ProposalController","methods","cacheCall","dataKey","state","store","getState","getPropTokenIdMap","value","proposalAddress","console","log","publication","price","mapStateToProps","appReducers","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\nimport ProposalForm from '../forms/ProposalForm';\r\n   \r\n\r\nconst NominationModal = ({ parcel, props, userManaBalance, getTokenId,  getCurrentProp, propAddress  }) => {\r\n\r\n  const {drizzleState, drizzle} = props;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n  const [tokenId, setTokenId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\r\n  //const [currentProp, setCurrentProp] = useState(null);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n      if(tokenId === null){\r\n        setLoading(true)\r\n      }\r\n      setLoading(false);\r\n      return tokenId;\r\n    })\r\n    .then(async (tokenId) => {  \r\n      \r\n      setTokenId(tokenId);\r\n      getTokenId(tokenId);\r\n      const dataKey = await drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${tokenId}`)\r\n      return dataKey\r\n    }) \r\n    .then(async (dataKey) => {  \r\n      var state = drizzle.store.getState()\r\n      const proposalAddress = await state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\r\n      return proposalAddress\r\n    }) \r\n    .then((proposalAddress) => {  \r\n      //drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\r\n      return console.log(proposalAddress)\r\n    }) \r\n    \r\n  };\r\nfetchDetailsLink();\r\n}, []);\r\n\r\n// var state = drizzle.store.getState()\r\n\r\n// const propGetter = async () => {\r\n//   if (state.drizzleStatus.initialized) {\r\n//       const dataKey = await drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${tokenId}`)\r\n//       const proposalAddress = await state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\r\n//       drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\r\n//       return console.log(proposalAddress)\r\n//     }\r\n//     console.log('Loading...')\r\n\r\n//   }\r\n//   const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n  //delay(30).then(() => propGetter());\r\n   \r\nreturn (   \r\n      <> \r\n        <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>Nominate Asset</button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">Asset Price:&nbsp;{parcel.publication.price}&nbsp;MANA</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body className=\"pt-1\">\r\n       \r\n          <ProposalForm                  \r\n                  assetPrice={parcel.publication.price}  \r\n                  props={props}\r\n                  drizzle={drizzle}\r\n                  drizzleState={drizzleState}\r\n                  tokenId={tokenId}\r\n                  userManaBalance={userManaBalance}\r\n                  propAddress={propAddress}\r\n            /> \r\n              {/* <NominationForm                   \r\n                drizzle={props.drizzle}\r\n                drizzleState={props.drizzleState}  \r\n                assetPrice={parcel.publication.price}  \r\n                props={props}\r\n                tokenId={tokenId}\r\n                userManaBalance={userManaBalance}\r\n                />  */}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n        );    \r\n      } \r\n        const mapStateToProps = (state) => ({\r\n          //tokenIdState: state.appReducers.tokenId,\r\n          propAddress: state.appReducers.propAddress,\r\n        })\r\n        \r\n        const mapDispatchToProps = (dispatch) => ({\r\n          getTokenId: (result) =>  dispatch({ type: \"TOKEN_ID_FETCH\", tokenId:result }),\r\n          //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\r\n          getCurrentProp: (result,drizzle,drizzleState) =>  dispatch({ type: \"GET_PROP_ADDRESS\", tokenId:result,drizzle:drizzle,drizzleState:drizzleState })\r\n        });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal);\r\n\r\n    //export default NominationModal;      "]},"metadata":{},"sourceType":"module"}