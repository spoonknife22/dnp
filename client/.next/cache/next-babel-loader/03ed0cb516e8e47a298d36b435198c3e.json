{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ContractManager from \"../artifacts/contracts/ContractManager.json\";\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\nimport UserController from \"../artifacts/contracts/UserController.json\";\nimport Web3 from 'web3'; //import getWeb3 from \"@drizzle-utils/get-web3\";\n\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst scum = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, chainId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return detectEthereumProvider();\n\n        case 2:\n          provider = _context.sent;\n\n          if (!provider) {\n            _context.next = 10;\n            break;\n          }\n\n          console.log('Ethereum successfully detected!'); // From now on, this should always be true:\n          // provider === window.ethereum\n          // Access the decentralized web!\n          // Legacy providers may only have ethereum.sendAsync\n\n          _context.next = 7;\n          return provider.request({\n            method: 'eth_chainId'\n          });\n\n        case 7:\n          chainId = _context.sent;\n          _context.next = 11;\n          break;\n\n        case 10:\n          // if the provider is not detected, detectEthereumProvider resolves to null\n          console.error('Please install MetaMask!', error);\n\n        case 11:\n          scum();\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function scum() {\n    return _ref.apply(this, arguments);\n  };\n}(); // const web3 = getWeb3();\n// const provider = new Web3.providers.HttpProvider(\n// \t'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03'\n// \t);\n\n\nconst drizzleOptions = {\n  web3: {\n    costumeProvider: scum // provider,\n    //block: false,\n    // fallback: {\n    //   type: 'wss',\n    //   //url: 'ws://127.0.0.1:7545',\n    //    url: 'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03',\n\n  },\n  //},\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\n  events: {\n    UserStorage: [\"UserCreated\"],\n    ProposalController: [\"AssetNomination\"]\n  },\n  polls: {\n    accounts: 1500\n  },\n  syncAlways: true\n};\nexport default drizzleOptions;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/drizzleOptions.js"],"names":["ContractManager","UserStorage","ProposalController","UserController","Web3","detectEthereumProvider","scum","provider","console","log","request","method","chainId","error","drizzleOptions","web3","costumeProvider","contracts","events","polls","accounts","syncAlways"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,6CAA5B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AAEA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,IAAI;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACUD,sBAAsB,EADhC;;AAAA;AACPE,UAAAA,QADO;;AAAA,eAGTA,QAHS;AAAA;AAAA;AAAA;;AAKXC,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EALW,CAOX;AACA;AAEA;AAEA;;AAZW;AAAA,iBAaWF,QAAQ,CAACG,OAAT,CAAiB;AACrCC,YAAAA,MAAM,EAAE;AAD6B,WAAjB,CAbX;;AAAA;AAaLC,UAAAA,OAbK;AAAA;AAAA;;AAAA;AAkBX;AACAJ,UAAAA,OAAO,CAACK,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;;AAnBW;AAqBbP,UAAAA,IAAI;;AArBS;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJA,IAAI;AAAA;AAAA;AAAA,GAAV,C,CAuBA;AACA;AACA;AACA;;;AAEA,MAAMQ,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE;AACRC,IAAAA,eAAe,EAACV,IADR,CAEJ;AACA;AACA;AACA;AACA;AACA;;AAPI,GADe;AAUrB;AACAW,EAAAA,SAAS,EAAE,CAAChB,WAAD,EAAcD,eAAd,EAA+BE,kBAA/B,EAAmDC,cAAnD,CAXU;AAarBe,EAAAA,MAAM,EAAE;AACNjB,IAAAA,WAAW,EAAE,CAAC,aAAD,CADP;AAENC,IAAAA,kBAAkB,EAAE,CAAC,iBAAD;AAFd,GAba;AAiBrBiB,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAjBc;AAqBrBC,EAAAA,UAAU,EAAC;AArBU,CAAvB;AAwBA,eAAeP,cAAf","sourcesContent":["import ContractManager from \"../artifacts/contracts/ContractManager.json\";\r\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\r\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\r\nimport UserController from \"../artifacts/contracts/UserController.json\";\r\nimport Web3 from 'web3';\r\n//import getWeb3 from \"@drizzle-utils/get-web3\";\r\n\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\n \r\nconst scum = async () => {\r\nconst provider = await detectEthereumProvider()\r\n \r\nif (provider) {\r\n \r\n  console.log('Ethereum successfully detected!')\r\n \r\n  // From now on, this should always be true:\r\n  // provider === window.ethereum\r\n \r\n  // Access the decentralized web!\r\n \r\n  // Legacy providers may only have ethereum.sendAsync\r\n  const chainId = await provider.request({\r\n    method: 'eth_chainId'\r\n  })\r\n} else {\r\n \r\n  // if the provider is not detected, detectEthereumProvider resolves to null\r\n  console.error('Please install MetaMask!', error)\r\n}\r\nscum();\r\n}\r\n// const web3 = getWeb3();\r\n// const provider = new Web3.providers.HttpProvider(\r\n// \t'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03'\r\n// \t);\r\n\r\nconst drizzleOptions = {\r\n  web3: {\r\ncostumeProvider:scum\r\n    // provider,\r\n    //block: false,\r\n    // fallback: {\r\n    //   type: 'wss',\r\n    //   //url: 'ws://127.0.0.1:7545',\r\n    //    url: 'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03',\r\n    },\r\n  //},\r\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\r\n\r\n  events: {\r\n    UserStorage: [\"UserCreated\"],\r\n    ProposalController: [\"AssetNomination\"]\r\n  },\r\n  polls: {\r\n    accounts: 1500,\r\n  },\r\n\r\n  syncAlways:true,\r\n};\r\n\r\nexport default drizzleOptions;\r\n"]},"metadata":{},"sourceType":"module"}