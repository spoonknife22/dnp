{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\NominationModal.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport ProposalForm from '../forms/ProposalForm';\nimport InitialContributeModal from '../modals/InitialContributeModal';\n\nconst NominationModal = ({\n  parcel,\n  props,\n  userManaBalance,\n  getTokenId,\n  tokenIdState,\n  propAddress\n}) => {\n  const drizzleState = props.drizzleState,\n        drizzle = props.drizzle;\n\n  const _useState = useState(false),\n        show = _useState[0],\n        setShow = _useState[1];\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false);\n\n  const _useState2 = useState(null),\n        tokenId = _useState2[0],\n        setTokenId = _useState2[1]; //const [loading, setLoading] = useState(true);\n  //const [dataKey, setDataKey] = useState(null);\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\n  //const [currentProp, setCurrentProp] = useState(null);\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var graphql, proxyUrl, targetUrl;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              graphql = JSON.stringify({\n                query: \"{ parcels(where: {x:\\\"\".concat(parcel.x, \"\\\",y:\\\"\").concat(parcel.y, \"\\\"}) { tokenId }}\")\n              });\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(proxyUrl + targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                const parcelData = result.data.parcels[0];\n                return parcelData;\n              }).then(result => {\n                const tokenId = result.tokenId;\n                setTokenId(tokenId); //getTokenId(tokenId)\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchDetailsLink() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchDetailsLink();\n  }, []);\n\n  if (propAddress === '0x0000000000000000000000000000000000000000') {\n    return __jsx(React.Fragment, null, __jsx(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-block card-footer-btn\",\n      onClick: handleShow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"Nominate Asset\"), __jsx(Modal, {\n      show: show,\n      onHide: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, __jsx(Modal.Header, {\n      className: \"text-center justify-content-center\",\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, __jsx(Modal.Title, {\n      className: \"text-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"Asset Price:\\xA0\", parcel.publication.price, \"\\xA0MANA\")), __jsx(Modal.Body, {\n      className: \"pt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, __jsx(ProposalForm, {\n      assetPrice: parcel.publication.price,\n      props: props,\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      tokenId: tokenId,\n      userManaBalance: userManaBalance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }))));\n  } else {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, __jsx(InitialContributeModal, {\n      propAddress: propAddress,\n      userManaBalance: userManaBalance,\n      assetPrice: parcel.publication.price,\n      drizzleState: drizzleState,\n      drizzle: drizzle,\n      tokenId: tokenId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }));\n  }\n};\n\nconst mapStateToProps = state => ({\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: tokenId => dispatch({\n    type: \"SET_TOKEN_ID\",\n    tokenId: tokenId\n  }) //sagaTest: (drizzle) => drizzle.store.dispatch({ type: 'TEST_SAGA' }),\n  //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\n  //getCurrentProp: (drizzle,dataKey) =>  dispatch({ type: \"GET_PROP_ADDRESS\",drizzle:drizzle,dataKey:dataKey })\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal); //export default NominationModal;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/NominationModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","ProposalForm","InitialContributeModal","NominationModal","parcel","props","userManaBalance","getTokenId","tokenIdState","propAddress","drizzleState","drizzle","show","setShow","handleShow","handleClose","tokenId","setTokenId","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","publication","price","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\nimport ProposalForm from '../forms/ProposalForm';\r\nimport InitialContributeModal from '../modals/InitialContributeModal';\r\n\r\nconst NominationModal = ({ parcel, props, userManaBalance, getTokenId, tokenIdState, propAddress  }) => {\r\n\r\n  const {drizzleState, drizzle} = props;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n  const [tokenId, setTokenId] = useState(null);\r\n  //const [loading, setLoading] = useState(true);\r\n  //const [dataKey, setDataKey] = useState(null);\r\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\r\n  //const [currentProp, setCurrentProp] = useState(null);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n     setTokenId(tokenId);\r\n      //getTokenId(tokenId)\r\n    })\r\n  };\r\nfetchDetailsLink();\r\n\r\n}, []);\r\n\r\nif(propAddress === '0x0000000000000000000000000000000000000000' ) {\r\nreturn (   \r\n      <> \r\n      <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>\r\n        Nominate Asset\r\n      </button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">Asset Price:&nbsp;{parcel.publication.price}&nbsp;MANA</Modal.Title>\r\n        </Modal.Header>\r\n          <Modal.Body className=\"pt-1\">\r\n          <ProposalForm                  \r\n            assetPrice={parcel.publication.price}  \r\n            props={props}\r\n            drizzle={drizzle}\r\n            drizzleState={drizzleState}\r\n            tokenId={tokenId}\r\n            userManaBalance={userManaBalance}\r\n            /> \r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n        );    \r\n}\r\n\r\n\r\n        else{\r\n     \r\n          return (\r\n        \r\n          <div>\r\n            <InitialContributeModal \r\n              propAddress={propAddress} \r\n              userManaBalance={userManaBalance}\r\n              assetPrice={parcel.publication.price}\r\n              drizzleState={drizzleState} \r\n              drizzle={drizzle} \r\n              tokenId={tokenId} \r\n           />\r\n          </div>\r\n          )\r\n        }\r\n      } \r\n        const mapStateToProps = (state) => ({\r\n          propAddress: state.appReducers.propAddress,\r\n        })\r\n        \r\n        const mapDispatchToProps = (dispatch) => ({\r\n          getTokenId: (tokenId) =>  dispatch({ type: \"SET_TOKEN_ID\", tokenId:tokenId }),\r\n          //sagaTest: (drizzle) => drizzle.store.dispatch({ type: 'TEST_SAGA' }),\r\n          //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\r\n          //getCurrentProp: (drizzle,dataKey) =>  dispatch({ type: \"GET_PROP_ADDRESS\",drizzle:drizzle,dataKey:dataKey })\r\n        });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal);\r\n\r\n    //export default NominationModal;      "]},"metadata":{},"sourceType":"module"}