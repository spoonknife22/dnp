{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const nowUnix = moment().valueOf();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    fetchParcels();\n  }, []);\n\n  const fetchParcels = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var proposalContract, deployedAddresses, i, j, expiredOrderIdArray, orderId, graphql, targetUrl;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController;\n\n          case 2:\n            proposalContract = _context2.sent;\n            _context2.next = 5;\n            return proposalContract.methods.getDeployedAddresses().call();\n\n          case 5:\n            deployedAddresses = _context2.sent;\n            expiredOrderIdArray = [];\n            orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1', '0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6', '0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\n\n            for (j = 0; j < orderId.length; j++) {\n              graphql = JSON.stringify({\n                query: \"{\\n              orders(where: {id:\\\"\".concat(orderId[j], \"\\\", status:cancelled, category:parcel }) {\\n                nft{\\n                  parcel{          \\n                          x,\\n                          y,\\n                          tokenId\\n                      }\\n                  activeOrder{\\n                      price\\n                      expiresAt\\n                      txHash\\n                      nftAddress\\n                  }\\n              }\\n              }\\n            }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        expiredOrderIdArray.push(result.data.orders);\n                        console.log(expiredOrderIdArray);\n                        setOrders(expiredOrderIdArray);\n                        setLoading(false);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n            } //}\n\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchParcels() {\n      return _ref.apply(this, arguments);\n    };\n  }(); //8V0Vnft>\n  //8V0Vnft>activeOrder\n  // Get current orders\n  //setTotalOrders(orders.length)\n\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // console.log(currentParcels)\n  // console.log(orders.lenght)\n  // console.log(orders)\n  // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  orders.map(parcel => console.log(parcel.nft));\n  return __jsx(React.Fragment, null, !orders ? 'loading' : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(NominatedCardsExpired, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominatedCardsExpired","props","userManaBalance","nowUnix","valueOf","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","expiredOrderIdArray","orderId","j","length","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","console","log","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber","map","parcel","nft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  \r\n  const nowUnix = moment().valueOf();\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n\r\n\r\n  \r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n  useEffect(() => {\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n    \r\n      //for (i = 0; i < deployedAddresses.length; i++) {\r\n        // const address = deployedAddresses[i];\r\n        // const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n      //const orderId = propData[3];\r\n\r\n        let j;\r\n        let expiredOrderIdArray = [];\r\n     \r\n        let orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1','0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6','0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\r\n       \r\n        for (j = 0; j < orderId.length; j++) {\r\n          const graphql = JSON.stringify({ query: \r\n            `{\r\n              orders(where: {id:\"${orderId[j]}\", status:cancelled, category:parcel }) {\r\n                nft{\r\n                  parcel{          \r\n                          x,\r\n                          y,\r\n                          tokenId\r\n                      }\r\n                  activeOrder{\r\n                      price\r\n                      expiresAt\r\n                      txHash\r\n                      nftAddress\r\n                  }\r\n              }\r\n              }\r\n            }`\r\n        })\r\n    \r\n        const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n        fetch(targetUrl, {\r\n          method: \"POST\",\r\n          headers:myHeaders,  \r\n          body:graphql, variables:{},\r\n          redirect: 'follow'\r\n        })\r\n          .then(res => res.json())\r\n          .then( async (result) => {\r\n            expiredOrderIdArray.push(result.data.orders);\r\n            console.log(expiredOrderIdArray)\r\n            setOrders(expiredOrderIdArray);\r\n           \r\n            setLoading(false); \r\n          },\r\n          (error) => {\r\n          return error;\r\n          }\r\n        ) \r\n      }\r\n    //}\r\n  }\r\n   \r\n//8V0Vnft>\r\n//8V0Vnft>activeOrder\r\n  // Get current orders\r\n  //setTotalOrders(orders.length)\r\n  \r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  // console.log(currentParcels)\r\n  // console.log(orders.lenght)\r\n  // console.log(orders)\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n  orders.map(parcel => (\r\n   console.log(parcel.nft)\r\n\r\n  ))\r\n  return (   \r\n    <>\r\n    {!orders  ? \r\n    \r\n      'loading'\r\n    : \r\n      <div>\r\n        {/* <Nominations \r\n          orders={currentParcels} \r\n          loading={loading} \r\n          props={props}   \r\n          userManaBalance={userManaBalance}\r\n        />\r\n        <Pagination\r\n          currentPage ={currentPage }\r\n          parcelsPerPage={parcelsPerPage}\r\n          totalParcels={totalOrders}\r\n          paginate={paginate}\r\n        /> */}\r\n      </div>\r\n      \r\n    }\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}