{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ContractManager from \"../artifacts/contracts/ContractManager.json\";\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\nimport UserController from \"../artifacts/contracts/UserController.json\";\nimport Web3 from 'web3';\nimport getWeb3 from \"@drizzle-utils/get-web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst crap = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, startApp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          startApp = function _startApp(provider) {\n            // If the provider returned by detectEthereumProvider is not the same as\n            // window.ethereum, something is overwriting it, perhaps another wallet.\n            if (provider !== window.ethereum) {\n              console.error('Do you have multiple wallets installed?');\n            } // Access the decentralized web!\n\n          };\n\n          _context.next = 3;\n          return detectEthereumProvider();\n\n        case 3:\n          provider = _context.sent;\n\n          if (provider) {\n            startApp(provider); // Initialize your app\n          } else {\n            console.log('Please install MetaMask!');\n          }\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function crap() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\ncrap();\nconst host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\nconst customProvider = new Web3.providers.HttpProvider(host); //const web3 = getWeb3({ customProvider });\n//console.log(web3)\n\nconst drizzleOptions = {\n  web3: {\n    customProvider: customProvider\n  },\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\n  events: {\n    UserStorage: [\"UserCreated\"],\n    ProposalController: [\"AssetNomination\"]\n  },\n  polls: {\n    accounts: 1500\n  },\n  syncAlways: true\n};\nexport default drizzleOptions;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/drizzleOptions.js"],"names":["ContractManager","UserStorage","ProposalController","UserController","Web3","getWeb3","detectEthereumProvider","crap","startApp","provider","window","ethereum","console","error","log","host","customProvider","providers","HttpProvider","drizzleOptions","web3","contracts","events","polls","accounts","syncAlways"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,6CAA5B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,IAAI;AAAA,sEAAG;AAAA,kBAUJC,QAVI;AAAA;AAAA;AAAA;AAUJA,UAAAA,QAVI,sBAUKC,QAVL,EAUe;AAC1B;AACA;AACA,gBAAIA,QAAQ,KAAKC,MAAM,CAACC,QAAxB,EAAkC;AAChCC,cAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACD,aALyB,CAM1B;;AACD,WAjBY;;AAAA;AAAA,iBAEUP,sBAAsB,EAFhC;;AAAA;AAEPG,UAAAA,QAFO;;AAIb,cAAIA,QAAJ,EAAc;AACZD,YAAAA,QAAQ,CAACC,QAAD,CAAR,CADY,CACQ;AACrB,WAFD,MAEO;AACLG,YAAAA,OAAO,CAACE,GAAR,CAAY,0BAAZ;AACD;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJP,IAAI;AAAA;AAAA;AAAA,GAAV;;AAmBAA,IAAI;AACJ,MAAMQ,IAAI,GAAG,+DAAb;AACA,MAAMC,cAAc,GAAG,IAAIZ,IAAI,CAACa,SAAL,CAAeC,YAAnB,CAAgCH,IAAhC,CAAvB,C,CACA;AACA;;AACA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE;AACJJ,IAAAA,cAAc,EAACA;AADX,GADe;AAKrBK,EAAAA,SAAS,EAAE,CAACpB,WAAD,EAAcD,eAAd,EAA+BE,kBAA/B,EAAmDC,cAAnD,CALU;AAOrBmB,EAAAA,MAAM,EAAE;AACNrB,IAAAA,WAAW,EAAE,CAAC,aAAD,CADP;AAENC,IAAAA,kBAAkB,EAAE,CAAC,iBAAD;AAFd,GAPa;AAWrBqB,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAXc;AAerBC,EAAAA,UAAU,EAAC;AAfU,CAAvB;AAkBA,eAAeN,cAAf","sourcesContent":["import ContractManager from \"../artifacts/contracts/ContractManager.json\";\r\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\r\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\r\nimport UserController from \"../artifacts/contracts/UserController.json\";\r\nimport Web3 from 'web3';\r\nimport getWeb3 from \"@drizzle-utils/get-web3\";\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst crap = async () => {\r\n// this returns the provider, or null if it wasn't detected\r\nconst provider = await detectEthereumProvider();\r\n\r\nif (provider) {\r\n  startApp(provider); // Initialize your app\r\n} else {\r\n  console.log('Please install MetaMask!');\r\n}\r\n\r\nfunction startApp(provider) {\r\n  // If the provider returned by detectEthereumProvider is not the same as\r\n  // window.ethereum, something is overwriting it, perhaps another wallet.\r\n  if (provider !== window.ethereum) {\r\n    console.error('Do you have multiple wallets installed?');\r\n  }\r\n  // Access the decentralized web!\r\n}\r\n}\r\ncrap();\r\nconst host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\r\nconst customProvider = new Web3.providers.HttpProvider(host);\r\n//const web3 = getWeb3({ customProvider });\r\n//console.log(web3)\r\nconst drizzleOptions = {\r\n  web3: {\r\n    customProvider:customProvider\r\n  },\r\n\r\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\r\n\r\n  events: {\r\n    UserStorage: [\"UserCreated\"],\r\n    ProposalController: [\"AssetNomination\"]\r\n  },\r\n  polls: {\r\n    accounts: 1500,\r\n  },\r\n\r\n  syncAlways:true,\r\n};\r\n\r\nexport default drizzleOptions;\r\n"]},"metadata":{},"sourceType":"module"}