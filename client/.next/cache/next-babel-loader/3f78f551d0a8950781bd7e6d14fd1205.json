{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\ContributeInnerModal.js\";\n\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useEffect, useState } from 'react';\nimport Web3 from \"web3\";\nimport ContributeForm from '../forms/ContributeForm';\nimport { Loader } from 'rimble-ui';\n\nconst ContributeInnnerModal = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee({\n    drizzleState,\n    drizzle,\n    propAddress,\n    tokenId,\n    assetPrice,\n    newAbi\n  }) {\n    var web3, proposalAddress, contractConfig, propBalance, proposalBalance, address;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          web3 = new Web3(Web3.givenProvider); // if(tokenId == null){\n          //   <div className=\"mx-auto\">   \n          //     <Loader color=\"#007bff\" size=\"40px\" />\n          //   </div>\n          // }\n          // if(tokenId) {\n          //   useEffect(() => {\n          //     fetchProposalAddress();\n          //   }, [tokenId]);\n          // }\n          //const fetchProposalAddress = async () => {\n\n          if (propAddress === 'undefined') {\n            __jsx(\"div\", {\n              className: \"mx-auto\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 9\n              }\n            }, __jsx(Loader, {\n              color: \"#007bff\",\n              size: \"40px\",\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 11\n              }\n            }));\n          }\n\n          if (!(propAddress === null && newAbi !== null)) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 5;\n          return drizzle.contracts.ProposalController.methods.getPropTokenIdMap(\"\".concat(tokenId)).call();\n\n        case 5:\n          proposalAddress = _context.sent;\n          contractConfig = {\n            contractName: \"ProposalStorage\",\n            web3Contract: new web3.eth.Contract(newAbi, \"\".concat(proposalAddress))\n          };\n\n          if (!drizzle.contracts['ProposalStorage']) {\n            drizzle.addContract(contractConfig);\n          }\n\n          if (!drizzle.contracts['ProposalStorage']) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.next = 11;\n          return drizzle.contracts.ProposalStorage.methods.getSummary(\"\".concat(tokenId)).call();\n\n        case 11:\n          propBalance = _context.sent;\n          _context.next = 14;\n          return propBalance.balance;\n\n        case 14:\n          proposalBalance = _context.sent;\n          drizzle.store.dispatch({\n            type: 'PROPOSAL_BALANCE',\n            balance: \"\".concat(proposalBalance)\n          });\n\n        case 16:\n          address = Number(propAddress);\n\n          if (!(isNaN(address) && newAbi !== null)) {\n            _context.next = 30;\n            break;\n          }\n\n          console.log(propAddress);\n          proposalAddress = \"\".concat(propAddress);\n          contractConfig = {\n            contractName: \"ProposalStorage\",\n            web3Contract: new web3.eth.Contract(newAbi, proposalAddress)\n          };\n\n          if (!drizzle.contracts['ProposalStorage']) {\n            drizzle.addContract(contractConfig);\n          }\n\n          if (!drizzle.contracts['ProposalStorage']) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 25;\n          return drizzle.contracts.ProposalStorage.methods.getSummary(\"\".concat(tokenId)).call();\n\n        case 25:\n          propBalance = _context.sent;\n          _context.next = 28;\n          return propBalance.balance;\n\n        case 28:\n          proposalBalance = _context.sent;\n          drizzle.store.dispatch({\n            type: 'PROPOSAL_BALANCE',\n            balance: \"\".concat(proposalBalance)\n          });\n\n        case 30:\n          return _context.abrupt(\"return\", __jsx(React.Fragment, null, __jsx(ContributeForm, {\n            drizzle: drizzle,\n            drizzleState: drizzleState,\n            assetPrice: assetPrice,\n            propAddress: propAddress,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 11\n            }\n          })));\n\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function ContributeInnnerModal(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default ContributeInnnerModal;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/ContributeInnerModal.js"],"names":["React","useEffect","useState","Web3","ContributeForm","Loader","ContributeInnnerModal","drizzleState","drizzle","propAddress","tokenId","assetPrice","newAbi","web3","givenProvider","contracts","ProposalController","methods","getPropTokenIdMap","call","proposalAddress","contractConfig","contractName","web3Contract","eth","Contract","addContract","ProposalStorage","getSummary","propBalance","balance","proposalBalance","store","dispatch","type","address","Number","isNaN","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Web3 from \"web3\";\r\nimport ContributeForm from '../forms/ContributeForm';\r\nimport { Loader } from 'rimble-ui';\r\n\r\nconst ContributeInnnerModal = async ({ drizzleState, drizzle, propAddress, tokenId, assetPrice, newAbi }) => {\r\n  let web3 = new Web3(Web3.givenProvider);\r\n\r\n  // if(tokenId == null){\r\n  //   <div className=\"mx-auto\">   \r\n  //     <Loader color=\"#007bff\" size=\"40px\" />\r\n  //   </div>\r\n  // }\r\n  // if(tokenId) {\r\n  //   useEffect(() => {\r\n  //     fetchProposalAddress();\r\n  //   }, [tokenId]);\r\n  // }\r\n\r\n  //const fetchProposalAddress = async () => {\r\n    if(propAddress === 'undefined') {\r\n        <div className=\"mx-auto\">   \r\n          <Loader color=\"#007bff\" size=\"40px\" />\r\n        </div>\r\n    }  \r\n  if(propAddress === null && newAbi !== null) {\r\n    const proposalAddress = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(`${tokenId}`).call(); \r\n    const contractConfig = {\r\n      contractName: \"ProposalStorage\",\r\n      web3Contract: new web3.eth.Contract(newAbi, `${proposalAddress}`)\r\n    }\r\n    if (!drizzle.contracts['ProposalStorage']) {\r\n      drizzle.addContract(contractConfig);\r\n      } \r\n    if(drizzle.contracts['ProposalStorage']){\r\n      const propBalance = await drizzle.contracts.ProposalStorage.methods.getSummary(`${tokenId}`).call();\r\n      const proposalBalance = await propBalance.balance;\r\n      drizzle.store.dispatch({ type:'PROPOSAL_BALANCE', balance:`${proposalBalance}` });\r\n      }\r\n    }\r\n    const address = Number(propAddress)\r\n    if(isNaN(address) && newAbi !== null){\r\n      console.log(propAddress)\r\n   \r\n      let proposalAddress = `${propAddress}`;\r\n      const contractConfig = {\r\n        contractName: \"ProposalStorage\",\r\n        web3Contract: new web3.eth.Contract(newAbi, proposalAddress)\r\n      };\r\n      if (!drizzle.contracts['ProposalStorage']) {\r\n        drizzle.addContract(contractConfig);\r\n      }\r\n      if(drizzle.contracts['ProposalStorage']){\r\n        const propBalance = await drizzle.contracts.ProposalStorage.methods.getSummary(`${tokenId}`).call();\r\n        const proposalBalance = await propBalance.balance;\r\n        drizzle.store.dispatch({ type:'PROPOSAL_BALANCE', balance:`${proposalBalance}` });\r\n      }\r\n    }\r\n//}\r\n  return ( \r\n        <>\r\n          <ContributeForm drizzle={drizzle} drizzleState={drizzleState} assetPrice={assetPrice} propAddress={propAddress} />\r\n        </>\r\n      );    \r\n    } \r\n\r\nexport default ContributeInnnerModal;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}