{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { eth, getInstance } from './provider';\nimport Web3 from \"web3\";\nimport TweetStorage from \"./artifacts/contracts/TweetStorage.json\";\nimport TweetController from \"./artifacts/contracts/TweetController.json\";\nimport { getUserInfo } from './users';\nexport var createTweet =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(text) {\n    var controller, addresses, _result, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getInstance(TweetController);\n\n          case 2:\n            controller = _context.sent;\n            _context.next = 5;\n            return ethereum.enable();\n\n          case 5:\n            _context.next = 7;\n            return eth.getAccounts();\n\n          case 7:\n            addresses = _context.sent;\n            _context.prev = 8;\n            _context.next = 11;\n            return controller.createTweet(1, text, {\n              from: addresses[0]\n            });\n\n          case 11:\n            _result = _context.sent;\n            return _context.abrupt(\"return\", _result);\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](8);\n            console.error(\"Err:\", _context.t0);\n\n          case 18:\n            _context.next = 20;\n            return controller.createTweet(text, {\n              from: addresses[0]\n            });\n\n          case 20:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 15]]);\n  }));\n\n  return function createTweet(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadTweetsFromTweetPromises =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(tweetPromises) {\n    var tweets, userPromises, users;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _Promise.all(tweetPromises);\n\n          case 2:\n            tweets = _context2.sent;\n            userPromises = tweets.map(function (tweet) {\n              var userId = tweet.userId;\n              return getUserInfo(userId);\n            });\n            _context2.next = 6;\n            return _Promise.all(userPromises);\n\n          case 6:\n            users = _context2.sent;\n            return _context2.abrupt(\"return\", tweets.map(function (tweet, index) {\n              return _objectSpread({\n                user: users[index]\n              }, tweet);\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadTweetsFromTweetPromises(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getTweetIdsFromUser =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(userId) {\n    var storage, tweetIds;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getInstance(TweetStorage);\n\n          case 2:\n            storage = _context3.sent;\n            _context3.next = 5;\n            return storage.getTweetIdsFromUser.call(userId);\n\n          case 5:\n            tweetIds = _context3.sent;\n            return _context3.abrupt(\"return\", tweetIds.map(function (tweetId) {\n              return _parseInt(tweetId);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getTweetIdsFromUser(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getTweetInfo =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(tweetId) {\n    var storage, tweet, id, text, userId, postedAt;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getInstance(TweetStorage);\n\n          case 2:\n            storage = _context4.sent;\n            _context4.next = 5;\n            return storage.tweets.call(tweetId);\n\n          case 5:\n            tweet = _context4.sent;\n            id = tweet.id, text = tweet.text, userId = tweet.userId, postedAt = tweet.postedAt; // Parse the data to make it look nice:\n\n            return _context4.abrupt(\"return\", {\n              id: _parseInt(id),\n              userId: _parseInt(userId),\n              text: text,\n              postedAt: _parseInt(postedAt)\n            });\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function getTweetInfo(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getLatestTweetIds =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5() {\n    var amount,\n        page,\n        storage,\n        numTweets,\n        tweetIdPromises,\n        lastIndex,\n        pageIndex,\n        startIndex,\n        maxIndex,\n        i,\n        tweetIds,\n        _args5 = arguments;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            amount = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : 5;\n            page = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : 1;\n            _context5.next = 4;\n            return getInstance(TweetStorage);\n\n          case 4:\n            storage = _context5.sent;\n            _context5.next = 7;\n            return storage.getNumTweets.call();\n\n          case 7:\n            numTweets = _context5.sent;\n            tweetIdPromises = [];\n            lastIndex = numTweets - 1; // Latest\n\n            pageIndex = page - 1;\n            startIndex = lastIndex - amount * pageIndex;\n            maxIndex = startIndex - amount;\n            i = startIndex;\n\n          case 14:\n            if (!(i > maxIndex)) {\n              _context5.next = 21;\n              break;\n            }\n\n            if (!(i < 0)) {\n              _context5.next = 17;\n              break;\n            }\n\n            return _context5.abrupt(\"break\", 21);\n\n          case 17:\n            tweetIdPromises.push(storage.tweetIds(i));\n\n          case 18:\n            i--;\n            _context5.next = 14;\n            break;\n\n          case 21:\n            _context5.next = 23;\n            return _Promise.all(tweetIdPromises);\n\n          case 23:\n            tweetIds = _context5.sent;\n            return _context5.abrupt(\"return\", tweetIds);\n\n          case 25:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getLatestTweetIds() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Samsung/code/tweether/client/web3/tweets.js"],"names":["eth","getInstance","Web3","TweetStorage","TweetController","getUserInfo","createTweet","text","controller","ethereum","enable","getAccounts","addresses","from","result","console","error","loadTweetsFromTweetPromises","tweetPromises","all","tweets","userPromises","map","tweet","userId","users","index","user","getTweetIdsFromUser","storage","call","tweetIds","tweetId","getTweetInfo","id","postedAt","getLatestTweetIds","amount","page","getNumTweets","numTweets","tweetIdPromises","lastIndex","pageIndex","startIndex","maxIndex","i","push"],"mappings":"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","sourcesContent":["import { eth, getInstance } from './provider'\r\nimport Web3 from \"web3\"\r\nimport TweetStorage from \"./artifacts/contracts/TweetStorage.json\"\r\nimport TweetController from \"./artifacts/contracts/TweetController.json\"\r\nimport { getUserInfo } from './users'\r\n\r\nexport const createTweet = async (text) => {\r\n  const controller = await getInstance(TweetController) \r\n  await ethereum.enable()\r\n  const addresses = await eth.getAccounts()\r\n  try {\r\n\r\n    // \"createTweet\" wants both the user ID and the text as params for now:\r\n    const result = await controller.createTweet(\r\n      1,\r\n      text,\r\n    {\r\n\r\n      from: addresses[0],\r\n    })\r\n\r\n    return result\r\n  } catch (err) {\r\n    console.error(\"Err:\", err)\r\n  }\r\n\r\n  const result = await controller.createTweet(text, {\r\n    from: addresses[0],\r\n  })\r\n\r\n  return result\r\n}\r\n\r\nexport const loadTweetsFromTweetPromises = async (tweetPromises) => {\r\n  const tweets = await Promise.all(tweetPromises)\r\n\r\n  const userPromises = tweets.map(tweet => {\r\n    const { userId } = tweet\r\n    return getUserInfo(userId)\r\n  })\r\n\r\n  const users = await Promise.all(userPromises)\r\n\r\n  return tweets.map((tweet, index) => {\r\n    return {\r\n      user: users[index],\r\n      ...tweet,\r\n    }\r\n  })\r\n}\r\n\r\nexport const getTweetIdsFromUser = async (userId) => {\r\n  const storage = await getInstance(TweetStorage)\r\n  const tweetIds = await storage.getTweetIdsFromUser.call(userId)\r\n\r\n  return tweetIds.map(tweetId => parseInt(tweetId))\r\n}\r\n\r\nexport const getTweetInfo = async (tweetId) => {\r\n  const storage = await getInstance(TweetStorage)\r\n  const tweet = await storage.tweets.call(tweetId)\r\n\r\n  const { id, text, userId, postedAt } = tweet\r\n\r\n  // Parse the data to make it look nice:\r\n  return {\r\n    id: parseInt(id),\r\n    userId: parseInt(userId),\r\n    text,\r\n    postedAt: parseInt(postedAt),\r\n  }\r\n}\r\n\r\nexport const getLatestTweetIds = async (amount = 5, page = 1) => {\r\n  const storage = await getInstance(TweetStorage)\r\n\r\n  const numTweets = await storage.getNumTweets.call()\r\n  const tweetIdPromises = []\r\n\r\n  const lastIndex = numTweets - 1 // Latest\r\n  const pageIndex = page - 1\r\n  const startIndex = lastIndex - (amount * pageIndex)\r\n  const maxIndex = startIndex - amount\r\n\r\n  for (let i = startIndex; i > maxIndex; i--) {\r\n    if (i < 0) break\r\n\r\n    tweetIdPromises.push(storage.tweetIds(i))\r\n  }\r\n\r\n  const tweetIds = await Promise.all(tweetIdPromises)\r\n\r\n  return tweetIds\r\n}"]},"metadata":{},"sourceType":"module"}