{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\forms\\\\InterMediateForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Loader } from 'rimble-ui';\n\nconst InterMediateForm = ({\n  drizzle,\n  drizzleState,\n  assetPrice,\n  propAddress,\n  tokenId\n}) => {\n  _s();\n\n  const contract = drizzle.contracts[\"\".concat(propAddress)];\n\n  const _useState = useState(null),\n        status = _useState[0],\n        setProposalSatus = _useState[1];\n\n  useEffect(() => {\n    fetchProposalStatus();\n  }, [propAddress]);\n\n  const fetchProposalStatus = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var dataKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            dataKey = contract.methods['proposals'].cacheCall(tokenId);\n            setProposalSatus(dataKey);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function fetchProposalStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const propContracts = drizzleState.contracts[\"\".concat(propAddress)];\n\n  if (propContracts.proposals[status]) {\n    const displayData = propContracts.proposals[status];\n    const proposalStatus = displayData && displayData.value.status;\n\n    switch (proposalStatus) {\n      case 0:\n        return __jsx(ContributeForm, {\n          drizzle: drizzle,\n          drizzleState: drizzleState,\n          assetPrice: assetPrice,\n          propAddress: propAddress,\n          tokenId: tokenId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }\n        });\n\n      case 1:\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"modal-footer text-deposit-complete justify-content-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 11\n          }\n        }, \"'for sale'\"));\n\n      case 'error':\n        return 'error';\n\n      default:\n        return null;\n    }\n  } else {\n    return null;\n  }\n};\n\n_s(InterMediateForm, \"kvhfV4tw9oT24lQeqFQDdC6JKT0=\");\n\n_c = InterMediateForm;\nexport default InterMediateForm; // class InterMediateForm extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       dataKey:null\n//     }\n//   }\n//   componentDidMount() {\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\n//     const contract = drizzle.contracts[`${propAddress}`];\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\n//         this.setState({\n//           dataKey\n//         });\n//   }\n//  async componentDidMount() {   \n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\n//     //let state = drizzle.store.getState();\n//     if (drizzleState.drizzleStatus.initialized && propAddress ) {\n//     const contract =  await drizzle.contracts[`${propAddress}`];\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\n//     this.setState({\n//       dataKey\n//     });\n//     const propContracts = drizzleState.contracts[`${propAddress}`];\n//     const displayData = propContracts.proposals[this.state.dataKey]; \n//     const proposalStatus =  displayData && displayData.value.status;\n//     console.log(proposalStatus)\n//    }\n//   // else{\n//   //   console.log('loading')\n//   // }\n//   return \"Loading...\";\n//   }\n// render() {\n//   const { drizzle, propAddress } = this.props;\n//   const contract = this.props.drizzleState.contracts[`${propAddress}`];\n//   console.log(this.props.drizzle.contracts)\n// let state = drizzle.store.getState();\n// if (state.drizzleStatus.initialized) {\n//   const propContract = state.contracts[`${propAddress}`];\n// const displayData = propContract.methods['getSummary'][this.state.dataKey]; \n// const userId =  displayData && displayData.value;\n// console.log(userId)\n//}\n// console.log(this.state.dataKey)\n//     const displayData = contract.proposals[this.state.dataKey]; \n//     const userId =  displayData && displayData.value;\n//     return (\n//      <div>\n//        'dddd'{useId}\n//      </div>\n//     )\n//   }\n// }   \n// const mapStateToProps = (state) => ({\n//   proposalStorage: state.appReducers.proposalStorage\n// })\n// const mapDispatchToProps = (dispatch) => ({\n//   getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"InterMediateForm\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/forms/InterMediateForm.js"],"names":["React","useEffect","useState","connect","Loader","InterMediateForm","drizzle","drizzleState","assetPrice","propAddress","tokenId","contract","contracts","status","setProposalSatus","fetchProposalStatus","dataKey","methods","cacheCall","propContracts","proposals","displayData","proposalStatus","value"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA,UAAzB;AAAqCC,EAAAA,WAArC;AAAkDC,EAAAA;AAAlD,CAAD,KAAiE;AAAA;;AACxF,QAAMC,QAAQ,GAAGL,OAAO,CAACM,SAAR,WAAqBH,WAArB,EAAjB;;AADwF,oBAErDP,QAAQ,CAAC,IAAD,CAF6C;AAAA,QAEjFW,MAFiF;AAAA,QAEzEC,gBAFyE;;AAKtFb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACN,WAAD,CAFM,CAAT;;AAIA,QAAMM,mBAAmB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,OADoB,GACVL,QAAQ,CAACM,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCR,OAAxC,CADU;AAE1BI,YAAAA,gBAAgB,CAACE,OAAD,CAAhB;;AAF0B;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBD,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAKA,QAAMI,aAAa,GAAGZ,YAAY,CAACK,SAAb,WAA0BH,WAA1B,EAAtB;;AAEA,MAAGU,aAAa,CAACC,SAAd,CAAwBP,MAAxB,CAAH,EAAoC;AACpC,UAAMQ,WAAW,GAAGF,aAAa,CAACC,SAAd,CAAwBP,MAAxB,CAApB;AACA,UAAMS,cAAc,GAAID,WAAW,IAAIA,WAAW,CAACE,KAAZ,CAAkBV,MAAzD;;AACA,YAAQS,cAAR;AACE,WAAK,CAAL;AACE,eACE,MAAC,cAAD;AAAgB,UAAA,OAAO,EAAEhB,OAAzB;AAAkC,UAAA,YAAY,EAAEC,YAAhD;AAA8D,UAAA,UAAU,EAAEC,UAA1E;AAAsF,UAAA,WAAW,EAAEC,WAAnG;AAAgH,UAAA,OAAO,EAAEC,OAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAGF,WAAK,CAAL;AACE,eACE,4BACA;AAAK,UAAA,SAAS,EAAC,2DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,CADF;;AAOF,WAAK,OAAL;AACE,eAAM,OAAN;;AACF;AACE,eAAO,IAAP;AAhBJ;AAkBD,GArBC,MAsBG;AACH,WAAO,IAAP;AACD;AAKF,CA7CD;;GAAML,gB;;KAAAA,gB;AA+CN,eAAeA,gBAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Loader } from 'rimble-ui';\r\n\r\nconst InterMediateForm = ({ drizzle, drizzleState, assetPrice, propAddress, tokenId }) => {     \r\n  const contract = drizzle.contracts[`${propAddress}`];\r\n  const [status, setProposalSatus] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n      fetchProposalStatus();\r\n    }, [propAddress])\r\n\r\n    const fetchProposalStatus = async () => { \r\n      const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n      setProposalSatus(dataKey);\r\n    }\r\n\r\n    const propContracts = drizzleState.contracts[`${propAddress}`];\r\n\r\n    if(propContracts.proposals[status]) {\r\n    const displayData = propContracts.proposals[status]; \r\n    const proposalStatus =  displayData && displayData.value.status;\r\n    switch (proposalStatus) {\r\n      case 0:\r\n        return (\r\n          <ContributeForm drizzle={drizzle} drizzleState={drizzleState} assetPrice={assetPrice} propAddress={propAddress} tokenId={tokenId} />\r\n        )\r\n      case 1:\r\n        return  (\r\n          <>\r\n          <div className=\"modal-footer text-deposit-complete justify-content-center\">\r\n          'for sale'\r\n          </div>\r\n          </>\r\n        )\r\n      case 'error':\r\n        return'error'\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n\r\n \r\n\r\n\r\n}\r\n\r\nexport default InterMediateForm;   \r\n// class InterMediateForm extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       dataKey:null\r\n//     }\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n//     const contract = drizzle.contracts[`${propAddress}`];\r\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n//         this.setState({\r\n//           dataKey\r\n//         });\r\n//   }\r\n//  async componentDidMount() {   \r\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n//     //let state = drizzle.store.getState();\r\n//     if (drizzleState.drizzleStatus.initialized && propAddress ) {\r\n//     const contract =  await drizzle.contracts[`${propAddress}`];\r\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n//     this.setState({\r\n//       dataKey\r\n//     });\r\n//     const propContracts = drizzleState.contracts[`${propAddress}`];\r\n//     const displayData = propContracts.proposals[this.state.dataKey]; \r\n//     const proposalStatus =  displayData && displayData.value.status;\r\n//     console.log(proposalStatus)\r\n//    }\r\n//   // else{\r\n//   //   console.log('loading')\r\n//   // }\r\n//   return \"Loading...\";\r\n//   }\r\n  \r\n  // render() {\r\n  //   const { drizzle, propAddress } = this.props;\r\n  //   const contract = this.props.drizzleState.contracts[`${propAddress}`];\r\n  //   console.log(this.props.drizzle.contracts)\r\n    // let state = drizzle.store.getState();\r\n    // if (state.drizzleStatus.initialized) {\r\n    //   const propContract = state.contracts[`${propAddress}`];\r\n    // const displayData = propContract.methods['getSummary'][this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n    // console.log(userId)\r\n    //}\r\n    // console.log(this.state.dataKey)\r\n    \r\n//     const displayData = contract.proposals[this.state.dataKey]; \r\n//     const userId =  displayData && displayData.value;\r\n//     return (\r\n//      <div>\r\n//        'dddd'{useId}\r\n//      </div>\r\n//     )\r\n//   }\r\n// }   \r\n\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   proposalStorage: state.appReducers.proposalStorage\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}