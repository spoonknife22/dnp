{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(testSaga),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nconst NOM_TX_PROCESSING = 'NOM_TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\nconst TESTED_SAGA = 'TESTED_SAGA';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\nconst initialState = {\n  transactionProcessing: false,\n  txSuccessful: false,\n  tokenId: null,\n  drizzle: null,\n  drizzleContracts: null,\n  propAddress: 1\n};\nexport function appReducer(state = initialState, action) {\n  switch (action.type) {\n    case TESTED_SAGA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        testedSaga: true\n      });\n\n    case TX_BROADCASTED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactionProcessing: true\n      });\n\n    case TX_SUCCESSFUL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txSuccessful: true,\n        transactionProcessing: false\n      });\n\n    case TX_PROCESSING_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: false,\n        checkingTx: false,\n        transactionProcessing: false,\n        txSuccessful: true\n      });\n\n    case TOKEN_ID_FETCHED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenId: action.tokenId\n      });\n\n    case SET_DRIZZLE_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        drizzle: action.drizzle\n      });\n\n    case GOT_PROP_ADDRESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        propAddress: action.propAddress\n      });\n\n    default:\n      return state;\n  }\n} //export default appReducer;\n\nfunction testSaga() {\n  return regeneratorRuntime.wrap(function testSaga$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        console.log('Yes!');\n\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr(action) {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GET_PROP_ADDRESS',\n          propAddress: 33\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nexport function appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeEvery(TEST_SAGA, testSaga);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/reducers/appReducers.js"],"names":["testSaga","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","NOM_TX_PROCESSING","TX_PROCESSING_DONE","TOKEN_ID_FETCHED","TX_SUCCESSFUL","TX_BROADCASTED","SET_DRIZZLE_STATE","GOT_PROP_ADDRESS","TESTED_SAGA","GET_PROP_ADDRESS","TEST_SAGA","initialState","transactionProcessing","txSuccessful","tokenId","drizzle","drizzleContracts","propAddress","appReducer","state","action","type","testedSaga","checkMetaMask","checkingTx","console","log"],"mappings":"mDA+CUA,Q;oDAIAC,a;oDAIOC,W;;;;;;;;AAvDjB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,gBAAgB,EAAC,IALE;AAMnBC,EAAAA,WAAW,EAAC;AANO,CAArB;AASA,OAAO,SAASC,UAAT,CAAoBC,KAAK,GAAGR,YAA5B,EAA0CS,MAA1C,EAAkD;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,WAAL;AACE,6CAAYW,KAAZ;AAAmBG,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKjB,cAAL;AACE,6CAAYc,KAAZ;AAAmBP,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKR,aAAL;AACE,6CAAYe,KAAZ;AAAoBN,QAAAA,YAAY,EAAE,IAAlC;AAAwCD,QAAAA,qBAAqB,EAAE;AAA/D;;AACF,SAAKV,kBAAL;AACE,6CAAYiB,KAAZ;AAAmBI,QAAAA,aAAa,EAAE,KAAlC;AAAyCC,QAAAA,UAAU,EAAE,KAArD;AAA2DZ,QAAAA,qBAAqB,EAAE,KAAlF;AAAyFC,QAAAA,YAAY,EAAE;AAAvG;;AACF,SAAKV,gBAAL;AACI,6CAAYgB,KAAZ;AAAmBL,QAAAA,OAAO,EAACM,MAAM,CAACN;AAAlC;;AACJ,SAAKR,iBAAL;AACI,6CAAYa,KAAZ;AAAmBJ,QAAAA,OAAO,EAAEK,MAAM,CAACL;AAAnC;;AACJ,SAAKR,gBAAL;AACI,6CAAYY,KAAZ;AAAmBF,QAAAA,WAAW,EAACG,MAAM,CAACH;AAAtC;;AACJ;AACE,aAAOE,KAAP;AAhBJ;AAkBD,C,CAGH;;AAGA,SAAU9B,QAAV;AAAA;AAAA;AAAA;AACEoC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUpC,aAAV,CAAyB8B,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMzB,GAAG,CAAC;AAAE0B,UAAAA,IAAI,EAAE,kBAAR;AAA4BJ,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,OAAO,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AACL,eAAMS,SAAS,CAACS,gBAAD,EAAmBnB,aAAnB,CAAf;;AADK;AAAA;AAEL,eAAMU,SAAS,CAACU,SAAD,EAAYrB,QAAZ,CAAf;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n\r\nconst NOM_TX_PROCESSING = 'NOM_TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";  \r\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\r\nconst TESTED_SAGA = 'TESTED_SAGA';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  txSuccessful: false, \r\n  tokenId: null,\r\n  drizzle: null,\r\n  drizzleContracts:null,\r\n  propAddress:1\r\n};   \r\n \r\nexport function appReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case TESTED_SAGA:\r\n        return { ...state, testedSaga: true };\r\n      case TX_BROADCASTED:\r\n        return { ...state, transactionProcessing: true };\r\n      case TX_SUCCESSFUL:\r\n        return { ...state,  txSuccessful: true, transactionProcessing: false };\r\n      case TX_PROCESSING_DONE:\r\n        return { ...state, checkMetaMask: false, checkingTx: false,transactionProcessing: false, txSuccessful: true };\r\n      case TOKEN_ID_FETCHED:\r\n          return { ...state, tokenId:action.tokenId};\r\n      case SET_DRIZZLE_STATE:\r\n          return { ...state, drizzle: action.drizzle };\r\n      case GOT_PROP_ADDRESS:\r\n          return { ...state, propAddress:action.propAddress};    \r\n      default:\r\n        return state;\r\n    }\r\n  }   \r\n\r\n\r\n//export default appReducer;\r\n\r\n\r\nfunction* testSaga () {\r\n  console.log('Yes!');\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type: 'GET_PROP_ADDRESS', propAddress:33});\r\n}\r\n\r\nexport function* appRootSaga () {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n  yield takeEvery(TEST_SAGA, testSaga)\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}