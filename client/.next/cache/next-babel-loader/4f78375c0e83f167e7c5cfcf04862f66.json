{"ast":null,"code":"import { EventActions, drizzleSagas } from \"@drizzle/store\";\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst TX_SUCCESSFUL_UPDATE_UI = 'TX_SUCCESSFUL_UPDATE_UI'; // export const joinTransactionSaga = store => next => action => {\n//   if (action.type === 'TX_SUCCESSFUL') {\n//     const transactionHash = action.txHash\n//     const transactionNumber = `${transactionHash}`\n//     toast.success(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT })\n//   }\n//   return next(action)\n// }\n\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = `${message}`;\n      toast.success(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n} // const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL'\n  });\n  yield put({\n    type: TX_SUCCESSFUL_UPDATE_UI\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful); // yield all(\n  //  drizzleSagas.map(saga => fork(saga))\n  // );\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","TX_DONE","TX_PROCESSING","TX_SUCCESSFUL_UPDATE_UI","contractEventSaga","lastSeenEventId","store","next","action","type","EVENT_FIRED","event","id","message","returnValues","_message","display","success","position","POSITION","TOP_RIGHT","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,uBAAuB,GAAG,yBAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,iBAAiB,GAAGC,eAAe,IAAIC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBnB,YAAY,CAACoB,WAAjC,EAA8C;AAC5C,QAAIF,MAAM,CAACG,KAAP,CAAaC,EAAb,KAAoBP,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGG,MAAM,CAACG,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGL,MAAM,CAACG,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,GAAI,GAAEH,OAAQ,EAA3B;AACAb,MAAAA,KAAK,CAACiB,OAAN,CAAcD,OAAd,EAAuB;AAAEE,QAAAA,QAAQ,EAAElB,KAAK,CAACmB,QAAN,CAAeC;AAA3B,OAAvB;AACF;AACF;;AACD,SAAOb,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;;AAaP,UAAUa,mBAAV,GAAgC;AAC9B,QAAM1B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUa,cAAV,GAA2B;AACzB,QAAM3B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUc,iBAAV,GAA8B;AAC5B,QAAM5B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUe,gBAAV,GAA6B;AAC3B,QAAM7B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAT;AACA,C,CAEF;AACA;;;AAEA,UAAUuB,YAAV,GAAyB;AACvB,QAAM9B,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMd,GAAG,CAAC;AAAEc,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAUuB,WAAV,GAAwB;AACtB,QAAMhC,UAAU,CAAC,iBAAD,EAAoB2B,mBAApB,CAAhB;AACA,QAAM3B,UAAU,CAAC,UAAD,EAAa4B,cAAb,CAAhB;AACA,QAAM5B,UAAU,CAAC,gBAAD,EAAmB8B,gBAAnB,CAAhB;AACA,QAAM9B,UAAU,CAAC,eAAD,EAAkB+B,YAAlB,CAAhB,CAJsB,CAKtB;AACA;AACA;AACD;;AAED,OAAO,MAAME,QAAQ,GAAG,CAACD,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions, drizzleSagas } from \"@drizzle/store\";\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\nconst TX_SUCCESSFUL_UPDATE_UI = 'TX_SUCCESSFUL_UPDATE_UI'\r\n \r\n// export const joinTransactionSaga = store => next => action => {\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//     const transactionHash = action.txHash\r\n//     const transactionNumber = `${transactionHash}`\r\n//     toast.success(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT })\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.success(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_SUCCESSFUL'});\r\n  yield put({ type: TX_SUCCESSFUL_UPDATE_UI});\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction* appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  // yield all(\r\n  //  drizzleSagas.map(saga => fork(saga))\r\n  // );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}