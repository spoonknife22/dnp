{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\NominationDetailsLink.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { Button } from \"shards-react\";\n\nconst NominationDetailsLink = ({\n  parcel,\n  getTokenId,\n  tokenIdState,\n  txSuccessful\n}) => {\n  useEffect(() => {\n    const fetchTokenId = () => {\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      const {\n        0: tokenId,\n        1: setTokenId\n      } = useState(); //const [loading, setLoading] = useState(false);\n\n      const graphql = JSON.stringify({\n        query: `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\n      });\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n      fetch(proxyUrl + targetUrl, {\n        method: \"POST\",\n        headers: myHeaders,\n        body: graphql,\n        variables: {},\n        redirect: 'follow'\n      }).then(res => res.json()).then(result => {\n        const parcelData = result.data.parcels[0];\n        const gotTokenId = parcelData.tokenId;\n        setTokenId(gotTokenId);\n        {\n          console.log(tokenId);\n        }\n      });\n      fetchTokenId(); //getTokenId()\n    };\n  });\n  return __jsx(Accordion, {\n    defaultActiveKey: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Accordion.Toggle, {\n    as: Button,\n    variant: \"link\",\n    eventKey: \"0\",\n    outline: true,\n    theme: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Asset Details\")), __jsx(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mt-3 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: getTokenId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }\n  }, \"Token\")), __jsx(\"a\", {\n    href: `https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/`,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Decentraland\"))))));\n};\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.tokenId,\n  txSuccessful: state.txSuccessful\n}); //const getTokenId = () => ({ type: \"TOKEN_ID_FETCHING\", tokenId:11 });\n\n\nconst getTokenId = () => ({\n  type: \"TOKEN_ID_FETCH\"\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: () => dispatch(getTokenId())\n}); // const getTokenId = () => ({ type: \"GET_TOKEN_ID\" });\n// const mapDispatchToProps = (dispatch) => ({\n//   getTokenId: () => dispatch(getTokenId()),\n// });\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/NominationDetailsLink.js"],"names":["React","useState","useEffect","connect","Accordion","Button","NominationDetailsLink","parcel","getTokenId","tokenIdState","txSuccessful","fetchTokenId","myHeaders","Headers","append","tokenId","setTokenId","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","gotTokenId","console","log","mapStateToProps","state","type","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { Button } from \"shards-react\";\r\n\r\nconst NominationDetailsLink = ({ parcel, getTokenId, tokenIdState, txSuccessful }) => { \r\n\r\n  useEffect(() => {\r\n\r\n    const fetchTokenId = () => {\r\n    const myHeaders = new Headers();  \r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    \r\n    const [tokenId, setTokenId] = useState();\r\n    //const [loading, setLoading] = useState(false);\r\n    \r\n    const graphql= JSON.stringify({ query: \r\n    `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n    })\r\n    \r\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n    \r\n    fetch(proxyUrl + targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          const parcelData = result.data.parcels[0];\r\n          const gotTokenId = parcelData.tokenId;\r\n          setTokenId(gotTokenId);\r\n          {console.log(tokenId)}\r\n      });\r\n      fetchTokenId();\r\n  //getTokenId()\r\n}\r\n});\r\n\r\nreturn (\r\n    <Accordion defaultActiveKey=\"1\">\r\n      <div> \r\n        <Accordion.Toggle as={Button}  variant=\"link\" eventKey=\"0\" outline theme=\"light\">\r\n        <div>Asset Details</div>\r\n        </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <div className=\"p-3 mt-3 border rounded\">\r\n              <div>\r\n              <div>\r\n                  <Button onClick={getTokenId}>Token</Button>\r\n              </div>\r\n                <a href={`https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/`}  target=\"_blank\">Decentraland</a>\r\n              </div>\r\n            </div>\r\n          </Accordion.Collapse>\r\n      </div> \r\n    </Accordion>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tokenIdState: state.tokenId,\r\n  txSuccessful: state.txSuccessful,\r\n})\r\n\r\n//const getTokenId = () => ({ type: \"TOKEN_ID_FETCHING\", tokenId:11 });\r\n\r\n\r\n\r\nconst getTokenId = () => ({ type: \"TOKEN_ID_FETCH\" });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTokenId: () =>  dispatch(getTokenId())\r\n});\r\n\r\n// const getTokenId = () => ({ type: \"GET_TOKEN_ID\" });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   getTokenId: () => dispatch(getTokenId()),\r\n// });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);\r\n\r\n"]},"metadata":{},"sourceType":"module"}