{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useState } from 'react'; // import Web3 from \"web3\";\n\nimport { Loader } from 'rimble-ui'; // import Accordion from 'react-bootstrap/Accordion';\n// import { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row, Progress } from \"shards-react\";\n// import NominationModal from '../modals/NominationModal';\n\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations'; // import Pagination from 'react-bootstrap/Pagination';\n// import PageItem from 'react-bootstrap/PageItem';\n\nexport default class AvailableAssetCard extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleModal\", () => {\n      const {\n        show\n      } = this.state;\n      this.setState({\n        show: !show\n      });\n    });\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      contribAmount: 0,\n      assetData: [],\n      toggleModal: false,\n      show: false,\n      activePage: 1\n    };\n  }\n\n  componentDidMount() {\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = 'https://api.opensea.io/api/v1/assets?asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&order_by=visitor_count&order_direction=desc&on_sale=true&offset=0&limit=20';\n    fetch(proxyUrl + targetUrl, {\n      header: 'x-api-key:2f2a0900458f4bdfbb489680a58e7526'\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        assets: result.assets,\n        currentPage: 1,\n        postsPerPage: 6,\n        totalPosts: result.assets.length // itemsArray: result.assets.map((assetDat) => {Object.values(assetDat)})\n        //itemsArray: Object.values(result.assets)\n\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.drizzleState.dappReducer.transactionProcessing !== this.props.drizzleState.dappReducer.transactionProcessing) {\n      this.setState({\n        show: this.props.drizzleState.dappReducer.transactionProcessing\n      });\n    }\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      assets,\n      currentPage,\n      postsPerPage,\n      totalPosts\n    } = this.state;\n\n    if (error) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 12\n        }\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return __jsx(Loader, {\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 12\n        }\n      });\n    } else {\n      //Get Current Posts   \n      const indexOfLastPost = currentPage * postsPerPage;\n      const indexOfFirstPost = indexOfLastPost - postsPerPage;\n      const currentPosts = assets.slice(indexOfFirstPost, indexOfLastPost); //Change Page\n\n      const paginate = pageNumber => setCurrentPage(pageNumber);\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, __jsx(Nominations, {\n        assets: currentPosts,\n        loading: isLoaded,\n        toggleModal: toggleModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }), __jsx(Pagination, {\n        postPerPage: postsPerPage,\n        totalPosts: this.state.totalPosts,\n        paginate: paginate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }), \"FFFFFFFFFF\");\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","Component","useState","Loader","Pagination","Nominations","AvailableAssetCard","constructor","props","show","state","setState","error","isLoaded","contribAmount","assetData","toggleModal","activePage","componentDidMount","proxyUrl","targetUrl","fetch","header","then","res","json","result","assets","currentPage","postsPerPage","totalPosts","length","componentDidUpdate","prevProps","drizzleState","dappReducer","transactionProcessing","render","message","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","setCurrentPage"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\r\n// import Web3 from \"web3\";\r\nimport { Loader } from 'rimble-ui';\r\n// import Accordion from 'react-bootstrap/Accordion';\r\n// import { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row, Progress } from \"shards-react\";\r\n// import NominationModal from '../modals/NominationModal';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n// import Pagination from 'react-bootstrap/Pagination';\r\n// import PageItem from 'react-bootstrap/PageItem';\r\n\r\n\r\n\r\n\r\nexport default class AvailableAssetCard extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      error:null,\r\n      isLoaded:false,\r\n      contribAmount:0,\r\n      assetData: [],\r\n      toggleModal: false,\r\n      show:false,\r\n      activePage:1\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    targetUrl = 'https://api.opensea.io/api/v1/assets?asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&order_by=visitor_count&order_direction=desc&on_sale=true&offset=0&limit=20'\r\n    fetch(proxyUrl + targetUrl,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            assets: result.assets,\r\n            currentPage: 1,\r\n            postsPerPage: 6,            \r\n            totalPosts:result.assets.length\r\n            // itemsArray: result.assets.map((assetDat) => {Object.values(assetDat)})\r\n            //itemsArray: Object.values(result.assets)\r\n          });\r\n          \r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )    \r\n  }\r\n\r\n\r\n  toggleModal = () => {\r\n    const { show } = this.state\r\n    this.setState({\r\n      show: !show,\r\n    });\r\n  }\r\n\r\n  \r\ncomponentDidUpdate(prevProps) {\r\n  if (prevProps.drizzleState.dappReducer.transactionProcessing !== this.props.drizzleState.dappReducer.transactionProcessing) {\r\n      this.setState({\r\n        show: this.props.drizzleState.dappReducer.transactionProcessing,\r\n      });\r\n  }\r\n}\r\n\r\n\r\n  render() {\r\n\r\n  const { error, isLoaded, assets, currentPage, postsPerPage, totalPosts } = this.state;\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <Loader color=\"white\" />\r\n  } else {\r\n\r\n  //Get Current Posts   \r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = assets.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  //Change Page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n    \r\n      return (\r\n        <div>\r\n        <Nominations  assets={currentPosts} loading={isLoaded} toggleModal={toggleModal} />\r\n        \r\n        <Pagination postPerPage={postsPerPage} totalPosts={this.state.totalPosts} paginate={paginate} />FFFFFFFFFF\r\n        </div>\r\n      );\r\n     \r\n    }\r\n  }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}