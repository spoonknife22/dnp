{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport ExpiredNominations from '../ExpiredNominations';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const nowUnix = moment().valueOf();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    fetchParcels();\n  }, []);\n\n  const fetchParcels = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var proposalContract, deployedAddresses, i, orderIdsArray, address, propData, j, expiredOrdersArray, orderId, graphql, targetUrl;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController;\n\n          case 2:\n            proposalContract = _context2.sent;\n            _context2.next = 5;\n            return proposalContract.methods.getDeployedAddresses().call();\n\n          case 5:\n            deployedAddresses = _context2.sent;\n            orderIdsArray = [];\n            i = 0;\n\n          case 8:\n            if (!(i < deployedAddresses.length)) {\n              _context2.next = 17;\n              break;\n            }\n\n            address = deployedAddresses[i];\n            _context2.next = 12;\n            return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n          case 12:\n            propData = _context2.sent;\n            orderIdsArray.push(propData[2]);\n\n          case 14:\n            i++;\n            _context2.next = 8;\n            break;\n\n          case 17:\n            expiredOrdersArray = [];\n            orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1', '0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6', '0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\n\n            for (j = 0; j < orderId.length; j++) {\n              graphql = JSON.stringify({\n                query: \"{\\n              orders(where: {id:\\\"\".concat(orderId[j], \"\\\", status:cancelled, category:parcel }) {\\n                nft{\\n                  parcel{          \\n                          x,\\n                          y,\\n                          tokenId\\n                      }\\n                  activeOrder{\\n                      price\\n                      expiresAt\\n                      txHash\\n                      nftAddress\\n                  }\\n              }\\n              }\\n            }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        expiredOrdersArray.push(result.data.orders);\n                        setOrders(expiredOrdersArray);\n                        setTotalOrders(expiredOrdersArray.length);\n                        setLoading(false);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n            }\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchParcels() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber); //console.log(totalOrders)\n  // orders.map(parcel => (\n  //  console.log(parcel[0].nft)\n  // ))\n\n\n  return __jsx(React.Fragment, null, !orders ? 'loading' : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(NominatedCardsExpired, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","ExpiredNominations","Nominations","moment","NominatedCardsExpired","props","userManaBalance","nowUnix","valueOf","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","orderIdsArray","i","length","address","getPropData","propData","push","expiredOrdersArray","orderId","j","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport ExpiredNominations from '../ExpiredNominations';\r\nimport Nominations from '../Nominations';\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  \r\n  const nowUnix = moment().valueOf();\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n\r\n\r\n  \r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n  useEffect(() => {\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n  \r\n    \r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n      let orderIdsArray = [];\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n       const address = deployedAddresses[i];\r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n        orderIdsArray.push(propData[2]);\r\n      }\r\n        \r\n        let j;\r\n        let expiredOrdersArray = [];\r\n        let orderId = ['0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1','0x1701bc11f5417087ecd1211e5d9f8477f5c61c30c5ae4960fe43e7d295c455b6','0x1c43e0e328d2b7ecb5d729d678189e3ad6c737ab8451240eb8848a6ebf81a12c'];\r\n       \r\n        for (j = 0; j < orderId.length; j++) {\r\n          const graphql = JSON.stringify({ query: \r\n            `{\r\n              orders(where: {id:\"${orderId[j]}\", status:cancelled, category:parcel }) {\r\n                nft{\r\n                  parcel{          \r\n                          x,\r\n                          y,\r\n                          tokenId\r\n                      }\r\n                  activeOrder{\r\n                      price\r\n                      expiresAt\r\n                      txHash\r\n                      nftAddress\r\n                  }\r\n              }\r\n              }\r\n            }`\r\n        })\r\n    \r\n        const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n        fetch(targetUrl, {\r\n          method: \"POST\",\r\n          headers:myHeaders,  \r\n          body:graphql, variables:{},\r\n          redirect: 'follow'\r\n        })\r\n          .then(res => res.json())\r\n          .then( async (result) => {\r\n            expiredOrdersArray.push(result.data.orders);\r\n            setOrders(expiredOrdersArray);\r\n            setTotalOrders(expiredOrdersArray.length)\r\n            setLoading(false); \r\n          },\r\n          (error) => {\r\n          return error;\r\n          }\r\n        ) \r\n      }\r\n   \r\n  }\r\n   \r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  //console.log(totalOrders)\r\n\r\n  // orders.map(parcel => (\r\n  //  console.log(parcel[0].nft)\r\n  // ))\r\n  return (   \r\n    <>\r\n    {!orders  ? \r\n    \r\n      'loading'\r\n    : \r\n      <div>\r\n        {/* <ExpiredNominations \r\n          orders={currentParcels} \r\n          loading={loading} \r\n          props={props}   \r\n          userManaBalance={userManaBalance}\r\n        /> */}\r\n        <Nominations \r\n          orders={currentParcels} \r\n          loading={loading} \r\n          props={props}   \r\n          userManaBalance={userManaBalance}\r\n        />\r\n        <Pagination\r\n          currentPage ={currentPage }\r\n          parcelsPerPage={parcelsPerPage}\r\n          totalParcels={totalOrders}\r\n          paginate={paginate}\r\n        />\r\n      </div>\r\n      \r\n    }\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}