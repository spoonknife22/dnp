{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\forms\\\\InnerPropForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport { connect } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'; // import {Col, Button} from 'react-bootstrap'\n\nimport { Col } from \"shards-react\";\nimport { toast } from 'react-toastify';\nimport NominationButton from '../buttons/NominateButton';\nimport ContributeForm from './ContributeForm';\nimport { Loader } from 'rimble-ui';\nimport InitialContributeModal from '../modals/InitialContibModal';\n\nconst InnerPropForm = ({\n  drizzle,\n  drizzleState,\n  props,\n  propAddress,\n  getCurrentProp,\n  tokenId,\n  assetPrice,\n  userManaBalance\n}) => {\n  const nominateAsset = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var text, reSalePrice, listPrice, account, memberBool, user, userId, contract;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            text = values.text, reSalePrice = values.reSalePrice;\n            listPrice = \"\".concat(assetPrice);\n            account = drizzleState.accounts[0];\n            _context.next = 5;\n            return drizzle.contracts.UserStorage.methods.addresses(account).call();\n\n          case 5:\n            memberBool = _context.sent;\n\n            if (!memberBool) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 9;\n            return drizzle.contracts.UserStorage.methods.profiles(account).call();\n\n          case 9:\n            user = _context.sent;\n            userId = user.userId;\n            _context.next = 13;\n            return drizzle.contracts.ProposalController;\n\n          case 13:\n            contract = _context.sent;\n            _context.prev = 14;\n            contract.methods[\"createProposal\"].cacheSend(userId, listPrice, reSalePrice, text, tokenId);\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](14);\n            return _context.abrupt(\"return\", toast.error(\"Sorry, we couldn't create asset nomination: \".concat(_context.t0), {\n              position: toast.POSITION.TOP_RIGHT\n            }));\n\n          case 21:\n            _context.next = 24;\n            break;\n\n          case 23:\n            return _context.abrupt(\"return\", toast.warning(\"Join the Consortium and nominate this asset\", {\n              position: toast.POSITION.TOP_RIGHT\n            }));\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[14, 18]]);\n    }));\n\n    return function nominateAsset(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  let yup = require('yup');\n\n  const schema = yup.object({\n    text: yup.string().max(100, 'To many characters').required('Required'),\n    reSalePrice: yup.number().typeError(\"Must be a number\").moreThan(assetPrice.toString(), 'Must be more than current price.').required('Required'),\n    termsOfService: yup.bool().oneOf([true], \"You must accept the terms and conditions\")\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, (() => {\n    switch (propAddress) {\n      case null:\n        return __jsx(Info, {\n          text: propAddress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 18\n          }\n        });\n\n      case '0x0000000000000000000000000000000000000000':\n        return __jsx(Warning, {\n          text: propAddress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 18\n          }\n        });\n\n      case Number.isInteger(propAddress):\n        return __jsx(Error, {\n          text: propAddress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 18\n          }\n        });\n\n      default:\n        return null;\n    }\n  })()); // if(propAddress == null) {\n  //   {console.log(propAddress, 'null')}\n  //   return (\n  //     <div className=\"mx-auto\">   \n  //       <Loader className=\"mx-auto\" color=\"#007bff\" size=\"40px\" />{propAddress}\n  //     </div>\n  //   )\n  // }\n  // else if(propAddress === '0x0000000000000000000000000000000000000000') {\n  //   {console.log(propAddress, '0000')}\n  //   return (   \n  //     <> \n  //       <Formik\n  //         initialValues={{\n  //         text: '',\n  //         reSalePrice: '',\n  //         termsOfService:false,\n  //         }}\n  //         validationSchema={schema}\n  //         onSubmit={(values, actions) => {\n  //         nominateAsset(values);\n  //         addReview(values);\n  //       }}\n  //       >\n  //         {({\n  //           handleSubmit,\n  //           handleChange,\n  //           handleBlur,\n  //           values,\n  //           touched,\n  //           errors,\n  //         }) => (\n  //           <Form noValidate onSubmit={handleSubmit}>\n  //             <Form.Row>\n  //               <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n  //                 <Form.Label>Pitch</Form.Label>\n  //                 <Form.Control\n  //                   type=\"text\"\n  //                   as=\"textarea\" \n  //                   rows={3}\n  //                   name=\"text\"\n  //                   placeholder='100 Character Max'\n  //                   value={values.text}\n  //                   onChange={handleChange}\n  //                   onBlur={handleBlur}\n  //                   isValid={values.text}\n  //                   isInvalid={touched.text && !!errors.text}\n  //                   />\n  //                 <Form.Control.Feedback type=\"invalid\">\n  //                   {errors.text}\n  //                 </Form.Control.Feedback>\n  //               </Form.Group>\n  //               <Form.Group as={Col} md=\"4\" controlId=\"validationFormik02\">\n  //                 <Form.Label>Resale Price</Form.Label>\n  //                 <Form.Control\n  //                   type=\"text\" \n  //                   name=\"reSalePrice\"\n  //                   placeholder=\"Resale Price\"\n  //                   value={values.reSalePrice}\n  //                   onChange={handleChange}\n  //                   onBlur={handleBlur}\n  //                   isInvalid={touched.reSalePrice && !!errors.reSalePrice}\n  //                   isValid={values.reSalePrice}\n  //                 />\n  //                 <Form.Control.Feedback type=\"invalid\">  \n  //                 {errors.reSalePrice}\n  //                 </Form.Control.Feedback>\n  //               </Form.Group>\n  //             </Form.Row>\n  //             <Form.Group>\n  //               <Form.Check\n  //                 required\n  //                 name=\"termsOfService\"\n  //                 label=\"Agree to terms and conditions\"\n  //                 onChange={handleChange}\n  //                 isInvalid={!!errors.termsOfService}\n  //                 feedback={errors.termsOfService}\n  //                 id=\"validationFormik0\"\n  //               />\n  //             </Form.Group>\n  //             <Modal.Footer>\n  //               <NominationButton props={props} tokenId={tokenId} />\n  //             </Modal.Footer>\n  //           </Form>\n  //         )}\n  //       </Formik>\n  //     </>\n  //   );   \n  // }       \n  //   else{\n  //     {console.log(propAddress, 'contribute')}\n  //     return (\n  //     <div>\n  //       <InitialContributeModal \n  //         //propAddress={propAddress} \n  //         userManaBalance={userManaBalance}\n  //         assetPrice={assetPrice} \n  //         drizzleState={drizzleState} \n  //         drizzle={drizzle} \n  //         tokenId={tokenId} \n  //       />\n  //     </div>\n  //     )\n  //   }\n};\n\n_c = InnerPropForm;\n\nconst mapStateToProps = state => ({//propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentProp: proposalAddress => dispatch({\n    type: \"GOT_PROP_ADDRESS\",\n    proposalAddress: proposalAddress\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InnerPropForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"InnerPropForm\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/forms/InnerPropForm.js"],"names":["React","useState","useEffect","Modal","connect","Form","Formik","Yup","Col","toast","NominationButton","ContributeForm","Loader","InitialContributeModal","InnerPropForm","drizzle","drizzleState","props","propAddress","getCurrentProp","tokenId","assetPrice","userManaBalance","nominateAsset","values","text","reSalePrice","listPrice","account","accounts","contracts","UserStorage","methods","addresses","call","memberBool","profiles","user","userId","ProposalController","contract","cacheSend","error","position","POSITION","TOP_RIGHT","warning","yup","require","schema","object","string","max","required","number","typeError","moreThan","toString","termsOfService","bool","oneOf","Number","isInteger","mapStateToProps","state","mapDispatchToProps","dispatch","proposalAddress","type"],"mappings":"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CAAL;AACE,eAAO,MAAC,KAAD;AAAO,UAAA,IAAI,EAAEA,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF;AACE,eAAO,IAAP;AARJ;AAUD,GAXA,GADH,CADF,CAtC+H,CAwD/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAjKD;;KAAMJ,a;;AAmKN,MAAMiD,eAAe,GAAIC,KAAD,KAAY,CAClC;AADkC,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxC/C,EAAAA,cAAc,EAAGgD,eAAD,IAAsBD,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,kBAAR;AAA4BD,IAAAA,eAAe,EAACA;AAA5C,GAAD;AADN,CAAf,CAA3B;;AAKA,eAAe/D,OAAO,CAAC2D,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnD,aAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Formik} from 'formik';\r\nimport  * as Yup from 'yup';\r\n// import {Col, Button} from 'react-bootstrap'\r\nimport { Col } from \"shards-react\";\r\nimport { toast } from 'react-toastify';\r\nimport NominationButton from '../buttons/NominateButton';\r\nimport ContributeForm from './ContributeForm';\r\nimport { Loader } from 'rimble-ui';\r\nimport InitialContributeModal from '../modals/InitialContibModal';\r\n\r\n      \r\n\r\n\r\nconst InnerPropForm = ({ drizzle, drizzleState, props, propAddress, getCurrentProp, tokenId, assetPrice, userManaBalance }) => {\r\n  \r\n\r\n  const nominateAsset = async (values) => {\r\n      \r\n    const { text, reSalePrice } = values;\r\n    const listPrice = `${assetPrice}`;\r\n    const account = drizzleState.accounts[0];\r\n    const memberBool = await drizzle.contracts.UserStorage.methods.addresses(account).call();\r\n   \r\n    if(memberBool) {\r\n      const user = await drizzle.contracts.UserStorage.methods.profiles(account).call();\r\n      const { userId } = user;\r\n      const contract = await drizzle.contracts.ProposalController;\r\n    try {\r\n      contract.methods[\"createProposal\"].cacheSend(userId, listPrice, reSalePrice, text, tokenId );\r\n \r\n    } catch (err) {\r\n        return toast.error(`Sorry, we couldn't create asset nomination: ${err}`,{ position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n    else {\r\n      return toast.warning( `Join the Consortium and nominate this asset`, { position: toast.POSITION.TOP_RIGHT });\r\n  }\r\n}\r\n\r\nlet yup = require('yup');\r\nconst schema = yup.object({\r\n  text: yup.string()\r\n  .max(100, 'To many characters')\r\n  .required('Required'),\r\n  reSalePrice: yup.number()\r\n  .typeError(\"Must be a number\")\r\n  .moreThan(assetPrice.toString(), 'Must be more than current price.')\r\n  .required('Required'),\r\n  termsOfService: yup.bool().oneOf([true], \"You must accept the terms and conditions\")\r\n});\r\n\r\nreturn (\r\n  <div>\r\n    {(() => {\r\n      switch (propAddress) {\r\n        case null:\r\n          return <Info text={propAddress} />;\r\n        case '0x0000000000000000000000000000000000000000':\r\n          return <Warning text={propAddress} />;\r\n        case Number.isInteger(propAddress):\r\n          return <Error text={propAddress} />;\r\n        default:\r\n          return null;\r\n      }\r\n    })()}\r\n  </div>\r\n);\r\n\r\n\r\n// if(propAddress == null) {\r\n//   {console.log(propAddress, 'null')}\r\n//   return (\r\n//     <div className=\"mx-auto\">   \r\n//       <Loader className=\"mx-auto\" color=\"#007bff\" size=\"40px\" />{propAddress}\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// else if(propAddress === '0x0000000000000000000000000000000000000000') {\r\n//   {console.log(propAddress, '0000')}\r\n//   return (   \r\n//     <> \r\n//       <Formik\r\n//         initialValues={{\r\n//         text: '',\r\n//         reSalePrice: '',\r\n//         termsOfService:false,\r\n//         }}\r\n//         validationSchema={schema}\r\n//         onSubmit={(values, actions) => {\r\n//         nominateAsset(values);\r\n//         addReview(values);\r\n//       }}\r\n//       >\r\n//         {({\r\n//           handleSubmit,\r\n//           handleChange,\r\n//           handleBlur,\r\n//           values,\r\n//           touched,\r\n//           errors,\r\n//         }) => (\r\n//           <Form noValidate onSubmit={handleSubmit}>\r\n//             <Form.Row>\r\n//               <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n//                 <Form.Label>Pitch</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   as=\"textarea\" \r\n//                   rows={3}\r\n//                   name=\"text\"\r\n//                   placeholder='100 Character Max'\r\n//                   value={values.text}\r\n//                   onChange={handleChange}\r\n//                   onBlur={handleBlur}\r\n//                   isValid={values.text}\r\n//                   isInvalid={touched.text && !!errors.text}\r\n//                   />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.text}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n//               <Form.Group as={Col} md=\"4\" controlId=\"validationFormik02\">\r\n//                 <Form.Label>Resale Price</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\" \r\n//                   name=\"reSalePrice\"\r\n//                   placeholder=\"Resale Price\"\r\n//                   value={values.reSalePrice}\r\n//                   onChange={handleChange}\r\n//                   onBlur={handleBlur}\r\n//                   isInvalid={touched.reSalePrice && !!errors.reSalePrice}\r\n//                   isValid={values.reSalePrice}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">  \r\n//                 {errors.reSalePrice}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n//             </Form.Row>\r\n//             <Form.Group>\r\n//               <Form.Check\r\n//                 required\r\n//                 name=\"termsOfService\"\r\n//                 label=\"Agree to terms and conditions\"\r\n//                 onChange={handleChange}\r\n//                 isInvalid={!!errors.termsOfService}\r\n//                 feedback={errors.termsOfService}\r\n//                 id=\"validationFormik0\"\r\n//               />\r\n//             </Form.Group>\r\n//             <Modal.Footer>\r\n//               <NominationButton props={props} tokenId={tokenId} />\r\n//             </Modal.Footer>\r\n//           </Form>\r\n//         )}\r\n//       </Formik>\r\n//     </>\r\n//   );   \r\n// }       \r\n//   else{\r\n//     {console.log(propAddress, 'contribute')}\r\n//     return (\r\n//     <div>\r\n//       <InitialContributeModal \r\n//         //propAddress={propAddress} \r\n//         userManaBalance={userManaBalance}\r\n//         assetPrice={assetPrice} \r\n//         drizzleState={drizzleState} \r\n//         drizzle={drizzle} \r\n//         tokenId={tokenId} \r\n//       />\r\n//     </div>\r\n//     )\r\n//   }\r\n} \r\n\r\nconst mapStateToProps = (state) => ({\r\n  //propAddress: state.appReducers.propAddress\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getCurrentProp: (proposalAddress) =>  dispatch({ type: \"GOT_PROP_ADDRESS\", proposalAddress:proposalAddress })\r\n});\r\n      \r\n      \r\nexport default connect(mapStateToProps, mapDispatchToProps)(InnerPropForm);"]},"metadata":{},"sourceType":"module"}