{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nconst getDrizzle = state => state.dappReducer.drizzle;\n\nconst getContracts = state => state.contracts;\n\nfunction fetchTokenId(action) {\n  return _regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCH',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr(action) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GET_PROP_ADDRESS',\n          propAddress: propAddr\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n} // function* txSuccessful() {\n//   yield put({type:'TX_SUCCESSFUL'});\n// }\n// function* txProcessing() {\n//   yield put({type:'TX_BROADCASTED'});\n// }\n\n\nexport default function appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["fetchTokenId","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","getDrizzle","state","dappReducer","drizzle","getContracts","contracts","action","type","tokenId","propAddress","propAddr"],"mappings":";;oDAUUA,Y;qDAIAC,a;qDAeeC,W;;AA7BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,OAAhD;;AACA,MAAMC,YAAY,GAAIH,KAAD,IAAWA,KAAK,CAACI,SAAtC;;AAEA,SAAUvB,YAAV,CAAwBwB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMlB,GAAG,CAAC;AAAEmB,UAAAA,IAAI,EAAE,gBAAR;AAA2BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA1C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUzB,aAAV,CAAyBuB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAGE,eAAMlB,GAAG,CAAC;AAAEmB,UAAAA,IAAI,EAAC,kBAAP;AAA4BE,UAAAA,WAAW,EAACC;AAAxC,SAAD,CAAT;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAe,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AAGb,eAAMG,UAAU,CAAC,kBAAD,EAAqBJ,aAArB,CAAhB;;AAHa;AAAA;AAIb,eAAMI,UAAU,CAAC,gBAAD,EAAmBL,YAAnB,CAAhB;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\n\r\nconst getDrizzle = (state) => state.dappReducer.drizzle;\r\nconst getContracts = (state) => state.contracts;\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCH' , tokenId:action.tokenId  });\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n\r\n\r\n  yield put({ type:'GET_PROP_ADDRESS' , propAddress:propAddr });\r\n}\r\n\r\n\r\n// function* txSuccessful() {\r\n//   yield put({type:'TX_SUCCESSFUL'});\r\n// }\r\n\r\n// function* txProcessing() {\r\n//   yield put({type:'TX_BROADCASTED'});\r\n// }\r\n\r\nexport default function* appRootSaga() {\r\n  //yield takeLatest('TX_BROADCASTED', txProcessing);\r\n  //yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}