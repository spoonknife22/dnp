{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\ForSaleAssetCard.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst ForSaleAssetCard = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  let ordersArray = [];\n\n  const orderSaleCall = address => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    console.log(myHeaders);\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {category:parcel, status:open, owner:\\\"\".concat(address, \"\\\"}) {\\n          status \\n          nft{\\n           parcel {\\n             x,\\n             y, \\n             tokenId\\n           }\\n           activeOrder {\\n             id\\n             price\\n             expiresAt\\n             nftAddress\\n             txHash\\n           }\\n         }\\n        }\\n      }\")\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n      ordersArray.push(...result.data.orders);\n    }, error => {\n      return error;\n    }).then(() => {\n      setOrders(ordersArray);\n      setTotalOrders(ordersArray.length);\n      setLoading(false);\n    }, error => {\n      return error;\n    });\n  };\n\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var proposalContract, deployedAddresses, i, address, propData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context.sent;\n              //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\n              deployedAddresses = [0x5ce213893956bBf4249a7f8a079331280065eec6, 0x6a1e9564f99fb9718d37dfcc053b3aee460368ea];\n              i = 0;\n\n            case 5:\n              if (!(i < deployedAddresses.length)) {\n                _context.next = 14;\n                break;\n              }\n\n              address = deployedAddresses[i];\n              _context.next = 9;\n              return proposalContract.methods.getPropData(\"$\\\"{address}\\\"\").call();\n\n            case 9:\n              propData = _context.sent;\n              //if(propData[0] == 4){\n              orderSaleCall(address); //}\n\n            case 11:\n              i++;\n              _context.next = 5;\n              break;\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 8\n    }\n  }));\n};\n\nexport default ForSaleAssetCard;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/ForSaleAssetCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","ForSaleAssetCard","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","ordersArray","orderSaleCall","address","myHeaders","Headers","append","console","log","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","error","length","fetchParcels","drizzle","contracts","ProposalController","proposalContract","deployedAddresses","i","methods","getPropData","call","propData","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\nconst ForSaleAssetCard = ({ props, userManaBalance }) => {\r\n\r\n\r\n  \r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  let ordersArray = [];\r\n\r\n  const orderSaleCall = (address) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    console.log(myHeaders)\r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {category:parcel, status:open, owner:\"${address}\"}) {\r\n          status \r\n          nft{\r\n           parcel {\r\n             x,\r\n             y, \r\n             tokenId\r\n           }\r\n           activeOrder {\r\n             id\r\n             price\r\n             expiresAt\r\n             nftAddress\r\n             txHash\r\n           }\r\n         }\r\n        }\r\n      }`\r\n  })\r\n\r\n\r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      console.log(result)\r\n      ordersArray.push(...result.data.orders);\r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  .then(() => {\r\n    setOrders(ordersArray);\r\n    setTotalOrders(ordersArray.length);\r\n    setLoading(false); \r\n  },\r\n  (error) => {\r\n    return error;\r\n    }\r\n  )\r\n}\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n\r\n      const deployedAddresses = [0x5ce213893956bBf4249a7f8a079331280065eec6,0x6a1e9564f99fb9718d37dfcc053b3aee460368ea]\r\n     \r\n      let i;\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n\r\n        const propData = await proposalContract.methods.getPropData(`$\"{address}\"`).call();\r\n        //if(propData[0] == 4){\r\n        orderSaleCall(address);\r\n     //}\r\n    }\r\n}\r\n  fetchParcels();  \r\n}, []);\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage}\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default ForSaleAssetCard;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}