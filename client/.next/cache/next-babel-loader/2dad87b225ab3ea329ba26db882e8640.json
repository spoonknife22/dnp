{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance,\n  expiredAt,\n  orderId\n}) => {\n  const nowUnix = moment().valueOf();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const _useState6 = useState([]),\n        graphql = _useState6[0],\n        setGraphql = _useState6[1]; //else if(propData[0] == 0 && propData[2] < nowUnix){\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var proposalContract, deployedAddresses, i, expiredOrderIdArray, address, propData, orderId, graphql, targetUrl;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context2.sent;\n              _context2.next = 5;\n              return proposalContract.methods.getDeployedAddresses().call();\n\n            case 5:\n              deployedAddresses = _context2.sent;\n              expiredOrderIdArray = [];\n              i = 0;\n\n            case 8:\n              if (!(i < deployedAddresses.length)) {\n                _context2.next = 21;\n                break;\n              }\n\n              address = deployedAddresses[i];\n              _context2.next = 12;\n              return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n            case 12:\n              propData = _context2.sent;\n              //const orderId = propData[3];\n              orderId = ['0x04c9ce56ad0e35b4b946d3f853125bc83ce58b261cfdfc7ce1a27f1ed8336204', '0x06c0a3c24897a254c372cac998dcec1200a622d4745236c2d3ce1c162fb8ca8e', '0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1'];\n              console.log(orderId);\n              graphql = JSON.stringify({\n                query: \"{\\n            orders(where: {id:\\\"\".concat(orderId, \"\\\", status:cancelled, category:parcel }) {\\n              nft{\\n                parcel {\\n                  x,\\n                  y, \\n                  tokenId\\n                }\\n                activeOrder {\\n                  price\\n                  expiresAt\\n                  nftAddress\\n                  txHash\\n                }\\n              }\\n            }\\n          }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        //console.log(result)\n                        // const ordersGQL = await result.data.nfts;\n                        // const ordersFiltered = await result.data.nfts;\n                        // console.log(ordersFiltered)\n                        setGraphql(result);\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n\n            case 18:\n              i++;\n              _context2.next = 8;\n              break;\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 8\n    }\n  }));\n};\n\nexport default NominatedCardsExpired; // const graphql= JSON.stringify({ query: \n//   `{\n//     orders(where: {id:${orderId }, status:cancelled, category:parcel, expiresAt:${expiredAt}}) {\n//     id\n//       nft{\n//           name\n//           tokenId\n//           parcel{          \n//                   x\n//                   y\n//               }\n//           activeOrder{\n//               nftAddress\n//               price\n//               expiresAt\n//               txHash\n//           }\n//       }\n//     }\n//   }`\n// })","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominatedCardsExpired","props","userManaBalance","expiredAt","orderId","nowUnix","valueOf","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","graphql","setGraphql","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","expiredOrderIdArray","i","length","address","getPropData","propData","console","log","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance, expiredAt, orderId }) => {\r\n  \r\n  const nowUnix = moment().valueOf();\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n  const [graphql, setGraphql] = useState([]);\r\n\r\n  //else if(propData[0] == 0 && propData[2] < nowUnix){\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n \r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchParcels = async () => {\r\n\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n      let i;\r\n      let expiredOrderIdArray = [];\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();  \r\n      //const orderId = propData[3];\r\n        let orderId = ['0x04c9ce56ad0e35b4b946d3f853125bc83ce58b261cfdfc7ce1a27f1ed8336204','0x06c0a3c24897a254c372cac998dcec1200a622d4745236c2d3ce1c162fb8ca8e','0x0af8c2510b5a68621e7af9a1e5df3d1340e6b000e0dbb2f96f201d5dc8510ca1'];\r\n        console.log(orderId);\r\n\r\n        const graphql= JSON.stringify({ query: \r\n          `{\r\n            orders(where: {id:\"${orderId}\", status:cancelled, category:parcel }) {\r\n              nft{\r\n                parcel {\r\n                  x,\r\n                  y, \r\n                  tokenId\r\n                }\r\n                activeOrder {\r\n                  price\r\n                  expiresAt\r\n                  nftAddress\r\n                  txHash\r\n                }\r\n              }\r\n            }\r\n          }`\r\n      })\r\n\r\n      const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n      fetch(targetUrl, {\r\n        method: \"POST\",\r\n        headers:myHeaders,  \r\n        body:graphql, variables:{},\r\n        redirect: 'follow'\r\n      })\r\n        .then(res => res.json())\r\n        .then( async (result) => {\r\n          //console.log(result)\r\n          // const ordersGQL = await result.data.nfts;\r\n          // const ordersFiltered = await result.data.nfts;\r\n          // console.log(ordersFiltered)\r\n          setGraphql(result)\r\n        },\r\n        (error) => {\r\n         return error;\r\n        }\r\n      ) \r\n    }\r\n      \r\n    }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n\r\n// const graphql= JSON.stringify({ query: \r\n//   `{\r\n//     orders(where: {id:${orderId }, status:cancelled, category:parcel, expiresAt:${expiredAt}}) {\r\n//     id\r\n//       nft{\r\n//           name\r\n//           tokenId\r\n//           parcel{          \r\n//                   x\r\n//                   y\r\n//               }\r\n//           activeOrder{\r\n//               nftAddress\r\n//               price\r\n//               expiresAt\r\n//               txHash\r\n//           }\r\n//       }\r\n//     }\r\n//   }`\r\n// })"]},"metadata":{},"sourceType":"module"}