{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(testSaga),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(root);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify'; // const delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING';\n\nfunction testSaga() {\n  return regeneratorRuntime.wrap(function testSaga$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        console.log('Yes!');\n\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n} //const getDrizzle = (state) => state.appReducers.drizzle;\n// const getContracts = (state) => state.contracts;\n// function * fetchTokenId (action) {\n//   yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\n// }\n\n\nfunction fetchPropAddr() {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 2\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction root() {\n  return regeneratorRuntime.wrap(function root$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeEvery(ACCOUNTS_FETCHING, testSaga);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default root;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["testSaga","fetchPropAddr","root","all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","TOKEN_ID_FETCH","GET_PROP_ADDRESS","TEST_SAGA","TX_SUCCESSFUL","ACCOUNTS_FETCHING","console","log","type","propAddress"],"mappings":"mDAWUA,Q;oDASAC,a;oDAIAC,I;;AAxBV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACC,MAAMC,iBAAiB,GAAG,mBAA1B;;AAGD,SAAUjB,QAAV;AAAA;AAAA;AAAA;AACEkB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGA;AACA;AACA;AACA;AACA;;;AAEA,SAAUlB,aAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMK,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUnB,IAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMS,SAAS,CAACG,gBAAD,EAAmBb,aAAnB,CAAf;;AADF;AAAA;AAEE,eAAMU,SAAS,CAACM,iBAAD,EAAoBjB,QAApB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeE,IAAf","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n// const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\n const ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING';\r\n\r\n\r\nfunction* testSaga () {\r\n  console.log('Yes!')\r\n}\r\n//const getDrizzle = (state) => state.appReducers.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n// function * fetchTokenId (action) {\r\n//   yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n// }\r\n\r\nfunction* fetchPropAddr () {\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:2});\r\n}\r\n\r\nfunction* root () {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr),\r\n  yield takeEvery(ACCOUNTS_FETCHING, testSaga)\r\n}\r\n\r\n\r\nexport default root;\r\n"]},"metadata":{},"sourceType":"module"}