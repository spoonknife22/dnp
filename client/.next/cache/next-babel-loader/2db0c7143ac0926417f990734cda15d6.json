{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominationAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const nowUnix = moment().valueOf();\n  ;\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const currentTime = moment().valueOf();\n  const graphql = JSON.stringify({\n    query: \"{\\n        nfts(first: 8, orderBy: searchOrderPrice, where:{ category: parcel, searchOrderStatus: open,searchOrderExpiresAt_gt:\".concat(currentTime, \"}) {\\n          \\n          parcel {\\n            x,\\n            y, \\n            tokenId\\n          }\\n          activeOrder {\\n            price\\n            expiresAt\\n            nftAddress\\n            txHash\\n          }\\n        }\\n      }\")\n  });\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  var ordersGQL, ordersFiltered, proposalContract, deployedAddresses, i, fundingArray, fundingArrayExpired, fundedArray, purchasedArray, forSaleArray, forSaleArrayExpired, soldArray, paidOutArray, address, propData, ordersFilter;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.nfts;\n\n                      case 2:\n                        ordersGQL = _context.sent;\n                        _context.next = 5;\n                        return result.data.nfts;\n\n                      case 5:\n                        ordersFiltered = _context.sent;\n                        _context.next = 8;\n                        return props.drizzle.contracts.ProposalController;\n\n                      case 8:\n                        proposalContract = _context.sent;\n                        _context.next = 11;\n                        return proposalContract.methods.getDeployedAddresses().call();\n\n                      case 11:\n                        deployedAddresses = _context.sent;\n                        fundingArray = [];\n                        fundingArrayExpired = [];\n                        fundedArray = [];\n                        purchasedArray = [];\n                        forSaleArray = [];\n                        forSaleArrayExpired = [];\n                        soldArray = [];\n                        paidOutArray = [];\n                        i = 0;\n\n                      case 21:\n                        if (!(i < deployedAddresses.length)) {\n                          _context.next = 30;\n                          break;\n                        }\n\n                        address = deployedAddresses[i];\n                        _context.next = 25;\n                        return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n                      case 25:\n                        propData = _context.sent;\n\n                        if (propData[0] == 0 && propData[2] > nowUnix) {\n                          fundingArray.push(propData[1]);\n                        } else if (propData[0] == 0 && propData[2] < nowUnix) {\n                          fundingArrayExpired.push(propData[1]);\n                        } else if (propData[0] == 1) {\n                          fundedArray.push(propData[1]);\n                        } else if (propData[0] == 3) {\n                          purchasedArray.push(propData[1]);\n                        } else if (propData[0] == 4) {\n                          forSaleArray.push(propData[1]);\n                        } else if (propData[0] == 5 && propData[2] < nowUnix) {\n                          forSaleArrayExpired.push(propData[1]);\n                        } else if (propData[0] == 4) {\n                          soldArray.push(propData[1]);\n                        } else if (propData[0] == 7) {\n                          paidOutArray.push(propData[1]);\n                        }\n\n                      case 27:\n                        i++;\n                        _context.next = 21;\n                        break;\n\n                      case 30:\n                        //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\n                        ordersFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId)); //Old Example\n                        //  else if(propData[0] == 7){\n                        //   paidOutArray.push([i, propData[1], propData[2]]);\n                        // }\n\n                        console.log(ordersFilter, ordersFiltered);\n                        setOrders(ordersFiltered);\n                        setTotalOrders(ordersFiltered.length);\n                        setLoading(false);\n\n                      case 35:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 8\n    }\n  }));\n};\n\n_s(NominationAssetCards, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominationAssetCards;\nexport default NominationAssetCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationAssetCards\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominationAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","nowUnix","valueOf","myHeaders","Headers","append","currentTime","graphql","JSON","stringify","query","fetchParcels","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","nfts","ordersGQL","ordersFiltered","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","fundingArray","fundingArrayExpired","fundedArray","purchasedArray","forSaleArray","forSaleArrayExpired","soldArray","paidOutArray","i","length","address","getPropData","propData","push","ordersFilter","filter","item","includes","parcel","tokenId","console","log","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAKA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA;;AAAA,oBAE/BP,QAAQ,CAAC,EAAD,CAFuB;AAAA,QAEpDQ,MAFoD;AAAA,QAE5CC,SAF4C;;AAAA,qBAG7BT,QAAQ,CAAC,KAAD,CAHqB;AAAA,QAGpDU,OAHoD;AAAA,QAG3CC,UAH2C;;AAAA,qBAIrBX,QAAQ,CAAC,CAAD,CAJa;AAAA,QAIpDY,WAJoD;AAAA,QAIvCC,cAJuC;;AAAA,qBAKlCb,QAAQ,CAAC,CAAD,CAL0B;AAAA,QAKpDc,cALoD;;AAAA,qBAMrBd,QAAQ,EANa;AAAA,QAMpDe,WANoD;AAAA,QAMvCC,cANuC;;AAQ3D,QAAMC,OAAO,GAAGb,MAAM,GAAGc,OAAT,EAAhB;AAAmC;AAEnC,QAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AACA,QAAMC,WAAW,GAAElB,MAAM,GAAGc,OAAT,EAAnB;AACA,QAAMK,OAAO,GAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,KAAK,2IAEuFJ,WAFvF;AAAP,GAAf,CAAf;AAmBArB,EAAAA,SAAS,CACP,MAAM;AAEN,UAAM0B,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AACrB;AACMC,cAAAA,SAFe,GAEH,kEAFG;AAIrBC,cAAAA,KAAK,CAACD,SAAD,EAAY;AACfE,gBAAAA,MAAM,EAAE,MADO;AAEfC,gBAAAA,OAAO,EAACZ,SAFO;AAGfa,gBAAAA,IAAI,EAACT,OAHU;AAGDU,gBAAAA,SAAS,EAAC,EAHT;AAIfC,gBAAAA,QAAQ,EAAE;AAJK,eAAZ,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH;AAAA,qFAOS,iBAAOG,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqBA,MAAM,CAACC,IAAP,CAAYC,IADjC;;AAAA;AACGC,wBAAAA,SADH;AAAA;AAAA,+BAE0BH,MAAM,CAACC,IAAP,CAAYC,IAFtC;;AAAA;AAEGE,wBAAAA,cAFH;AAAA;AAAA,+BAQ2BpC,KAAK,CAACqC,OAAN,CAAcC,SAAd,CAAwBC,kBARnD;;AAAA;AAQEC,wBAAAA,gBARF;AAAA;AAAA,+BAS4BA,gBAAgB,CAACC,OAAjB,CAAyBC,oBAAzB,GAAgDC,IAAhD,EAT5B;;AAAA;AASEC,wBAAAA,iBATF;AAYAC,wBAAAA,YAZA,GAYe,EAZf;AAaAC,wBAAAA,mBAbA,GAasB,EAbtB;AAcAC,wBAAAA,WAdA,GAcc,EAdd;AAeAC,wBAAAA,cAfA,GAeiB,EAfjB;AAgBAC,wBAAAA,YAhBA,GAgBe,EAhBf;AAiBAC,wBAAAA,mBAjBA,GAiBsB,EAjBtB;AAkBAC,wBAAAA,SAlBA,GAkBY,EAlBZ;AAmBAC,wBAAAA,YAnBA,GAmBe,EAnBf;AAqBCC,wBAAAA,CAAC,GAAG,CArBL;;AAAA;AAAA,8BAqBQA,CAAC,GAAGT,iBAAiB,CAACU,MArB9B;AAAA;AAAA;AAAA;;AAsBIC,wBAAAA,OAtBJ,GAsBcX,iBAAiB,CAACS,CAAD,CAtB/B;AAAA;AAAA,+BAuBqBb,gBAAgB,CAACC,OAAjB,CAAyBe,WAAzB,WAAwCD,OAAxC,GAAmDZ,IAAnD,EAvBrB;;AAAA;AAuBIc,wBAAAA,QAvBJ;;AAyBF,4BAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAf,IAAoBA,QAAQ,CAAC,CAAD,CAAR,GAAc9C,OAArC,EAA8C;AAC5CkC,0BAAAA,YAAY,CAACa,IAAb,CAAkBD,QAAQ,CAAC,CAAD,CAA1B;AACD,yBAFD,MAGK,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAf,IAAoBA,QAAQ,CAAC,CAAD,CAAR,GAAc9C,OAArC,EAA6C;AACjDmC,0BAAAA,mBAAmB,CAACY,IAApB,CAAyBD,QAAQ,CAAC,CAAD,CAAjC;AACD,yBAFK,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAlB,EAAoB;AACvBV,0BAAAA,WAAW,CAACW,IAAZ,CAAiBD,QAAQ,CAAC,CAAD,CAAzB;AACD,yBAFI,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAlB,EAAoB;AACvBT,0BAAAA,cAAc,CAACU,IAAf,CAAoBD,QAAQ,CAAC,CAAD,CAA5B;AACD,yBAFI,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAlB,EAAoB;AACvBR,0BAAAA,YAAY,CAACS,IAAb,CAAkBD,QAAQ,CAAC,CAAD,CAA1B;AACD,yBAFI,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAf,IAAoBA,QAAQ,CAAC,CAAD,CAAR,GAAc9C,OAArC,EAA6C;AACjDuC,0BAAAA,mBAAmB,CAACQ,IAApB,CAAyBD,QAAQ,CAAC,CAAD,CAAjC;AACA,yBAFI,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAlB,EAAoB;AACxBN,0BAAAA,SAAS,CAACO,IAAV,CAAeD,QAAQ,CAAC,CAAD,CAAvB;AACD,yBAFK,MAGA,IAAGA,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAlB,EAAoB;AACvBL,0BAAAA,YAAY,CAACM,IAAb,CAAkBD,QAAQ,CAAC,CAAD,CAA1B;AACD;;AAhDC;AAqBsCJ,wBAAAA,CAAC,EArBvC;AAAA;AAAA;;AAAA;AAmDN;AACMM,wBAAAA,YApDA,GAoDexB,SAAS,CAACyB,MAAV,CAAiBC,IAAI,IAAIhB,YAAY,CAACiB,QAAb,CAAsBD,IAAI,CAACE,MAAL,CAAYC,OAAlC,CAAzB,CApDf,EAqDP;AACA;AACA;AACA;;AAEEC,wBAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ,EAA0BvB,cAA1B;AAEEjC,wBAAAA,SAAS,CAACiC,cAAD,CAAT;AACA1B,wBAAAA,cAAc,CAAC0B,cAAc,CAACkB,MAAhB,CAAd;AACAjD,wBAAAA,UAAU,CAAC,KAAD,CAAV;;AA9DG;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPT;;AAAA;AAAA;AAAA;AAAA,mBAuEK8D,KAAD,IAAW;AACT9D,gBAAAA,UAAU,CAAC,IAAD,CAAV,EACA8D,KADA;AAED,eA1EL;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZ9C,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAiFAA,IAAAA,YAAY;AACb,GArFQ,EAqFN,EArFM,CAAT,CAhC2D,CAwH3D;;AACA,QAAM+C,iBAAiB,GAAG9D,WAAW,GAAGE,cAAxC;AACA,QAAM6D,kBAAkB,GAAGD,iBAAiB,GAAG5D,cAA/C;AACA,QAAM8D,cAAc,GAAGpE,MAAM,CAACqE,KAAP,CAAaF,kBAAb,EAAiCD,iBAAjC,CAAvB,CA3H2D,CA6H3D;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAIlE,cAAc,CAACkE,UAAD,CAA7C;;AAEA,SACE,4BACE,MAAC,WAAD;AACE,IAAA,MAAM,EAAEH,cADV;AAEE,IAAA,OAAO,EAAElE,OAFX;AAGE,IAAA,KAAK,EAAEJ,KAHT;AAIE,IAAA,eAAe,EAAEC,eAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOG,MAAC,UAAD;AACC,IAAA,WAAW,EAAGK,WADf;AAEC,IAAA,cAAc,EAAEE,cAFjB;AAGC,IAAA,YAAY,EAAEC,WAHf;AAIC,IAAA,QAAQ,EAAE+D,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH,CADF;AAgBD,CAhJD;;GAAMzE,oB;;KAAAA,oB;AAmJN,eAAeA,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominationAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const nowUnix = moment().valueOf();;\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const currentTime= moment().valueOf();\r\n  const graphql= JSON.stringify({ query: \r\n      `{\r\n        nfts(first: 8, orderBy: searchOrderPrice, where:{ category: parcel, searchOrderStatus: open,searchOrderExpiresAt_gt:${currentTime}}) {\r\n          \r\n          parcel {\r\n            x,\r\n            y, \r\n            tokenId\r\n          }\r\n          activeOrder {\r\n            price\r\n            expiresAt\r\n            nftAddress\r\n            txHash\r\n          }\r\n        }\r\n      }`\r\n    })\r\n\r\n  useEffect(\r\n    () => {\r\n    \r\n    const fetchParcels = async () => {\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n          const ordersGQL = await result.data.nfts;\r\n          const ordersFiltered = await result.data.nfts;\r\n          //FILTER OUT NOMINATED PROPS\r\n          //const tokenIdArray = await props.drizzle.contracts.ProposalController.methods.getDeployedProposal().call();\r\n          //const ordersFiltered = ordersGQL.filter(item => !tokenIdArray.includes(item.parcel.tokenId));\r\n          ///\r\n       \r\n         const proposalContract = await props.drizzle.contracts.ProposalController;\r\n         const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n     \r\n         let i;\r\n         let fundingArray = [];\r\n         let fundingArrayExpired = [];\r\n         let fundedArray = [];\r\n         let purchasedArray = [];\r\n         let forSaleArray = [];\r\n         let forSaleArrayExpired = [];\r\n         let soldArray = [];\r\n         let paidOutArray = [];\r\n       \r\n         for (i = 0; i < deployedAddresses.length; i++) {\r\n           const address = deployedAddresses[i];\r\n           const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n\r\n           if(propData[0] == 0 && propData[2] > nowUnix) {\r\n             fundingArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 0 && propData[2] < nowUnix){\r\n            fundingArrayExpired.push(propData[1]);\r\n          }\r\n           else if(propData[0] == 1){\r\n             fundedArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 3){\r\n             purchasedArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 4){\r\n             forSaleArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 5 && propData[2] < nowUnix){\r\n            forSaleArrayExpired.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 4){\r\n            soldArray.push(propData[1]);\r\n          }\r\n           else if(propData[0] == 7){\r\n             paidOutArray.push(propData[1]);\r\n           }\r\n       }\r\n\r\n       //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\r\n       const ordersFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId));\r\n      //Old Example\r\n      //  else if(propData[0] == 7){\r\n      //   paidOutArray.push([i, propData[1], propData[2]]);\r\n      // }\r\n    \r\n        console.log(ordersFilter, ordersFiltered)\r\n        \r\n          setOrders(ordersFiltered);\r\n          setTotalOrders(ordersFiltered.length)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominationAssetCards;"]},"metadata":{},"sourceType":"module"}