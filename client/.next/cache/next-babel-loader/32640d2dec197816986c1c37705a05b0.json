{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations';\n\nconst NominationAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        parcels = _useState[0],\n        setParcels = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalParcels = _useState5[0],\n        setTotalParcels = _useState5[1]; //'../api.DecentralandApi.json'\n\n\n  useEffect(() => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var proxyUrl, targetUrl;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.decentraland.org/v1/parcels?status=open&sort_by=price&sort_order=desc&limit=20&offset=0';\n              fetch(proxyUrl + targetUrl, {\n                method: \"GET\",\n                mode: 'cors',\n                headers: myHeaders\n              }).then(res => res.json()).then(result => {\n                setParcels(result.data.parcels);\n                setTotalParcels(result.data.parcels.length);\n                setLoading(false);\n              }, error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current Parcels\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = parcels.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    parcels: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalParcels,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default NominationAssetCards;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","NominationAssetCards","props","userManaBalance","parcels","setParcels","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalParcels","setTotalParcels","myHeaders","Headers","append","fetchParcels","proxyUrl","targetUrl","fetch","method","mode","headers","then","res","json","result","data","length","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA,oBAE7BN,QAAQ,CAAC,EAAD,CAFqB;AAAA,QAEpDO,OAFoD;AAAA,QAE3CC,UAF2C;;AAAA,qBAG7BR,QAAQ,CAAC,KAAD,CAHqB;AAAA,QAGpDS,OAHoD;AAAA,QAG3CC,UAH2C;;AAAA,qBAIrBV,QAAQ,CAAC,CAAD,CAJa;AAAA,QAIpDW,WAJoD;AAAA,QAIvCC,cAJuC;;AAAA,qBAKlCZ,QAAQ,CAAC,CAAD,CAL0B;AAAA,QAKpDa,cALoD;;AAAA,qBAMnBb,QAAQ,EANW;AAAA,QAMpDc,YANoD;AAAA,QAMtCC,eANsC,kBAO7D;;;AACEd,EAAAA,SAAS,CACP,MAAM;AACF,UAAMe,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;;AAEA,UAAMC,YAAY;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,QADe,GACJ,sCADI,EAErBC,SAFqB,GAET,qGAFS;AAGrBC,cAAAA,KAAK,CAACF,QAAQ,GAAGC,SAAZ,EACH;AACEE,gBAAAA,MAAM,EAAE,KADV;AAEEC,gBAAAA,IAAI,EAAE,MAFR;AAGEC,gBAAAA,OAAO,EAACT;AAHV,eADG,CAAL,CAMGU,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH,CAQKG,MAAD,IAAY;AACVrB,gBAAAA,UAAU,CAACqB,MAAM,CAACC,IAAP,CAAYvB,OAAb,CAAV;AACAQ,gBAAAA,eAAe,CAACc,MAAM,CAACC,IAAP,CAAYvB,OAAZ,CAAoBwB,MAArB,CAAf;AACArB,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,eAZL,EAaKsB,KAAD,IAAW;AACTtB,gBAAAA,UAAU,CAAC,IAAD,CAAV,EACAsB,KADA;AAED,eAhBL;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZb,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAuBJA,IAAAA,YAAY;AACb,GA7BQ,EA6BN,EA7BM,CAAT,CAR2D,CAwC3D;;AACA,QAAMc,iBAAiB,GAAGtB,WAAW,GAAGE,cAAxC;AACA,QAAMqB,kBAAkB,GAAGD,iBAAiB,GAAGpB,cAA/C;AACA,QAAMsB,cAAc,GAAG5B,OAAO,CAAC6B,KAAR,CAAcF,kBAAd,EAAkCD,iBAAlC,CAAvB,CA3C2D,CA6C3D;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAI1B,cAAc,CAAC0B,UAAD,CAA7C;;AAEA,SACE,4BACE,MAAC,WAAD;AACE,IAAA,OAAO,EAAEH,cADX;AAEE,IAAA,OAAO,EAAE1B,OAFX;AAGE,IAAA,KAAK,EAAEJ,KAHT;AAIE,IAAA,eAAe,EAAEC,eAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,UAAD;AACE,IAAA,WAAW,EAAGK,WADhB;AAEE,IAAA,cAAc,EAAEE,cAFlB;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,QAAQ,EAAEuB,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAgBD,CAhED;;AAkEA,eAAejC,oBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n\r\nconst NominationAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [parcels, setParcels] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalParcels, setTotalParcels] = useState();\r\n//'../api.DecentralandApi.json'\r\n  useEffect(\r\n    () => {\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n        const fetchParcels = async () => {\r\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n        targetUrl = 'https://api.decentraland.org/v1/parcels?status=open&sort_by=price&sort_order=desc&limit=20&offset=0'\r\n        fetch(proxyUrl + targetUrl,\r\n          {\r\n            method: \"GET\",\r\n            mode: 'cors',\r\n            headers:myHeaders\r\n          })\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              setParcels(result.data.parcels);\r\n              setTotalParcels(result.data.parcels.length)\r\n              setLoading(false); \r\n            },\r\n            (error) => {\r\n              setLoading(true),\r\n              error;\r\n            }\r\n        ) \r\n      }\r\n\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current Parcels\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = parcels.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        parcels={currentParcels} \r\n        loading={loading} \r\n        props={props} \r\n        userManaBalance={userManaBalance}\r\n      />\r\n      <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalParcels}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NominationAssetCards;"]},"metadata":{},"sourceType":"module"}