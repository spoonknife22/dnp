{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\NominationDetailsLink.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { Button } from \"shards-react\";\n\nconst NominationDetailsLink = ({\n  parcel,\n  getTokenId,\n  tokenIdState,\n  txSuccessful\n}) => {\n  _s();\n\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState();\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = async () => {\n      //const [loading, setLoading] = useState(false);\n      const graphql = JSON.stringify({\n        query: `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\n      });\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n      fetch(proxyUrl + targetUrl, {\n        method: \"POST\",\n        headers: myHeaders,\n        body: graphql,\n        variables: {},\n        redirect: 'follow'\n      }).then(result => result.json()).then(result => {\n        const parcelData = result.data.parcels[0];\n        const gotTokenId = parcelData.tokenId;\n        setTokenId(parcelData.tokenId); //getTokenId(tokenId);\n      });\n    };\n\n    console.log(tokenId);\n    fetchDetailsLink(); //getTokenId(tokenId);\n  }, []);\n  return __jsx(Accordion, {\n    defaultActiveKey: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \" \", console.log(tokenIdState), __jsx(Accordion.Toggle, {\n    as: Button,\n    variant: \"link\",\n    eventKey: \"0\",\n    outline: true,\n    theme: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Asset Details\")), __jsx(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mt-3 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: getTokenId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }\n  }, \"Token\")), __jsx(\"a\", {\n    href: `https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/`,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Decentraland\"))))));\n};\n\n_s(NominationDetailsLink, \"B2jDglxvmBSP/kOBgaBu8m6M59U=\");\n\n_c = NominationDetailsLink;\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.tokenId,\n  txSuccessful: state.txSuccessful\n}); // const getTokenId = (tokenId) => ({ type: \"TOKEN_ID_FETCH\", tokenId:tokenId });\n\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: tokenId => dispatch({\n    type: \"TOKEN_ID_FETCH\",\n    tokenId: tokenId\n  })\n}); // const getTokenId = (tokenId) => ({ type: \"TOKEN_ID_FETCH\", tokenId:tokenId });\n// const mapDispatchToProps = (dispatch) => ({\n//   getTokenId: () =>  dispatch(getTokenId())\n// });\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationDetailsLink\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/NominationDetailsLink.js"],"names":["React","useState","useEffect","connect","Accordion","Button","NominationDetailsLink","parcel","getTokenId","tokenIdState","txSuccessful","tokenId","setTokenId","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","result","json","parcelData","data","parcels","gotTokenId","console","log","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { Button } from \"shards-react\";\r\n\r\nconst NominationDetailsLink = ({ parcel, getTokenId, tokenIdState, txSuccessful }) => { \r\n  \r\n\r\n  const [tokenId, setTokenId] = useState();\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n \r\n  const fetchDetailsLink = async () => {\r\n  //const [loading, setLoading] = useState(false);\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n  .then(result => result.json())\r\n  .then((result) => {\r\n        const parcelData = result.data.parcels[0];\r\n        const gotTokenId = (parcelData.tokenId);\r\n        setTokenId(parcelData.tokenId)\r\n        //getTokenId(tokenId);\r\n    })\r\n  };\r\nconsole.log(tokenId)\r\nfetchDetailsLink();\r\n//getTokenId(tokenId);\r\n  }, []);\r\n\r\nreturn (\r\n    <Accordion defaultActiveKey=\"1\">\r\n      <div> {console.log(tokenIdState)}\r\n        <Accordion.Toggle as={Button}  variant=\"link\" eventKey=\"0\" outline theme=\"light\">\r\n        <div>Asset Details</div>\r\n        </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <div className=\"p-3 mt-3 border rounded\">\r\n              <div>\r\n              <div>\r\n                  <Button onClick={getTokenId}>Token</Button>\r\n              </div>\r\n                <a href={`https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/`}  target=\"_blank\">Decentraland</a>\r\n              </div>\r\n            </div>\r\n          </Accordion.Collapse>\r\n      </div> \r\n    </Accordion>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tokenIdState: state.tokenId,\r\n  txSuccessful: state.txSuccessful,\r\n})\r\n\r\n\r\n// const getTokenId = (tokenId) => ({ type: \"TOKEN_ID_FETCH\", tokenId:tokenId });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTokenId: (tokenId) =>  dispatch({ type: \"TOKEN_ID_FETCH\", tokenId:tokenId })\r\n});\r\n\r\n\r\n// const getTokenId = (tokenId) => ({ type: \"TOKEN_ID_FETCH\", tokenId:tokenId });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   getTokenId: () =>  dispatch(getTokenId())\r\n// });\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);\r\n\r\n"]},"metadata":{},"sourceType":"module"}