{"ast":null,"code":"//import { EventActions, drizzleSagas } from \"@drizzle/store\";\nimport { EventActions, drizzleSagas } from \"drizzle\";\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst GET_TOKEN_ID = 'GET_TOKEN_ID';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = `${transactionHash}`;\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = `${message}`;\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n} // const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_PROCESSING_DONE\n  });\n}\n\nfunction* fetchTokenId(action) {\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const [tokenId, setTokenId] = useState();\n  const [loading, setLoading] = useState(false);\n  const graphql = JSON.stringify({\n    query: `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\n  });\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n  fetch(proxyUrl + targetUrl, {\n    method: \"POST\",\n    headers: myHeaders,\n    body: graphql,\n    variables: {},\n    redirect: 'follow'\n  }).then(res => res.json()).then(result => {\n    const parcelData = result.data.parcels[0];\n    const gotTokenId = parcelData.tokenId;\n    setTokenId(gotTokenId);\n  });\n  yield put({\n    type: GET_TOKEN_ID,\n    tokenId: 2\n  });\n} //const drizzleSagas;\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield takeLatest('GET_TOKEN_ID', fetchTokenId);\n  yield all(drizzleSagas.map(saga => fork(saga)));\n}\n\nexport const cappSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","TX_PROCESSING","TX_PROCESSING_DONE","GET_TOKEN_ID","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","info","TOP_RIGHT","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","fetchTokenId","myHeaders","Headers","append","tokenId","setTokenId","useState","loading","setLoading","graphql","JSON","stringify","query","parcel","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","gotTokenId","appRootSaga","map","saga","cappSagas"],"mappings":"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","sourcesContent":["\r\n//import { EventActions, drizzleSagas } from \"@drizzle/store\";\r\nimport { EventActions, drizzleSagas } from \"drizzle\";\r\n\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst GET_TOKEN_ID = 'GET_TOKEN_ID';\r\n \r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\nfunction* txSuccessful() {\r\n  yield put({ type: TX_PROCESSING_DONE});\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction* fetchTokenId(action) {\r\n\r\nconst myHeaders = new Headers();  \r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\nconst [tokenId, setTokenId] = useState();\r\nconst [loading, setLoading] = useState(false);\r\n\r\nconst graphql= JSON.stringify({ query: \r\n`{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\ntargetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\nfetch(proxyUrl + targetUrl, {\r\n  method: \"POST\",\r\n  headers:myHeaders,  \r\n  body:graphql, variables:{},\r\n  redirect: 'follow'\r\n})\r\n  .then(res => res.json())\r\n  .then(\r\n    (result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      const gotTokenId = parcelData.tokenId;\r\n      setTokenId(gotTokenId);\r\n  });\r\n  yield put({ type: GET_TOKEN_ID, tokenId: 2});\r\n\r\n} \r\n\r\n//const drizzleSagas;\r\n\r\n// app root saga\r\nfunction* appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('GET_TOKEN_ID', fetchTokenId);\r\n  yield all(\r\n   drizzleSagas.map(saga => fork(saga))\r\n  );\r\n}\r\n\r\nexport const cappSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}