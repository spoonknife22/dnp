{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\ExpCardFtrBtn.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Web3 from \"web3\";\nimport { Loader } from 'rimble-ui';\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\nimport NominationModal from '../modals/NominationModal';\nimport ExpiredWDModal from '../modals/ExpiredWDModal';\nimport FundingModal from '../modals/FundingModal.js';\nimport SaleModal from '../modals/SaleModal.js';\nimport SoldModal from '../modals/SoldModal';\nimport PaidOutModal from '../modals/PaidOutModal.js';\nimport PurchaseModal from '../modals/PurchaseModal.js';\nimport NominationDetailsLink from '../NominationDetailsLink.js';\nimport Moment from \"react-moment\";\n\nconst ExpCardFtrBtn = ({\n  props,\n  userManaBalance,\n  getSoldStatus,\n  nftAddress,\n  expiresAt,\n  assetPrice,\n  tokenId,\n  orderId,\n  getOrderId,\n  orderStatus\n}) => {\n  const _useState = useState(),\n        isStatus = _useState[0],\n        setStatus = _useState[1];\n\n  const _useState2 = useState(),\n        isContractOrderId = _useState2[0],\n        setContractOrderId = _useState2[1];\n\n  const _useState3 = useState(),\n        isOrderStatus = _useState3[0],\n        setOrderStatus = _useState3[1];\n\n  const _useState4 = useState(false),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const oderStatusCall = orderId => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {id:\\\"\".concat(orderId, \"\\\",category:parcel }) {\\n          status\\n        }\\n      }\")\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              setOrderStatus(result.data.orders[0].status);\n              setLoading(false);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), error => {\n      return error;\n    });\n  };\n\n  const fetchProposals = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var proposal, proposalAddress, proposalBalance, propData, statusString, status, soldStatus;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController.methods.deployedProposals(\"\".concat(tokenId)).call();\n\n          case 2:\n            proposal = _context2.sent;\n\n            if (!proposal) {\n              _context2.next = 22;\n              break;\n            }\n\n            _context2.next = 6;\n            return props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(\"\".concat(tokenId)).call();\n\n          case 6:\n            proposalAddress = _context2.sent;\n            _context2.next = 9;\n            return props.drizzle.contracts.MANAToken.methods.balanceOf(\"\".concat(proposalAddress)).call();\n\n          case 9:\n            proposalBalance = _context2.sent;\n            _context2.next = 12;\n            return props.drizzle.contracts.ProposalController.methods.getPropData(\"\".concat(proposalAddress)).call();\n\n          case 12:\n            propData = _context2.sent;\n            statusString = propData[0];\n            setStatus(statusString.toString());\n            status = propData[0];\n            getOrderId(propData[2]);\n            setContractOrderId(propData[2]);\n            oderStatusCall(propData[2]); //status 4\n\n            if (status === '4') {\n              //Production code to ensure sale went through and payout can be run\n              //if(proposalBalance > assetPrice && isOrderStatus === 'sold'){\n              if (proposalBalance > assetPrice) {\n                soldStatus = '6';\n                getSoldStatus(proposalBalance, soldStatus);\n                setStatus('6');\n              } else {\n                setStatus(status);\n                getOrderId(orderId); //Testing award Asset\n                //setStatus('10')\n              }\n            } //status 4 End\n            else {\n                setStatus(status);\n                getOrderId(orderId);\n              }\n\n            _context2.next = 23;\n            break;\n\n          case 22:\n            if (!proposal) {\n              setStatus();\n              getOrderId(orderId);\n              setContractOrderId();\n            }\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchProposals() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(() => {\n    fetchProposals();\n  }, [tokenId]); // if(isStatus === '0' && `\"${orderId}\"` === `\"${isContractOrderId}\"`){\n\n  if (isStatus === '0') {\n    //0-FUNDING\n    return __jsx(CardFooter, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, __jsx(ExpiredWDModal, {\n      nftAddress: nftAddress,\n      tokenId: tokenId,\n      assetPrice: assetPrice,\n      expiresAt: expiresAt,\n      props: props,\n      userManaBalance: userManaBalance,\n      orderStatus: isOrderStatus,\n      orderId: isContractOrderId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }));\n  } //else if(isStatus === '0' && `'${isContractOrderId}'` !== 'undifined') {\n  else if (isStatus === '0' && isOrderStatus === 'cancelled' || isOrderStatus === 'sold') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, __jsx(NominationModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        orderId: orderId,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '1') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }\n      }, __jsx(PurchaseModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '4' && orderStatus === 'cancelled') {\n      //1st Sale Expired\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, __jsx(SaleModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        contractStatus: isStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '6') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }\n      }, __jsx(SoldModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 19\n        }\n      }));\n    } else if (isStatus === '10' && orderStatus === 'cancelled') {\n      //2st Sale Expired\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }\n      }, __jsx(SaleModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        contractStatus: isStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '7') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      }, __jsx(PaidOutModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 19\n        }\n      }));\n    } else {\n      //Expired 2nd Sale test\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }, __jsx(SaleModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        contractStatus: isStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }\n      }));\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getOrderId: storedOrderId => dispatch({\n    type: \"GOT_STORED_ORDER_ID\",\n    storedOrderId: storedOrderId\n  })\n});\n\nexport default connect(null, mapDispatchToProps)(ExpCardFtrBtn);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/ExpCardFtrBtn.js"],"names":["React","useState","useEffect","connect","Web3","Loader","Card","CardHeader","CardBody","CardFooter","CardTitle","Button","Row","NominationModal","ExpiredWDModal","FundingModal","SaleModal","SoldModal","PaidOutModal","PurchaseModal","NominationDetailsLink","Moment","ExpCardFtrBtn","props","userManaBalance","getSoldStatus","nftAddress","expiresAt","assetPrice","tokenId","orderId","getOrderId","orderStatus","isStatus","setStatus","isContractOrderId","setContractOrderId","isOrderStatus","setOrderStatus","loading","setLoading","oderStatusCall","myHeaders","Headers","append","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","orders","status","error","fetchProposals","drizzle","contracts","ProposalController","methods","deployedProposals","call","proposal","proposalTokenIdMap","proposalAddress","MANAToken","balanceOf","proposalBalance","getPropData","propData","statusString","toString","soldStatus","mapDispatchToProps","dispatch","storedOrderId","type"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from \"web3\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\r\nimport NominationModal from '../modals/NominationModal';\r\nimport ExpiredWDModal from '../modals/ExpiredWDModal';\r\nimport FundingModal from '../modals/FundingModal.js';\r\nimport SaleModal from '../modals/SaleModal.js';\r\nimport SoldModal from '../modals/SoldModal';\r\nimport PaidOutModal from '../modals/PaidOutModal.js';\r\nimport PurchaseModal from '../modals/PurchaseModal.js';\r\nimport NominationDetailsLink from '../NominationDetailsLink.js';\r\nimport Moment from \"react-moment\";\r\n\r\n\r\nconst ExpCardFtrBtn = ({ props, userManaBalance, getSoldStatus, nftAddress, expiresAt, assetPrice, tokenId, orderId, getOrderId, orderStatus }) => {\r\n\r\n  const [isStatus, setStatus] = useState();\r\n  const [isContractOrderId, setContractOrderId] = useState();\r\n  const [isOrderStatus, setOrderStatus] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const oderStatusCall = (orderId) => {\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n \r\n  \r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {id:\"${orderId}\",category:parcel }) {\r\n          status\r\n        }\r\n      }`\r\n  })\r\n  \r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then( async (result) => {\r\n        setOrderStatus(result.data.orders[0].status);\r\n        setLoading(false); \r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  }\r\n\r\n\r\n  const fetchProposals = async () => {\r\n    const proposal = await props.drizzle.contracts.ProposalController.methods.deployedProposals(`${tokenId}`).call();\r\n    if(proposal){\r\n      const proposalAddress = await props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(`${tokenId}`).call();\r\n      const proposalBalance = await props.drizzle.contracts.MANAToken.methods.balanceOf(`${proposalAddress}`).call();\r\n      const propData = await props.drizzle.contracts.ProposalController.methods.getPropData(`${proposalAddress}`).call();\r\n      const statusString = (propData[0])\r\n      setStatus(statusString.toString());\r\n      const status = propData[0];\r\n      getOrderId(propData[2]);\r\n      setContractOrderId(propData[2]);\r\n      oderStatusCall(propData[2]);\r\n\r\n      //status 4\r\n      if(status === '4'){\r\n        //Production code to ensure sale went through and payout can be run\r\n        //if(proposalBalance > assetPrice && isOrderStatus === 'sold'){\r\n        if(proposalBalance > assetPrice){  \r\n          const soldStatus = '6';\r\n          getSoldStatus(proposalBalance, soldStatus);\r\n          setStatus('6');\r\n        }\r\n        else{\r\n            setStatus(status);\r\n            getOrderId(orderId);\r\n            //Testing award Asset\r\n            //setStatus('10')\r\n        }\r\n      }\r\n      //status 4 End\r\n        else {\r\n          setStatus(status);\r\n          getOrderId(orderId);\r\n        }\r\n      }\r\n      else if (!proposal){\r\n        setStatus()\r\n        getOrderId(orderId);\r\n        setContractOrderId()\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      fetchProposals();\r\n    }, [tokenId]);\r\n\r\n\r\n      // if(isStatus === '0' && `\"${orderId}\"` === `\"${isContractOrderId}\"`){\r\n      if(isStatus === '0'){\r\n        //0-FUNDING\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <ExpiredWDModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt}  \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={isOrderStatus}\r\n                orderId={isContractOrderId}\r\n              />\r\n            </CardFooter> \r\n          )\r\n        }\r\n      //else if(isStatus === '0' && `'${isContractOrderId}'` !== 'undifined') {\r\n      else if(isStatus === '0' &&  isOrderStatus === 'cancelled' || isOrderStatus === 'sold') {\r\n        return (\r\n            <CardFooter className=\"p-0\"> \r\n              <NominationModal\r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                orderId={orderId}\r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n        )\r\n      }\r\n      else if(isStatus === '1') {\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <PurchaseModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n          )\r\n      }\r\n      else if(isStatus === '4' && orderStatus === 'cancelled') {\r\n        //1st Sale Expired\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <SaleModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n                contractStatus = {isStatus}\r\n              />\r\n            </CardFooter> \r\n        )\r\n    }\r\n      else if(isStatus === '6') {\r\n        return (\r\n                <CardFooter className=\"p-0\">\r\n                  <SoldModal \r\n                    nftAddress={nftAddress}\r\n                    tokenId={tokenId}\r\n                    assetPrice={assetPrice}\r\n                    expiresAt={expiresAt} \r\n                    props={props} \r\n                    userManaBalance={userManaBalance}\r\n                    orderStatus={orderStatus}\r\n                    orderId={orderId}\r\n                    storedOrderId={isContractOrderId}\r\n                    prevOrderStatus={isOrderStatus}\r\n                  />\r\n                </CardFooter> \r\n            )\r\n      }\r\n      else if(isStatus === '10' && orderStatus === 'cancelled') {\r\n        //2st Sale Expired\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <SaleModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n                contractStatus = {isStatus}\r\n              />\r\n            </CardFooter> \r\n        )\r\n    }\r\n      else if(isStatus === '7') {\r\n        return (\r\n                <CardFooter className=\"p-0\">\r\n                  <PaidOutModal\r\n                    nftAddress={nftAddress}\r\n                    tokenId={tokenId}\r\n                    assetPrice={assetPrice}\r\n                    expiresAt={expiresAt} \r\n                    props={props} \r\n                    userManaBalance={userManaBalance}\r\n                    orderStatus={orderStatus}\r\n                    orderId={orderId}\r\n                    storedOrderId={isContractOrderId}\r\n                    prevOrderStatus={isOrderStatus}\r\n                  />\r\n                </CardFooter> \r\n            )\r\n      }\r\n      else{\r\n        //Expired 2nd Sale test\r\n        return (\r\n          <CardFooter className=\"p-0\">\r\n    \r\n              <SaleModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n                contractStatus = {isStatus}\r\n              />\r\n        \r\n            {/* <NominationModal\r\n              nftAddress={nftAddress}\r\n              tokenId={tokenId}\r\n              assetPrice={assetPrice}\r\n              expiresAt={expiresAt} \r\n              props={props} \r\n              orderId={orderId}\r\n              userManaBalance={userManaBalance}\r\n              orderStatus={orderStatus}\r\n              storedOrderId={isContractOrderId}\r\n              prevOrderStatus={isOrderStatus}\r\n            /> */}\r\n          </CardFooter> \r\n        )\r\n      }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    getOrderId: (storedOrderId) =>  dispatch({ type: \"GOT_STORED_ORDER_ID\", storedOrderId: storedOrderId })\r\n  });\r\n    \r\n    \r\n  export default connect(null, mapDispatchToProps)(ExpCardFtrBtn);"]},"metadata":{},"sourceType":"module"}