{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominationAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const currentTime = moment().valueOf();\n  const graphql = JSON.stringify({\n    query: \"{\\n        nfts(first: 8, orderBy: searchOrderPrice, where:{ category: parcel, searchOrderStatus: open,searchOrderExpiresAt_gt:\".concat(currentTime, \"}) {\\n          \\n          parcel {\\n            x,\\n            y, \\n            tokenId\\n          }\\n          activeOrder {\\n            price\\n            expiresAt\\n            nftAddress\\n            txHash\\n          }\\n        }\\n      }\")\n  });\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  var ordersGQL, ordersFiltered, proposalContract, depositInfoLength, propDat, i, fundingArray, fundedArray, purchasedArray, forSaleArray, soldArray, paidOutArray, propData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.nfts;\n\n                      case 2:\n                        ordersGQL = _context.sent;\n                        _context.next = 5;\n                        return result.data.nfts;\n\n                      case 5:\n                        ordersFiltered = _context.sent;\n                        _context.next = 8;\n                        return props.drizzle.contracts.ProposalController;\n\n                      case 8:\n                        proposalContract = _context.sent;\n                        _context.next = 11;\n                        return proposalContract.methods.getDeployedProposal().call();\n\n                      case 11:\n                        depositInfoLength = _context.sent;\n                        propDat = proposalContract.methods.getPropData(0xC5dCF98dd67B9F7F4422d1bEB26EFec4B4400a29).call();\n                        console.log(propDat);\n                        fundingArray = [];\n                        fundedArray = [];\n                        purchasedArray = [];\n                        forSaleArray = [];\n                        soldArray = [];\n                        paidOutArray = [];\n                        i = 0;\n\n                      case 21:\n                        if (!(i < depositInfoLength)) {\n                          _context.next = 29;\n                          break;\n                        }\n\n                        _context.next = 24;\n                        return proposalContract.methods.depositersArray([i]).call();\n\n                      case 24:\n                        propData = _context.sent;\n\n                        if (propData[0] == 0) {\n                          fundingArray.push([i, propData[1]]);\n                        } else if (propData[0] == 1) {\n                          fundedArray.push([i, propData[1]]);\n                        } else if (propData[0] == 3) {\n                          purchasedArray.push([i, propData[1]]);\n                        } else if (propData[0] == 4) {\n                          forSaleArray.push([i, propData[1]]);\n                        } else if (propData[0] == 5) {\n                          soldArray.push([i, propData[1]]);\n                        } else if (propData[0] == 7) {\n                          paidOutArray.push([i, propData[1]]);\n                        }\n\n                      case 26:\n                        i++;\n                        _context.next = 21;\n                        break;\n\n                      case 29:\n                        console.log(fundingArray);\n                        setOrders(ordersFiltered);\n                        setTotalOrders(ordersFiltered.length);\n                        setLoading(false);\n\n                      case 33:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 8\n    }\n  }));\n};\n\n_s(NominationAssetCards, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominationAssetCards;\nexport default NominationAssetCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationAssetCards\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","NominationAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","currentTime","valueOf","graphql","JSON","stringify","query","fetchParcels","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","nfts","ordersGQL","ordersFiltered","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedProposal","call","depositInfoLength","propDat","getPropData","console","log","fundingArray","fundedArray","purchasedArray","forSaleArray","soldArray","paidOutArray","i","depositersArray","propData","push","length","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\nconst NominationAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const currentTime= moment().valueOf();\r\n  const graphql= JSON.stringify({ query: \r\n      `{\r\n        nfts(first: 8, orderBy: searchOrderPrice, where:{ category: parcel, searchOrderStatus: open,searchOrderExpiresAt_gt:${currentTime}}) {\r\n          \r\n          parcel {\r\n            x,\r\n            y, \r\n            tokenId\r\n          }\r\n          activeOrder {\r\n            price\r\n            expiresAt\r\n            nftAddress\r\n            txHash\r\n          }\r\n        }\r\n      }`\r\n    })\r\n\r\n  useEffect(\r\n    () => {\r\n    \r\n    const fetchParcels = async () => {\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n          const ordersGQL = await result.data.nfts;\r\n          const ordersFiltered = await result.data.nfts;\r\n          //const tokenIdArray = await props.drizzle.contracts.ProposalController.methods.getDeployedProposal().call();\r\n          //const ordersFiltered = ordersGQL.filter(item => !tokenIdArray.includes(item.parcel.tokenId));\r\n         const proposalContract = await props.drizzle.contracts.ProposalController;\r\n         const depositInfoLength = await proposalContract.methods.getDeployedProposal().call();\r\n         const propDat = proposalContract.methods.getPropData(0xC5dCF98dd67B9F7F4422d1bEB26EFec4B4400a29).call();\r\n         console.log(propDat)\r\n         let i;\r\n         let fundingArray = [];\r\n         let fundedArray = [];\r\n         let purchasedArray = [];\r\n         let forSaleArray = [];\r\n         let soldArray = [];\r\n         let paidOutArray = [];\r\n       \r\n         for (i = 0; i < depositInfoLength; i++) {\r\n           const propData = await proposalContract.methods.depositersArray([i]).call();\r\n           if(propData[0] == 0){\r\n             fundingArray.push([i, propData[1]]);\r\n           }\r\n           else if(propData[0] == 1){\r\n             fundedArray.push([i, propData[1]]);\r\n           }\r\n           else if(propData[0] == 3){\r\n             purchasedArray.push([i, propData[1]]);\r\n           }\r\n           else if(propData[0] == 4){\r\n             forSaleArray.push([i, propData[1]]);\r\n           }\r\n           else if(propData[0] == 5){\r\n             soldArray.push([i, propData[1]]);\r\n           }\r\n           else if(propData[0] == 7){\r\n             paidOutArray.push([i, propData[1]]);\r\n           }\r\n       }\r\n    \r\n          console.log(fundingArray)\r\n        \r\n          setOrders(ordersFiltered);\r\n          setTotalOrders(ordersFiltered.length)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominationAssetCards;"]},"metadata":{},"sourceType":"module"}