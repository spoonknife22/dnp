{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\nexport const fetchPropAddr = store => next => /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(action) {\n    var drizzle, drizzleState, contract, dataKey, displayData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(action.type === GET_PROP_ADDRESS)) {\n            _context.next = 13;\n            break;\n          }\n\n          drizzle = action.drizzle;\n          drizzleState = action.drizzleState;\n\n          if (!drizzleState.drizzleStatus.initialized) {\n            _context.next = 12;\n            break;\n          }\n\n          //const dataKey = contract.methods['getPropTokenIdMap'].cacheCall(action.tokenId)\n          contract = drizzle.contracts.ProposalController; //const propAddress = await contract.methods[\"getPropTokenIdMap\"]('115792089237316195423570985008687907844762925492617102452873218822118924353538').call();\n\n          _context.next = 7;\n          return contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\n\n        case 7:\n          dataKey = _context.sent;\n          _context.next = 10;\n          return drizzleState.contracts.ProposalController.getPropTokenIdMap[dataKey];\n\n        case 10:\n          displayData = _context.sent;\n          //  const use =  displayData && displayData.value;\n          console.log(displayData); // 0x91dedb9b3e0500e12b67f27e0f82bbfb13aec9e8dc63543f40dd7a28631db3c5\n          //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\n\n        case 12:\n          return _context.abrupt(\"return\", 'Loading...');\n\n        case 13:\n          return _context.abrupt(\"return\", next(action));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","put","takeEvery","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","info","TOP_RIGHT","fetchPropAddr","drizzle","drizzleState","drizzleStatus","initialized","contract","contracts","ProposalController","methods","cacheCall","dataKey","getPropTokenIdMap","displayData","console","log"],"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAT,IAAAA,KAAK,CAACW,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBT,YAAY,CAACmB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,aAAMH,OAAN,CAAb;AACArB,MAAAA,KAAK,CAACyB,IAAN,CAAWD,OAAX,EAAoB;AAAEZ,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAea;AAA3B,OAApB;AACF;AACF;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;AAYP,OAAO,MAAMoB,aAAa,GAAGtB,KAAK,IAAIC,IAAI;AAAA,qEAAI,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gBACxCA,MAAM,CAACC,IAAP,KAAgBL,gBADwB;AAAA;AAAA;AAAA;;AAEpCyB,UAAAA,OAFoC,GAE1BrB,MAAM,CAACqB,OAFmB;AAGpCC,UAAAA,YAHoC,GAGrBtB,MAAM,CAACsB,YAHc;;AAAA,eAItCA,YAAY,CAACC,aAAb,CAA2BC,WAJW;AAAA;AAAA;AAAA;;AAKxC;AACMC,UAAAA,QANkC,GAMvBJ,OAAO,CAACK,SAAR,CAAkBC,kBANK,EAQxC;;AARwC;AAAA,iBAUpBF,QAAQ,CAACG,OAAT,CAAiB,mBAAjB,EAAsCC,SAAtC,CAAgD,gFAAhD,CAVoB;;AAAA;AAUpCC,UAAAA,OAVoC;AAAA;AAAA,iBAWhBR,YAAY,CAACI,SAAb,CAAuBC,kBAAvB,CAA0CI,iBAA1C,CAA4DD,OAA5D,CAXgB;;AAAA;AAWpCE,UAAAA,WAXoC;AAY1C;AAECC,UAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAdyC,CAezC;AAEC;;AAjBwC;AAAA,2CAmBjC,YAnBiC;;AAAA;AAAA,2CAqBrCjC,IAAI,CAACC,MAAD,CArBiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAAA;AAAA;AAAA;AAAA,GAAnC","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\nimport { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const fetchPropAddr = store => next => async (action) => {\r\n  if (action.type === GET_PROP_ADDRESS) {\r\n    const drizzle = action.drizzle;\r\n    const drizzleState = action.drizzleState;\r\n    if (drizzleState.drizzleStatus.initialized) {\r\n      //const dataKey = contract.methods['getPropTokenIdMap'].cacheCall(action.tokenId)\r\n      const contract = drizzle.contracts.ProposalController;\r\n\r\n      //const propAddress = await contract.methods[\"getPropTokenIdMap\"]('115792089237316195423570985008687907844762925492617102452873218822118924353538').call();\r\n\r\n    const dataKey = await contract.methods[\"getPropTokenIdMap\"].cacheCall('115792089237316195423570985008687907844762925492617102452873218822118924353538');\r\n    const displayData = await drizzleState.contracts.ProposalController.getPropTokenIdMap[dataKey]\r\n    //  const use =  displayData && displayData.value;\r\n\r\n     console.log(displayData)\r\n     // 0x91dedb9b3e0500e12b67f27e0f82bbfb13aec9e8dc63543f40dd7a28631db3c5\r\n  \r\n      //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\r\n      }\r\n      return 'Loading...'\r\n    }\r\n  return next(action)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}