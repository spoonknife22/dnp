{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\forms\\\\InterMediateForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass InterMediateForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, drizzle, drizzleState, propAddress, tokenId, state, propContract, dataKey;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this$props = _this.props, drizzle = _this$props.drizzle, drizzleState = _this$props.drizzleState, propAddress = _this$props.propAddress, tokenId = _this$props.tokenId;\n            state = drizzle.store.getState();\n\n            if (!state.drizzleStatus.initialized) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 5;\n            return drizzle.contracts[\"\".concat(propAddress)];\n\n          case 5:\n            propContract = _context.sent;\n            _context.next = 8;\n            return propContract.methods['getSummary'].cacheCall(tokenId);\n\n          case 8:\n            dataKey = _context.sent;\n\n            _this.setState({\n              dataKey\n            });\n\n            _context.next = 13;\n            break;\n\n          case 12:\n            console.log('loading');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          drizzle = _this$props2.drizzle,\n          propAddress = _this$props2.propAddress;\n    let state = drizzle.store.getState();\n\n    if (state.drizzleStatus.initialized) {\n      // const { drizzle, propAddress } = this.props;\n      const displayData = state.contracts[propAddress].methods['getSummary'][this.state.dataKey];\n      const userId = displayData && displayData.value;\n      console.log(userId);\n    } // console.log(this.state.dataKey)\n    // const { propAddress } = this.props.drizzleState.contracts;\n    // const displayData = this.props.drizzleState.contractspropAddress.getSummary[this.state.dataKey]; \n    // const userId =  displayData && displayData.value;\n\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }\n    }, \"'dddd'\");\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  proposalStorage: state.appReducers.proposalStorage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPropAbi: ProposalStorageAbi => dispatch({\n    type: \"GOT_PROP_ABI\",\n    proposalStorageAbi: ProposalStorageAbi\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/forms/InterMediateForm.js"],"names":["React","Component","connect","InterMediateForm","constructor","props","state","dataKey","componentDidMount","drizzle","drizzleState","propAddress","tokenId","store","getState","drizzleStatus","initialized","contracts","propContract","methods","cacheCall","setState","console","log","render","displayData","userId","value","mapStateToProps","proposalStorage","appReducers","mapDispatchToProps","dispatch","getPropAbi","ProposalStorageAbi","type","proposalStorageAbi"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAIA,MAAMC,gBAAN,SAA+BF,SAA/B,CAAyC;AACvCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAC;AADG,KAAb;AAGD;;AAEIC,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0BACiC,KAAI,CAACH,KADtC,EACfI,OADe,eACfA,OADe,EACNC,YADM,eACNA,YADM,EACQC,WADR,eACQA,WADR,EACqBC,OADrB,eACqBA,OADrB;AAEnBN,YAAAA,KAFmB,GAEXG,OAAO,CAACI,KAAR,CAAcC,QAAd,EAFW;;AAAA,iBAGnBR,KAAK,CAACS,aAAN,CAAoBC,WAHD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIIP,OAAO,CAACQ,SAAR,WAAqBN,WAArB,EAJJ;;AAAA;AAIjBO,YAAAA,YAJiB;AAAA;AAAA,mBAKDA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,SAAnC,CAA6CR,OAA7C,CALC;;AAAA;AAKjBL,YAAAA,OALiB;;AAMvB,YAAA,KAAI,CAACc,QAAL,CAAc;AACZd,cAAAA;AADY,aAAd;;AANuB;AAAA;;AAAA;AAYvBe,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAZuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAcxB;;AAEDC,EAAAA,MAAM,GAAG;AAAA,yBAC0B,KAAKnB,KAD/B;AAAA,UACCI,OADD,gBACCA,OADD;AAAA,UACUE,WADV,gBACUA,WADV;AAEP,QAAIL,KAAK,GAAGG,OAAO,CAACI,KAAR,CAAcC,QAAd,EAAZ;;AACA,QAAIR,KAAK,CAACS,aAAN,CAAoBC,WAAxB,EAAqC;AACnC;AACF,YAAMS,WAAW,GAAGnB,KAAK,CAACW,SAAN,CAAgBN,WAAhB,EAA6BQ,OAA7B,CAAqC,YAArC,EAAmD,KAAKb,KAAL,CAAWC,OAA9D,CAApB;AACA,YAAMmB,MAAM,GAAID,WAAW,IAAIA,WAAW,CAACE,KAA3C;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACC,KARM,CASP;AACA;AACA;AACA;;;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AAKD;;AA1CsC;;AA8CzC,MAAME,eAAe,GAAItB,KAAD,KAAY;AAClCuB,EAAAA,eAAe,EAAEvB,KAAK,CAACwB,WAAN,CAAkBD;AADD,CAAZ,CAAxB;;AAIA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,UAAU,EAAGC,kBAAD,IAAyBF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,kBAAkB,EAACF;AAA3C,GAAD;AADL,CAAf,CAA3B;;AAIA,eAAehC,OAAO,CAAC0B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C5B,gBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n   \r\nclass InterMediateForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataKey:null\r\n    }\r\n  }\r\n\r\n async componentDidMount() {   \r\n    const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n    let state = drizzle.store.getState();\r\n    if (state.drizzleStatus.initialized) {\r\n    const propContract = await drizzle.contracts[`${propAddress}`];\r\n    const dataKey = await propContract.methods['getSummary'].cacheCall(tokenId);\r\n    this.setState({\r\n      dataKey\r\n    });\r\n   \r\n  }\r\n  else{\r\n    console.log('loading')\r\n  }\r\n  }\r\n  \r\n  render() {\r\n    const { drizzle, propAddress } = this.props;\r\n    let state = drizzle.store.getState();\r\n    if (state.drizzleStatus.initialized) {\r\n      // const { drizzle, propAddress } = this.props;\r\n    const displayData = state.contracts[propAddress].methods['getSummary'][this.state.dataKey]; \r\n    const userId =  displayData && displayData.value;\r\n    console.log(userId)\r\n    }\r\n    // console.log(this.state.dataKey)\r\n    // const { propAddress } = this.props.drizzleState.contracts;\r\n    // const displayData = this.props.drizzleState.contractspropAddress.getSummary[this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n    return (\r\n     <div>\r\n       'dddd'\r\n     </div>\r\n    )\r\n  }\r\n}   \r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  proposalStorage: state.appReducers.proposalStorage\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}