{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nfunction fetchTokenId(action) {\n  return regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCH',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n} // function* txSuccessful() {\n//   yield put({type:'TX_SUCCESSFUL'});\n// }\n// function* txProcessing() {\n//   yield put({type:'TX_BROADCASTED'});\n// }\n\n\nexport default function appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["fetchTokenId","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","action","type","tokenId"],"mappings":"mDAMUA,Y;oDAYeC,W;;AAlBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;;AAEA,SAAUhB,YAAV,CAAwBiB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMZ,GAAG,CAAC;AAAEa,UAAAA,IAAI,EAAE,gBAAR;AAA2BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA1C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAe,SAAUlB,WAAV;AAAA;AAAA;AAAA;AAAA;AAGb,eAAMG,UAAU,CAAC,gBAAD,EAAmBJ,YAAnB,CAAhB;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCH' , tokenId:action.tokenId  });\r\n}\r\n\r\n// function* txSuccessful() {\r\n//   yield put({type:'TX_SUCCESSFUL'});\r\n// }\r\n\r\n// function* txProcessing() {\r\n//   yield put({type:'TX_BROADCASTED'});\r\n// }\r\n\r\nexport default function* appRootSaga() {\r\n  //yield takeLatest('TX_BROADCASTED', txProcessing);\r\n  //yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}