{"ast":null,"code":"import { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\nimport drizzleOptions from \"../EthComponents/drizzleOptions\";\nexport const EVENT_FIRED = 'EVENT_FIRED';\nexport const EVENT_CHANGED = 'EVENT_CHANGED';\nexport const EVENT_ERROR = 'EVENT_ERROR';\nexport const LISTEN_FOR_EVENT = 'LISTEN_FOR_EVENT';\nexport const CONTRACT_INITIALIZING = 'CONTRACT_INITIALIZING';\nexport const CONTRACT_INITIALIZED = 'CONTRACT_INITIALIZED';\nexport const GOT_CONTRACT_VAR = 'GOT_CONTRACT_VAR';\nexport const DELETE_CONTRACT = 'DELETE_CONTRACT';\nexport const CONTRACT_SYNCING = 'CONTRACT_SYNCING';\nexport const CONTRACT_SYNCED = 'CONTRACT_SYNCED';\nexport const CONTRACT_SYNC_IND = 'CONTRACT_SYNC_IND';\nexport const ERROR_CONTRACT_VAR = 'ERROR_CONTRACT_VAR';\nexport const CALL_CONTRACT_FN = 'CALL_CONTRACT_FN';\nexport const SEND_CONTRACT_TX = 'SEND_CONTRACT_TX';\nexport const ADD_CONTRACT = 'ADD_CONTRACT';\nexport const ERROR_ADD_CONTRACT = 'ERROR_ADD_CONTRACT';\nexport const ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING';\nexport const ACCOUNTS_FETCHED = 'ACCOUNTS_FETCHED';\nexport const ACCOUNTS_FAILED = 'ACCOUNTS_FAILED';\nexport const SYNCING_ACCOUNTS = 'SYNCING_ACCOUNTS';\nexport const ACCOUNTS_POLLING = 'ACCOUNTS_POLLING';\nexport const DRIZZLE_INITIALIZED = 'DRIZZLE_INITIALIZED';\nexport const DRIZZLE_INITIALIZING = 'DRIZZLE_INITIALIZING';\nexport const DRIZZLE_FAILED = 'DRIZZLE_FAILED';\n\nconst drizzleMiddleware = drizzleInstance => store => next => action => {\n  const type = action.type;\n\n  if (type === DrizzleActions.DRIZZLE_INITIALIZING) {\n    drizzleInstance = action.drizzle;\n  }\n\n  if (type === AccountsActions.ACCOUNTS_FETCHED && drizzleInstance && drizzleInstance.contractList.length) {\n    const newAccount = action.accounts[0];\n    const oldAccount = drizzleInstance.contractList[0].options.from; // Update `from` fields with newAccount\n\n    if (oldAccount !== newAccount) {\n      drizzleInstance.contractList.forEach(contract => {\n        contract.options.from = newAccount;\n      });\n    }\n  }\n\n  if (type === ContractActions.ADD_CONTRACT && drizzleInstance) {\n    try {\n      const contractConfig = action.contractConfig,\n            events = action.events;\n      drizzleInstance.addContract(contractConfig, events);\n    } catch (error) {\n      console.error('Attempt to add a duplicate contract.\\n', error); // Notify user via\n\n      const notificationAction = {\n        type: ContractActions.ERROR_ADD_CONTRACT,\n        error,\n        attemptedAction: action\n      };\n      store.dispatch(notificationAction); // Don't propogate current action\n\n      return;\n    }\n  }\n\n  return next(action);\n};\n\nexport const initializedMiddleware = drizzleMiddleware(undefined); //CREATE STORE\n\nimport root from './sagas/root';\nimport reducer from './reducers/reducer.js'; //GENERATE STORE\n\nimport appRootSaga from './sagas/appSagas';\nimport appReducer from './reducers/appReducers.js';\nimport rootSagas from './sagas/rootSaga'; //APPMIDDLEWARES\n\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\nconst contractEventNotifier = contractEventSaga;\nconst joinTransactionComplete = joinTransactionSaga;\nconst appMiddlewares = [contractEventNotifier(), joinTransactionComplete]; //GENERATE STORE\n\nconst appReducers = {\n  appReducers: appReducer\n};\nconst appSagas = [appRootSaga]; //CREATE STORE\n\nconst initialState = {\n  contracts: generateContractsInitialState(drizzleOptions)\n};\nconst sagaMiddleware = createSagaMiddleware();\nconst allMiddlewares = [...appMiddlewares, sagaMiddleware, drizzleMiddleware];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...allMiddlewares)));\nsagaMiddleware.run(root); // const store = generateStore({\n//   drizzleOptions,\n//   appReducers,\n//   appSagas,\n//   appMiddlewares,\n//   disableReduxDevTools: false  \n// })\n\nexport default store;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/index.js"],"names":["composeWithDevTools","createSagaMiddleware","createStore","applyMiddleware","compose","DrizzleContext","DrizzleProvider","generateStore","generateContractsInitialState","drizzleOptions","EVENT_FIRED","EVENT_CHANGED","EVENT_ERROR","LISTEN_FOR_EVENT","CONTRACT_INITIALIZING","CONTRACT_INITIALIZED","GOT_CONTRACT_VAR","DELETE_CONTRACT","CONTRACT_SYNCING","CONTRACT_SYNCED","CONTRACT_SYNC_IND","ERROR_CONTRACT_VAR","CALL_CONTRACT_FN","SEND_CONTRACT_TX","ADD_CONTRACT","ERROR_ADD_CONTRACT","ACCOUNTS_FETCHING","ACCOUNTS_FETCHED","ACCOUNTS_FAILED","SYNCING_ACCOUNTS","ACCOUNTS_POLLING","DRIZZLE_INITIALIZED","DRIZZLE_INITIALIZING","DRIZZLE_FAILED","drizzleMiddleware","drizzleInstance","store","next","action","type","DrizzleActions","drizzle","AccountsActions","contractList","length","newAccount","accounts","oldAccount","options","from","forEach","contract","ContractActions","contractConfig","events","addContract","error","console","notificationAction","attemptedAction","dispatch","initializedMiddleware","undefined","root","reducer","appRootSaga","appReducer","rootSagas","contractEventSaga","joinTransactionSaga","contractEventNotifier","joinTransactionComplete","appMiddlewares","appReducers","appSagas","initialState","contracts","sagaMiddleware","allMiddlewares","run"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,uBAAhD;AACA,SAASC,aAAT,EAAwBC,6BAAxB,QAA6D,gBAA7D;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;;AAEP,MAAMC,iBAAiB,GAAGC,eAAe,IAAIC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAAA,QAC9DC,IAD8D,GACrDD,MADqD,CAC9DC,IAD8D;;AAGtE,MAAIA,IAAI,KAAKC,cAAc,CAACR,oBAA5B,EAAkD;AAChDG,IAAAA,eAAe,GAAGG,MAAM,CAACG,OAAzB;AACD;;AAED,MACEF,IAAI,KAAKG,eAAe,CAACf,gBAAzB,IACAQ,eADA,IAEAA,eAAe,CAACQ,YAAhB,CAA6BC,MAH/B,EAIE;AACA,UAAMC,UAAU,GAAGP,MAAM,CAACQ,QAAP,CAAgB,CAAhB,CAAnB;AACA,UAAMC,UAAU,GAAGZ,eAAe,CAACQ,YAAhB,CAA6B,CAA7B,EAAgCK,OAAhC,CAAwCC,IAA3D,CAFA,CAIA;;AACA,QAAIF,UAAU,KAAKF,UAAnB,EAA+B;AAC7BV,MAAAA,eAAe,CAACQ,YAAhB,CAA6BO,OAA7B,CAAqCC,QAAQ,IAAI;AAC/CA,QAAAA,QAAQ,CAACH,OAAT,CAAiBC,IAAjB,GAAwBJ,UAAxB;AACD,OAFD;AAGD;AACF;;AAED,MAAIN,IAAI,KAAKa,eAAe,CAAC5B,YAAzB,IAAyCW,eAA7C,EAA8D;AAC5D,QAAI;AAAA,YACMkB,cADN,GACiCf,MADjC,CACMe,cADN;AAAA,YACsBC,MADtB,GACiChB,MADjC,CACsBgB,MADtB;AAEFnB,MAAAA,eAAe,CAACoB,WAAhB,CAA4BF,cAA5B,EAA4CC,MAA5C;AACD,KAHD,CAGE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADc,CAGd;;AACA,YAAME,kBAAkB,GAAG;AACzBnB,QAAAA,IAAI,EAAEa,eAAe,CAAC3B,kBADG;AAEzB+B,QAAAA,KAFyB;AAGzBG,QAAAA,eAAe,EAAErB;AAHQ,OAA3B;AAKAF,MAAAA,KAAK,CAACwB,QAAN,CAAeF,kBAAf,EATc,CAWd;;AACA;AACD;AACF;;AACD,SAAOrB,IAAI,CAACC,MAAD,CAAX;AACD,CA3CD;;AA6CA,OAAO,MAAMuB,qBAAqB,GAAG3B,iBAAiB,CAAC4B,SAAD,CAA/C,C,CAGP;;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB,C,CAIA;;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iBAAvD;AACA,MAAMC,qBAAqB,GAAGF,iBAA9B;AACA,MAAMG,uBAAuB,GAAGF,mBAAhC;AACA,MAAMG,cAAc,GAAG,CAAEF,qBAAqB,EAAvB,EAA2BC,uBAA3B,CAAvB,C,CAEA;;AACA,MAAME,WAAW,GAAG;AAACA,EAAAA,WAAW,EAAEP;AAAd,CAApB;AACA,MAAMQ,QAAQ,GAAG,CAACT,WAAD,CAAjB,C,CAGA;;AACA,MAAMU,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAEpE,6BAA6B,CAACC,cAAD;AADrB,CAArB;AAIA,MAAMoE,cAAc,GAAG5E,oBAAoB,EAA3C;AAEA,MAAM6E,cAAc,GAAG,CAAC,GAAGN,cAAJ,EAAoBK,cAApB,EAAoC3C,iBAApC,CAAvB;AAEA,MAAME,KAAK,GAAGlC,WAAW,CACnB8D,OADmB,EAEnBW,YAFmB,EAGrB3E,mBAAmB,CACjBG,eAAe,CACb,GAAG2E,cADU,CADE,CAHE,CAAzB;AAUAD,cAAc,CAACE,GAAf,CAAmBhB,IAAnB,E,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe3B,KAAf","sourcesContent":["import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";  \r\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\r\nimport drizzleOptions from \"../EthComponents/drizzleOptions\";\r\n\r\nexport const EVENT_FIRED = 'EVENT_FIRED'\r\nexport const EVENT_CHANGED = 'EVENT_CHANGED'\r\nexport const EVENT_ERROR = 'EVENT_ERROR'\r\nexport const LISTEN_FOR_EVENT = 'LISTEN_FOR_EVENT'\r\nexport const CONTRACT_INITIALIZING = 'CONTRACT_INITIALIZING'\r\nexport const CONTRACT_INITIALIZED = 'CONTRACT_INITIALIZED'\r\nexport const GOT_CONTRACT_VAR = 'GOT_CONTRACT_VAR'\r\nexport const DELETE_CONTRACT = 'DELETE_CONTRACT'\r\nexport const CONTRACT_SYNCING = 'CONTRACT_SYNCING'\r\nexport const CONTRACT_SYNCED = 'CONTRACT_SYNCED'\r\nexport const CONTRACT_SYNC_IND = 'CONTRACT_SYNC_IND'\r\nexport const ERROR_CONTRACT_VAR = 'ERROR_CONTRACT_VAR'\r\nexport const CALL_CONTRACT_FN = 'CALL_CONTRACT_FN'\r\nexport const SEND_CONTRACT_TX = 'SEND_CONTRACT_TX'\r\nexport const ADD_CONTRACT = 'ADD_CONTRACT'\r\nexport const ERROR_ADD_CONTRACT = 'ERROR_ADD_CONTRACT'\r\nexport const ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING'\r\nexport const ACCOUNTS_FETCHED = 'ACCOUNTS_FETCHED'\r\nexport const ACCOUNTS_FAILED = 'ACCOUNTS_FAILED'\r\nexport const SYNCING_ACCOUNTS = 'SYNCING_ACCOUNTS'\r\nexport const ACCOUNTS_POLLING = 'ACCOUNTS_POLLING'\r\nexport const DRIZZLE_INITIALIZED = 'DRIZZLE_INITIALIZED'\r\nexport const DRIZZLE_INITIALIZING = 'DRIZZLE_INITIALIZING'\r\nexport const DRIZZLE_FAILED = 'DRIZZLE_FAILED'\r\n\r\nconst drizzleMiddleware = drizzleInstance => store => next => action => {\r\n  const { type } = action\r\n\r\n  if (type === DrizzleActions.DRIZZLE_INITIALIZING) {\r\n    drizzleInstance = action.drizzle\r\n  }\r\n\r\n  if (\r\n    type === AccountsActions.ACCOUNTS_FETCHED &&\r\n    drizzleInstance &&\r\n    drizzleInstance.contractList.length\r\n  ) {\r\n    const newAccount = action.accounts[0]\r\n    const oldAccount = drizzleInstance.contractList[0].options.from\r\n\r\n    // Update `from` fields with newAccount\r\n    if (oldAccount !== newAccount) {\r\n      drizzleInstance.contractList.forEach(contract => {\r\n        contract.options.from = newAccount\r\n      })\r\n    }\r\n  }\r\n\r\n  if (type === ContractActions.ADD_CONTRACT && drizzleInstance) {\r\n    try {\r\n      const { contractConfig, events } = action\r\n      drizzleInstance.addContract(contractConfig, events)\r\n    } catch (error) {\r\n      console.error('Attempt to add a duplicate contract.\\n', error)\r\n\r\n      // Notify user via\r\n      const notificationAction = {\r\n        type: ContractActions.ERROR_ADD_CONTRACT,\r\n        error,\r\n        attemptedAction: action\r\n      }\r\n      store.dispatch(notificationAction)\r\n\r\n      // Don't propogate current action\r\n      return\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const initializedMiddleware = drizzleMiddleware(undefined)\r\n\r\n\r\n//CREATE STORE\r\nimport root from './sagas/root';\r\nimport reducer from './reducers/reducer.js'\r\n\r\n//GENERATE STORE\r\nimport appRootSaga from './sagas/appSagas';\r\nimport appReducer from './reducers/appReducers.js'\r\nimport rootSagas from './sagas/rootSaga';\r\n\r\n\r\n\r\n//APPMIDDLEWARES\r\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\r\nconst contractEventNotifier = contractEventSaga;\r\nconst joinTransactionComplete = joinTransactionSaga;\r\nconst appMiddlewares = [ contractEventNotifier(), joinTransactionComplete ];\r\n\r\n//GENERATE STORE\r\nconst appReducers = {appReducers: appReducer};\r\nconst appSagas = [appRootSaga];\r\n\r\n\r\n//CREATE STORE\r\nconst initialState = {\r\n  contracts: generateContractsInitialState(drizzleOptions)\r\n};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst allMiddlewares = [...appMiddlewares, sagaMiddleware, drizzleMiddleware];\r\n\r\nconst store = createStore(\r\n      reducer,\r\n      initialState,\r\n    composeWithDevTools(\r\n      applyMiddleware(\r\n        ...allMiddlewares\r\n      )\r\n    )\r\n);\r\n\r\nsagaMiddleware.run(root);\r\n\r\n\r\n// const store = generateStore({\r\n//   drizzleOptions,\r\n//   appReducers,\r\n//   appSagas,\r\n//   appMiddlewares,\r\n//   disableReduxDevTools: false  \r\n// })\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}