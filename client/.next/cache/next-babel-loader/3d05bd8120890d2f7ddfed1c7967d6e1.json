{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchTodos),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport React from 'react';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\nimport drizzleOptions from \"../EthComponents/drizzleOptions\"; //CREATE STORE\n// import root from './sagas/root';\n// import reducer from './reducers/reducer.js'\n// //GENERATE STORE\n// import appRootSaga from './sagas/appSagas';\n// import appReducer from './reducers/appReducers.js'\n// import rootSagas from './sagas/rootSaga';\n\nimport { put, takeEvery } from 'redux-saga/effects'; //APPMIDDLEWARES\n\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\nimport { bool } from 'shards-react';\nconst contractEventNotifier = contractEventSaga;\nconst joinTransactionComplete = joinTransactionSaga;\nconst appMiddlewares = [contractEventNotifier(), joinTransactionComplete]; //GENERATE STORE\n// const appReducers = {appReducers: appReducer};\n// const appSagas = [appRootSaga];\n\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH';\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED'; // reducers\n\nconst todosReducer = (state = null, action) => {\n  if (action.type === TODOS_RECEIVED) {\n    // update your state\n    return action.todos;\n  }\n\n  return state;\n}; // fetch data from service using sagas\n\n\nfunction fetchTodos() {\n  var todos;\n  return regeneratorRuntime.wrap(function fetchTodos$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        todos = true;\n        _context.next = 3;\n        return put({\n          type: TODOS_RECEIVED,\n          todos: false\n        });\n\n      case 3:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeEvery(TODOS_FETCH, fetchTodos);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nconst appReducers = {\n  todos: todosReducer\n};\nconst appSagas = [appRootSaga]; //CREATE STORE\n// const initialState = {\n//   contracts: generateContractsInitialState(drizzleOptions)\n// };\n// const sagaMiddleware = createSagaMiddleware();\n// const allMiddlewares = [...appMiddlewares, sagaMiddleware];\n// const store = createStore(\n//       reducer,\n//       initialState,\n//     composeWithDevTools(\n//       applyMiddleware(\n//         ...allMiddlewares\n//       )\n//     )\n// );\n// sagaMiddleware.run(root);\n\nconst store = generateStore({\n  drizzleOptions,\n  appReducers,\n  appSagas,\n  appMiddlewares,\n  disableReduxDevTools: false\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/index.js"],"names":["fetchTodos","appRootSaga","React","composeWithDevTools","createSagaMiddleware","createStore","applyMiddleware","compose","DrizzleContext","DrizzleProvider","generateStore","generateContractsInitialState","drizzleOptions","put","takeEvery","contractEventSaga","joinTransactionSaga","bool","contractEventNotifier","joinTransactionComplete","appMiddlewares","TODOS_FETCH","TODOS_RECEIVED","todosReducer","state","action","type","todos","appReducers","appSagas","store","disableReduxDevTools"],"mappings":"mDA4CUA,U;oDAQAC,W;;AApDV,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,uBAAhD;AACA,SAASC,aAAT,EAAwBC,6BAAxB,QAA6D,gBAA7D;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B,C,CAGA;;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iBAAvD;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,MAAMC,qBAAqB,GAAGH,iBAA9B;AACA,MAAMI,uBAAuB,GAAGH,mBAAhC;AACA,MAAMI,cAAc,GAAG,CAAEF,qBAAqB,EAAvB,EAA2BC,uBAA3B,CAAvB,C,CAEA;AACA;AACA;;AAEA,MAAME,WAAW,GAAG,oBAApB;AACA,MAAMC,cAAc,GAAG,uBAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,IAAT,EAAeC,MAAf,KAA0B;AAC9C,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,cAApB,EAAoC;AAClC;AACA,WAAOG,MAAM,CAACE,KAAd;AACD;;AACD,SAAOH,KAAP;AACA,CAND,C,CAQA;;;AACA,SAAUxB,UAAV;AAAA;AAAA;AAAA;AAAA;AACO2B,QAAAA,KADP,GACe,IADf;AAAA;AAEC,eAAMd,GAAG,CAAC;AAAEa,UAAAA,IAAI,EAAEJ,cAAR;AAAwBK,UAAAA,KAAK,EAAC;AAA9B,SAAD,CAAT;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;AAEA;;;AACA,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AACC,eAAMa,SAAS,CAACO,WAAD,EAAcrB,UAAd,CAAf;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,MAAM4B,WAAW,GAAG;AAAED,EAAAA,KAAK,EAAEJ;AAAT,CAApB;AACA,MAAMM,QAAQ,GAAG,CAAC5B,WAAD,CAAjB,C,CACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,MAAM6B,KAAK,GAAGpB,aAAa,CAAC;AAC1BE,EAAAA,cAD0B;AAE1BgB,EAAAA,WAF0B;AAG1BC,EAAAA,QAH0B;AAI1BT,EAAAA,cAJ0B;AAK1BW,EAAAA,oBAAoB,EAAE;AALI,CAAD,CAA3B;AASA,eAAeD,KAAf","sourcesContent":["import React from 'react';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";  \r\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\r\nimport drizzleOptions from \"../EthComponents/drizzleOptions\";\r\n\r\n//CREATE STORE\r\n// import root from './sagas/root';\r\n// import reducer from './reducers/reducer.js'\r\n\r\n// //GENERATE STORE\r\n// import appRootSaga from './sagas/appSagas';\r\n// import appReducer from './reducers/appReducers.js'\r\n// import rootSagas from './sagas/rootSaga';\r\nimport { put, takeEvery } from 'redux-saga/effects';\r\n\r\n\r\n//APPMIDDLEWARES\r\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\r\nimport { bool } from 'shards-react';\r\nconst contractEventNotifier = contractEventSaga;\r\nconst joinTransactionComplete = joinTransactionSaga;\r\nconst appMiddlewares = [ contractEventNotifier(), joinTransactionComplete ];\r\n\r\n//GENERATE STORE\r\n// const appReducers = {appReducers: appReducer};\r\n// const appSagas = [appRootSaga];\r\n\r\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH'\r\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED'\r\n\r\n// reducers\r\nconst todosReducer = (state = null, action) => {\r\n if (action.type === TODOS_RECEIVED) {\r\n   // update your state\r\n   return action.todos\r\n }\r\n return state\r\n}\r\n\r\n// fetch data from service using sagas\r\nfunction *fetchTodos() {\r\n const todos = true;\r\n yield put({ type: TODOS_RECEIVED, todos:false })\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction *appRootSaga() {\r\n yield takeEvery(TODOS_FETCH, fetchTodos)\r\n}\r\n\r\nconst appReducers = { todos: todosReducer }\r\nconst appSagas = [appRootSaga]\r\n//CREATE STORE\r\n// const initialState = {\r\n//   contracts: generateContractsInitialState(drizzleOptions)\r\n// };\r\n\r\n// const sagaMiddleware = createSagaMiddleware();\r\n\r\n// const allMiddlewares = [...appMiddlewares, sagaMiddleware];\r\n\r\n// const store = createStore(\r\n//       reducer,\r\n//       initialState,\r\n//     composeWithDevTools(\r\n//       applyMiddleware(\r\n//         ...allMiddlewares\r\n//       )\r\n//     )\r\n// );\r\n\r\n// sagaMiddleware.run(root);\r\n\r\n\r\nconst store = generateStore({\r\n  drizzleOptions,\r\n  appReducers,\r\n  appSagas,\r\n  appMiddlewares,\r\n  disableReduxDevTools: false  \r\n})\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}