{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\CardFooterBtn.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Web3 from \"web3\";\nimport { Loader } from 'rimble-ui';\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\nimport NominationModal from '../modals/NominationModal';\nimport FundingModal from '../modals/FundingModal.js';\nimport SaleModal from '../modals/SaleModal.js';\nimport SoldModal from '../modals/PaidOutModal';\nimport PaidOutModal from '../modals/PaidOutModal.js';\nimport PurchaseModal from '../modals/PurchaseModal.js';\nimport NominationDetailsLink from '../NominationDetailsLink.js';\nimport Moment from \"react-moment\";\n\nconst CardFooterButton = ({\n  props,\n  userManaBalance,\n  getSoldStatus,\n  nftAddress,\n  expiresAt,\n  assetPrice,\n  tokenId,\n  orderId,\n  getOrderId,\n  orderStatus,\n  storedOrderId\n}) => {\n  _s();\n\n  // const [isStatus, setStatus] = useState(null);\n  // // const [isStoredOrderId, setStoredOrderId] = useState();\n  // console.log(storedOrderId)\n  // const fetchProposals = async () => {\n  //   const proposal = await props.drizzle.contracts.ProposalController.methods.deployedProposals(`${tokenId}`).call();\n  //   if(proposal){\n  //     const proposalAddress = await props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(`${tokenId}`).call();\n  //     const proposalBalance = await props.drizzle.contracts.MANAToken.methods.balanceOf(`${proposalAddress}`).call();\n  //     const propData = await props.drizzle.contracts.ProposalController.methods.getPropData(`${proposalAddress}`).call();\n  //     const status = propData[0];\n  //     getOrderId(propData[2]);\n  //     if(status === '4'){\n  //       if(proposalBalance > assetPrice){\n  //         const soldStatus = '6';\n  //         getSoldStatus(proposalBalance, soldStatus);\n  //         setStatus('6');\n  //       }\n  //         else{\n  //           setStatus(status);\n  //           getOrderId(orderId);\n  //         }\n  //     }\n  //       else {\n  //         setStatus(status);\n  //         getOrderId(orderId);\n  //       }\n  //     }\n  //     else{\n  //       setStatus(null)\n  //       getOrderId(orderId);\n  //     }\n  //   }\n  const _useState = useState(null),\n        isStatus = _useState[0],\n        setStatus = _useState[1]; // const [isStoredOrderId, setStoredOrderId] = useState();\n\n\n  console.log(storedOrderId);\n\n  const fetchProposals = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var proposal, proposalAddress, proposalBalance, propData, status, soldStatus;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return props.drizzle.contracts.ProposalController.methods.deployedProposals(\"\".concat(tokenId)).call();\n\n          case 2:\n            proposal = _context.sent;\n\n            if (!proposal) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 6;\n            return props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(\"\".concat(tokenId)).call();\n\n          case 6:\n            proposalAddress = _context.sent;\n            _context.next = 9;\n            return props.drizzle.contracts.MANAToken.methods.balanceOf(\"\".concat(proposalAddress)).call();\n\n          case 9:\n            proposalBalance = _context.sent;\n            _context.next = 12;\n            return props.drizzle.contracts.ProposalController.methods.getPropData(\"\".concat(proposalAddress)).call();\n\n          case 12:\n            propData = _context.sent;\n            status = propData[0];\n            getOrderId(propData[2]); //status 4\n\n            if (status === '4') {\n              if (proposalBalance > assetPrice) {\n                soldStatus = '6';\n                getSoldStatus(proposalBalance, soldStatus);\n                setStatus('6');\n              } else {\n                setStatus(status);\n                getOrderId(orderId);\n              }\n            } //status 4 End\n            else {\n                setStatus(status);\n                getOrderId(orderId);\n              }\n\n            _context.next = 20;\n            break;\n\n          case 18:\n            setStatus(null);\n            getOrderId(orderId);\n\n          case 20:\n            return _context.abrupt(\"return\", __jsx(React.Fragment, null, (() => {\n              switch (isStatus) {\n                //switch ('6') {\n                //0-FUNDING\n                case '0':\n                  return __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 94,\n                      columnNumber: 15\n                    }\n                  }, \"Funding:\", orderId, __jsx(FundingModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    userManaBalance: userManaBalance,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 96,\n                      columnNumber: 17\n                    }\n                  }));\n                // case '0'  && orderId === storedOrderId:\n                //   return  (\n                //     <>\n                //       <CardFooter className=\"p-0\"> \n                //       Nomination=0:{storedOrderId} \n                //         <NominationModal\n                //           nftAddress={nftAddress}\n                //           tokenId={tokenId}\n                //           assetPrice={assetPrice}\n                //           expiresAt={expiresAt} \n                //           props={props} \n                //           orderId={orderId}\n                //           userManaBalance={userManaBalance}\n                //           orderStatus={orderStatus}\n                //         />\n                //       </CardFooter> \n                //     </>\n                // )\n                //FUNDED\n\n                case '1':\n                  return __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 127,\n                      columnNumber: 15\n                    }\n                  }, __jsx(PurchaseModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    userManaBalance: userManaBalance,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 128,\n                      columnNumber: 17\n                    }\n                  }));\n                //FOR_SALE\n\n                case '4':\n                  return __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 15\n                    }\n                  }, __jsx(SaleModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    userManaBalance: userManaBalance,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 17\n                    }\n                  }));\n                //PAYINGOUT\n\n                case '6':\n                  return __jsx(React.Fragment, null, __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 17\n                    }\n                  }, __jsx(SoldModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    userManaBalance: userManaBalance,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 157,\n                      columnNumber: 19\n                    }\n                  })));\n\n                case '7':\n                  return __jsx(React.Fragment, null, __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 19\n                    }\n                  }, __jsx(PaidOutModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    userManaBalance: userManaBalance,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 21\n                    }\n                  })));\n\n                case null:\n                  return __jsx(React.Fragment, null, __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 19\n                    }\n                  }, \"null:\", storedOrderId, __jsx(NominationModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    orderId: orderId,\n                    userManaBalance: userManaBalance,\n                    orderStatus: orderStatus,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 21\n                    }\n                  })));\n\n                case 'error':\n                  return 'error';\n\n                default:\n                  return __jsx(CardFooter, {\n                    className: \"p-0\",\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 205,\n                      columnNumber: 15\n                    }\n                  }, \"default:\", storedOrderId, __jsx(NominationModal, {\n                    nftAddress: nftAddress,\n                    tokenId: tokenId,\n                    assetPrice: assetPrice,\n                    expiresAt: expiresAt,\n                    props: props,\n                    orderId: orderId,\n                    userManaBalance: userManaBalance,\n                    orderStatus: orderStatus,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 207,\n                      columnNumber: 17\n                    }\n                  }));\n              }\n            })()));\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function fetchProposals() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(() => {\n    fetchProposals();\n  }, [tokenId]);\n};\n\n_s(CardFooterButton, \"qsVlnHanA3YTfG7FfcU61G7X4Oo=\");\n\n_c = CardFooterButton;\nexport default CardFooterButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardFooterButton\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/CardFooterBtn.js"],"names":["React","useState","useEffect","connect","Web3","Loader","Card","CardHeader","CardBody","CardFooter","CardTitle","Button","Row","NominationModal","FundingModal","SaleModal","SoldModal","PaidOutModal","PurchaseModal","NominationDetailsLink","Moment","CardFooterButton","props","userManaBalance","getSoldStatus","nftAddress","expiresAt","assetPrice","tokenId","orderId","getOrderId","orderStatus","storedOrderId","isStatus","setStatus","console","log","fetchProposals","drizzle","contracts","ProposalController","methods","deployedProposals","call","proposal","proposalTokenIdMap","proposalAddress","MANAToken","balanceOf","proposalBalance","getPropData","propData","status","soldStatus"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from \"web3\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\r\nimport NominationModal from '../modals/NominationModal';\r\nimport FundingModal from '../modals/FundingModal.js';\r\nimport SaleModal from '../modals/SaleModal.js';\r\nimport SoldModal from '../modals/PaidOutModal';\r\nimport PaidOutModal from '../modals/PaidOutModal.js';\r\nimport PurchaseModal from '../modals/PurchaseModal.js';\r\nimport NominationDetailsLink from '../NominationDetailsLink.js';\r\nimport Moment from \"react-moment\";\r\n\r\n\r\nconst CardFooterButton = ({ props, userManaBalance, getSoldStatus, nftAddress, expiresAt, assetPrice, tokenId, orderId, getOrderId, orderStatus, storedOrderId }) => {\r\n  // const [isStatus, setStatus] = useState(null);\r\n  // // const [isStoredOrderId, setStoredOrderId] = useState();\r\n  // console.log(storedOrderId)\r\n  // const fetchProposals = async () => {\r\n  //   const proposal = await props.drizzle.contracts.ProposalController.methods.deployedProposals(`${tokenId}`).call();\r\n  //   if(proposal){\r\n  //     const proposalAddress = await props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(`${tokenId}`).call();\r\n  //     const proposalBalance = await props.drizzle.contracts.MANAToken.methods.balanceOf(`${proposalAddress}`).call();\r\n  //     const propData = await props.drizzle.contracts.ProposalController.methods.getPropData(`${proposalAddress}`).call();\r\n  //     const status = propData[0];\r\n  //     getOrderId(propData[2]);\r\n  //     if(status === '4'){\r\n  //       if(proposalBalance > assetPrice){\r\n  //         const soldStatus = '6';\r\n  //         getSoldStatus(proposalBalance, soldStatus);\r\n  //         setStatus('6');\r\n  //       }\r\n  //         else{\r\n  //           setStatus(status);\r\n  //           getOrderId(orderId);\r\n  //         }\r\n  //     }\r\n  //       else {\r\n  //         setStatus(status);\r\n  //         getOrderId(orderId);\r\n  //       }\r\n  //     }\r\n  //     else{\r\n  //       setStatus(null)\r\n  //       getOrderId(orderId);\r\n  //     }\r\n  //   }\r\n\r\n  const [isStatus, setStatus] = useState(null);\r\n  // const [isStoredOrderId, setStoredOrderId] = useState();\r\n  console.log(storedOrderId)\r\n  const fetchProposals = async () => {\r\n    const proposal = await props.drizzle.contracts.ProposalController.methods.deployedProposals(`${tokenId}`).call();\r\n    if(proposal){\r\n      const proposalAddress = await props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(`${tokenId}`).call();\r\n      const proposalBalance = await props.drizzle.contracts.MANAToken.methods.balanceOf(`${proposalAddress}`).call();\r\n      const propData = await props.drizzle.contracts.ProposalController.methods.getPropData(`${proposalAddress}`).call();\r\n      const status = propData[0];\r\n      getOrderId(propData[2]);\r\n      //status 4\r\n      if(status === '4'){\r\n        if(proposalBalance > assetPrice){\r\n          const soldStatus = '6';\r\n          getSoldStatus(proposalBalance, soldStatus);\r\n          setStatus('6');\r\n        }\r\n        else{\r\n            setStatus(status);\r\n            getOrderId(orderId);\r\n        }\r\n      }\r\n      //status 4 End\r\n\r\n        else {\r\n          setStatus(status);\r\n          getOrderId(orderId);\r\n        }\r\n      }\r\n      else{\r\n        setStatus(null)\r\n        getOrderId(orderId);\r\n      }\r\n\r\n    return (\r\n        <>\r\n        {(() => {\r\n        switch (isStatus) {\r\n        //switch ('6') {\r\n          //0-FUNDING\r\n          case '0':\r\n            return (\r\n              <CardFooter className=\"p-0\">  \r\n                Funding:{orderId}\r\n                <FundingModal \r\n                  nftAddress={nftAddress}\r\n                  tokenId={tokenId}\r\n                  assetPrice={assetPrice}\r\n                  expiresAt={expiresAt}  \r\n                  props={props} \r\n                  userManaBalance={userManaBalance}\r\n                />\r\n              </CardFooter> \r\n            )\r\n            // case '0'  && orderId === storedOrderId:\r\n            //   return  (\r\n            //     <>\r\n            //       <CardFooter className=\"p-0\"> \r\n            //       Nomination=0:{storedOrderId} \r\n            //         <NominationModal\r\n            //           nftAddress={nftAddress}\r\n            //           tokenId={tokenId}\r\n            //           assetPrice={assetPrice}\r\n            //           expiresAt={expiresAt} \r\n            //           props={props} \r\n            //           orderId={orderId}\r\n            //           userManaBalance={userManaBalance}\r\n            //           orderStatus={orderStatus}\r\n            //         />\r\n            //       </CardFooter> \r\n            //     </>\r\n            // )\r\n          //FUNDED\r\n          case '1':\r\n            return (\r\n              <CardFooter className=\"p-0\">\r\n                <PurchaseModal \r\n                  nftAddress={nftAddress}\r\n                  tokenId={tokenId}\r\n                  assetPrice={assetPrice}\r\n                  expiresAt={expiresAt} \r\n                  props={props} \r\n                  userManaBalance={userManaBalance}\r\n                />\r\n              </CardFooter> \r\n            )\r\n          //FOR_SALE\r\n          case '4':\r\n            return  (\r\n              <CardFooter className=\"p-0\">\r\n                <SaleModal \r\n                  nftAddress={nftAddress}\r\n                  tokenId={tokenId}\r\n                  assetPrice={assetPrice}\r\n                  expiresAt={expiresAt} \r\n                  props={props} \r\n                  userManaBalance={userManaBalance}\r\n                />\r\n              </CardFooter> \r\n            )\r\n        //PAYINGOUT\r\n          case '6':\r\n            return  (\r\n              <>\r\n                <CardFooter className=\"p-0\">\r\n                  <SoldModal \r\n                    nftAddress={nftAddress}\r\n                    tokenId={tokenId}\r\n                    assetPrice={assetPrice}\r\n                    expiresAt={expiresAt} \r\n                    props={props} \r\n                    userManaBalance={userManaBalance}\r\n                  />\r\n                </CardFooter> \r\n              </>\r\n            )\r\n            case '7':\r\n              return  (\r\n                <>\r\n                  <CardFooter className=\"p-0\">\r\n                    <PaidOutModal\r\n                      nftAddress={nftAddress}\r\n                      tokenId={tokenId}\r\n                      assetPrice={assetPrice}\r\n                      expiresAt={expiresAt} \r\n                      props={props} \r\n                      userManaBalance={userManaBalance}\r\n                    />\r\n                  </CardFooter> \r\n                </>\r\n            )\r\n            case null :\r\n              return  (\r\n                <>\r\n                  <CardFooter className=\"p-0\">\r\n                  null:{storedOrderId}\r\n                    <NominationModal\r\n                      nftAddress={nftAddress}\r\n                      tokenId={tokenId}\r\n                      assetPrice={assetPrice}\r\n                      expiresAt={expiresAt} \r\n                      props={props} \r\n                      orderId={orderId}\r\n                      userManaBalance={userManaBalance}\r\n                      orderStatus={orderStatus}\r\n                    />\r\n                  </CardFooter> \r\n                </>\r\n            )\r\n          case 'error':\r\n            return'error'\r\n          default:\r\n            return (\r\n              <CardFooter className=\"p-0\">\r\n                default:{storedOrderId}\r\n                <NominationModal\r\n                  nftAddress={nftAddress}\r\n                  tokenId={tokenId}\r\n                  assetPrice={assetPrice}\r\n                  expiresAt={expiresAt} \r\n                  props={props} \r\n                  orderId={orderId}\r\n                  userManaBalance={userManaBalance}\r\n                  orderStatus={orderStatus}\r\n                />\r\n              </CardFooter> \r\n            );\r\n        }\r\n      }\r\n      )()}\r\n    </>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    fetchProposals();\r\n  }, [tokenId]);\r\n  }\r\n\r\n\r\n  export default CardFooterButton;"]},"metadata":{},"sourceType":"module"}