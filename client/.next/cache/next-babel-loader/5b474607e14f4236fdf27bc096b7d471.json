{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store'; // import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\n\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst CHECK_METAMASK = \"CHECK_METAMASK\";\nconst CHECK_METAMASK_DONE = \"CHECK_METAMASK_DONE\";\nconst TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\nconst TX_ERROR_METAMASK_DONE = \"TX_ERROR_METAMASK_DONE\";\nconst initialState = {\n  transactionProcessing: false,\n  transactionComplete: false,\n  checkMetaMask: false,\n  metaMaskReject: true,\n  checkingTx: false\n};\n\nfunction transactionReducers(state = initialState, action) {\n  switch (action.type) {\n    case CHECK_METAMASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: true\n      });\n\n    case CHECK_METAMASK_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: false\n      });\n\n    case TX_ERROR_METAMASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: false,\n        metaMaskReject: true\n      });\n\n    case TX_ERROR_METAMASK_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        metaMaskReject: false\n      });\n\n    case TX_PROCESSING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactionProcessing: true\n      });\n\n    case TX_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactionComplete: true\n      });\n\n    default:\n      return state;\n  }\n} //export const appReducers = { transactionReducer: transactionReducers }\n//const transactionReducer = transactionReducers;\n\n\nexport const appReducers = combineReducers(_objectSpread({\n  transactionReducer: transactionReducers\n}, drizzleReducers));","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capReducers.js"],"names":["combineReducers","drizzleReducers","TX_DONE","TX_PROCESSING","CHECK_METAMASK","CHECK_METAMASK_DONE","TX_ERROR_METAMASK","TX_ERROR_METAMASK_DONE","initialState","transactionProcessing","transactionComplete","checkMetaMask","metaMaskReject","checkingTx","transactionReducers","state","action","type","appReducers","transactionReducer"],"mappings":";;;;;;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC,C,CACA;;AAGA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,mBAAmB,EAAE,KAFF;AAGnBC,EAAAA,aAAa,EAAE,KAHI;AAInBC,EAAAA,cAAc,EAAE,IAJG;AAKnBC,EAAAA,UAAU,EAAE;AALO,CAArB;;AAQA,SAASC,mBAAT,CAA6BC,KAAK,GAAGP,YAArC,EAAmDQ,MAAnD,EAA2D;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,cAAL;AACE,6CAAYW,KAAZ;AAAmBJ,QAAAA,aAAa,EAAE;AAAlC;;AACF,SAAKN,mBAAL;AACE,6CAAYU,KAAZ;AAAmBJ,QAAAA,aAAa,EAAE;AAAlC;;AACF,SAAKL,iBAAL;AACE,6CAAYS,KAAZ;AAAmBJ,QAAAA,aAAa,EAAE,KAAlC;AAAyCC,QAAAA,cAAc,EAAE;AAAzD;;AACF,SAAKL,sBAAL;AACE,6CAAYQ,KAAZ;AAAmBH,QAAAA,cAAc,EAAE;AAAnC;;AACF,SAAKT,aAAL;AACE,6CAAYY,KAAZ;AAAmBN,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKP,OAAL;AACE,6CAAYa,KAAZ;AAAmBL,QAAAA,mBAAmB,EAAE;AAAxC;;AACF;AACE,aAAOK,KAAP;AAdJ;AAgBD,C,CAEH;AACA;;;AAEA,OAAO,MAAMG,WAAW,GACxBlB,eAAe;AAAGmB,EAAAA,kBAAkB,EAAEL;AAAvB,GAEVb,eAFU,EADR","sourcesContent":["\r\nimport { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\n// import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\nconst CHECK_METAMASK = \"CHECK_METAMASK\";\r\nconst CHECK_METAMASK_DONE = \"CHECK_METAMASK_DONE\";\r\nconst TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\r\nconst TX_ERROR_METAMASK_DONE = \"TX_ERROR_METAMASK_DONE\";\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  transactionComplete: false, \r\n  checkMetaMask: false,\r\n  metaMaskReject: true,\r\n  checkingTx: false,\r\n};\r\n\r\nfunction transactionReducers(state = initialState, action) {\r\n    switch (action.type) {\r\n      case CHECK_METAMASK:\r\n        return { ...state, checkMetaMask: true };\r\n      case CHECK_METAMASK_DONE:\r\n        return { ...state, checkMetaMask: false };\r\n      case TX_ERROR_METAMASK:\r\n        return { ...state, checkMetaMask: false, metaMaskReject: true };\r\n      case TX_ERROR_METAMASK_DONE:\r\n        return { ...state, metaMaskReject: false };\r\n      case TX_PROCESSING:\r\n        return { ...state, transactionProcessing: true };\r\n      case TX_DONE:\r\n        return { ...state, transactionComplete: true };\r\n      default:\r\n        return state;\r\n    }\r\n  }   \r\n\r\n//export const appReducers = { transactionReducer: transactionReducers }\r\n//const transactionReducer = transactionReducers;\r\n\r\nexport const appReducers = \r\ncombineReducers({ transactionReducer: transactionReducers \r\n ,\r\n  ...drizzleReducers\r\n});"]},"metadata":{},"sourceType":"module"}