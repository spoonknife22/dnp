{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\SoldAssetCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport ExpiredNominations from '../ExpiredNominations';\n\nconst SoldAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  console.log(orders);\n\n  const oderSoldCall = address => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {category:parcel, status:sold, owner:\\\"0x6a1e9564f99fb9718d37dfcc053b3aee460368ea\\\"}) {\\n          id\\n          nft{\\n            parcel {       \\n                    x,\\n                    y,\\n                    tokenId\\n                }\\n        \\n            activeOrder {\\n                id\\n                price\\n                expiresAt\\n                txHash\\n                nftAddress\\n            }\\n        }\\n        }\\n      }\"\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              setOrders([result.data.orders]);\n              setTotalOrders(result.data.orders.length);\n              setLoading(false);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), error => {\n      return error;\n    });\n  };\n\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var proposalContract, deployedAddresses, i, address;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context2.sent;\n              _context2.next = 5;\n              return proposalContract.methods.getDeployedAddresses().call();\n\n            case 5:\n              deployedAddresses = _context2.sent;\n\n              for (i = 0; i < deployedAddresses.length; i++) {\n                address = deployedAddresses[i];\n                oderSoldCall(address);\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(ExpiredNominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 8\n    }\n  }));\n};\n\n_s(SoldAssetCards, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = SoldAssetCards;\nexport default SoldAssetCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoldAssetCards\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/SoldAssetCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","ExpiredNominations","SoldAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","console","log","oderSoldCall","address","myHeaders","Headers","append","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","length","error","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","i","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA;;AAAA,oBAEzBP,QAAQ,CAAC,EAAD,CAFiB;AAAA,QAE9CQ,MAF8C;AAAA,QAEtCC,SAFsC;;AAAA,qBAGvBT,QAAQ,CAAC,KAAD,CAHe;AAAA,QAG9CU,OAH8C;AAAA,QAGrCC,UAHqC;;AAAA,qBAIfX,QAAQ,CAAC,CAAD,CAJO;AAAA,QAI9CY,WAJ8C;AAAA,QAIjCC,cAJiC;;AAAA,qBAK5Bb,QAAQ,CAAC,CAAD,CALoB;AAAA,QAK9Cc,cAL8C;;AAAA,qBAMfd,QAAQ,EANO;AAAA,QAM9Ce,WAN8C;AAAA,QAMjCC,cANiC;;AAOrDC,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;;AACA,QAAMW,YAAY,GAAIC,OAAD,IAAa;AAChC,UAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,UAAMC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK;AAAP,KAAf,CAAhB;AAwBF,UAAMC,SAAS,GAAG,kEAAlB;AACAC,IAAAA,KAAK,CAACD,SAAD,EAAY;AACfE,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAACV,SAFO;AAGfW,MAAAA,IAAI,EAACR,OAHU;AAGDS,MAAAA,SAAS,EAAC,EAHT;AAIfC,MAAAA,QAAQ,EAAE;AAJK,KAAZ,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH;AAAA,0EAOS,iBAAOG,MAAP;AAAA;AAAA;AAAA;AACL7B,cAAAA,SAAS,CAAC,CAAC6B,MAAM,CAACC,IAAP,CAAY/B,MAAb,CAAD,CAAT;AACAQ,cAAAA,cAAc,CAACsB,MAAM,CAACC,IAAP,CAAY/B,MAAZ,CAAmBgC,MAApB,CAAd;AACA7B,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA,OAPT;;AAAA;AAAA;AAAA;AAAA,SAYG8B,KAAD,IAAW;AACX,aAAOA,KAAP;AACC,KAdH;AAgBC,GA7CD;;AAgDAxC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyC,YAAY;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYpC,KAAK,CAACqC,OAAN,CAAcC,SAAd,CAAwBC,kBADpC;;AAAA;AACbC,cAAAA,gBADa;AAAA;AAAA,qBAEaA,gBAAgB,CAACC,OAAjB,CAAyBC,oBAAzB,GAAgDC,IAAhD,EAFb;;AAAA;AAEbC,cAAAA,iBAFa;;AAInB,mBAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,iBAAiB,CAACV,MAAlC,EAA0CW,CAAC,EAA3C,EAA+C;AACvC/B,gBAAAA,OADuC,GAC7B8B,iBAAiB,CAACC,CAAD,CADY;AAE3ChC,gBAAAA,YAAY,CAACC,OAAD,CAAZ;AACL;;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZsB,YAAY;AAAA;AAAA;AAAA,OAAlB;;AASFA,IAAAA,YAAY;AACb,GAXU,EAWR,EAXQ,CAAT,CAxDqD,CAsErD;;AACA,QAAMU,iBAAiB,GAAGxC,WAAW,GAAGE,cAAxC;AACA,QAAMuC,kBAAkB,GAAGD,iBAAiB,GAAGtC,cAA/C;AACA,QAAMwC,cAAc,GAAG9C,MAAM,CAAC+C,KAAP,CAAaF,kBAAb,EAAiCD,iBAAjC,CAAvB,CAzEqD,CA2ErD;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAI5C,cAAc,CAAC4C,UAAD,CAA7C;;AAEA,SACE,4BACE,MAAC,kBAAD;AACE,IAAA,MAAM,EAAEH,cADV;AAEE,IAAA,OAAO,EAAE5C,OAFX;AAGE,IAAA,KAAK,EAAEJ,KAHT;AAIE,IAAA,eAAe,EAAEC,eAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOG,MAAC,UAAD;AACC,IAAA,WAAW,EAAGK,WADf;AAEC,IAAA,cAAc,EAAEE,cAFjB;AAGC,IAAA,YAAY,EAAEC,WAHf;AAIC,IAAA,QAAQ,EAAEyC,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH,CADF;AAgBD,CA9FD;;GAAMnD,c;;KAAAA,c;AAiGN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport ExpiredNominations from '../ExpiredNominations'\r\n\r\n\r\nconst SoldAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n  console.log(orders)\r\n  const oderSoldCall = (address) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n   \r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {category:parcel, status:sold, owner:\"0x6a1e9564f99fb9718d37dfcc053b3aee460368ea\"}) {\r\n          id\r\n          nft{\r\n            parcel {       \r\n                    x,\r\n                    y,\r\n                    tokenId\r\n                }\r\n        \r\n            activeOrder {\r\n                id\r\n                price\r\n                expiresAt\r\n                txHash\r\n                nftAddress\r\n            }\r\n        }\r\n        }\r\n      }`\r\n  })\r\n  \r\n\r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then( async (result) => {\r\n      setOrders([result.data.orders]);\r\n      setTotalOrders(result.data.orders.length);\r\n      setLoading(false); \r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      let i;\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n          oderSoldCall(address);\r\n    }\r\n}\r\n  fetchParcels();  \r\n}, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <ExpiredNominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage}\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default SoldAssetCards;\r\n\r\n"]},"metadata":{},"sourceType":"module"}