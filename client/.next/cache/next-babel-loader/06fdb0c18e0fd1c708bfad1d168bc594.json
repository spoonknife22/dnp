{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers, Dispatch } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst initialState = {\n  transactionProcessing: false,\n  transactionComplete: false\n};\n\nfunction transactionReducer(state = initialState, action) {\n  switch (action.type) {\n    case TX_PROCESSING:\n      return _objectSpread({}, state, {\n        transactionProcessing: true\n      });\n\n    case TX_DONE:\n      return _objectSpread({}, state, {\n        transactionComplete: true\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport const appReducers = {\n  transaction: transactionReducer\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capReducers.js"],"names":["combineReducers","Dispatch","drizzleReducers","all","fork","takeLatest","put","call","take","race","select","takeEvery","TX_DONE","TX_PROCESSING","initialState","transactionProcessing","transactionComplete","transactionReducer","state","action","type","appReducers","transaction"],"mappings":";;;;;;AACA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AAGA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,mBAAmB,EAAE;AAFF,CAArB;;AAKA,SAASC,kBAAT,CAA4BC,KAAK,GAAGJ,YAApC,EAAkDK,MAAlD,EAA0D;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAL;AACE,+BAAYK,KAAZ;AAAmBH,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKH,OAAL;AACE,+BAAYM,KAAZ;AAAmBF,QAAAA,mBAAmB,EAAE;AAAxC;;AACF;AACE,aAAOE,KAAP;AANJ;AAQD;;AAEH,OAAO,MAAMG,WAAW,GAAG;AAAEC,EAAAA,WAAW,EAAEL;AAAf,CAApB","sourcesContent":["\r\nimport { combineReducers, Dispatch } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  transactionComplete: false\r\n};\r\n\r\nfunction transactionReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case TX_PROCESSING:\r\n        return { ...state, transactionProcessing: true };\r\n      case TX_DONE:\r\n        return { ...state, transactionComplete: true };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport const appReducers = { transaction: transactionReducer }\r\n"]},"metadata":{},"sourceType":"module"}