{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify'; // import { newContextComponents } from \"@drizzle/react-components\";\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\n//const GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\n\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const proposalAddress = action.event.returnValues._proposalAddress;\n      const showAddress = \"\".concat(proposalAddress);\n      const display = \"\".concat(message); //store.dispatch({type:\"GOT_PROP_ADDRESS\", propAddress:showAddress})\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\nexport const fetchPropAddr = store => next => /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(action) {\n    var drizzle, state, dataKey, proposalAddress;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(action.type === GET_PROP_ADDRESS)) {\n            _context.next = 11;\n            break;\n          }\n\n          drizzle = action.drizzle;\n          state = drizzle.store.getState();\n\n          if (!state.drizzleStatus.initialized) {\n            _context.next = 10;\n            break;\n          }\n\n          dataKey = action.dataKey;\n          _context.next = 7;\n          return state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\n\n        case 7:\n          proposalAddress = _context.sent;\n          store.dispatch({\n            type: 'GOT_PROP_ADDRESS',\n            propAddress: proposalAddress\n          });\n          console.log(proposalAddress);\n\n        case 10:\n          return _context.abrupt(\"return\", 'Loading...');\n\n        case 11:\n          return _context.abrupt(\"return\", next(action));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","proposalAddress","_proposalAddress","showAddress","display","info","TOP_RIGHT","fetchPropAddr","GET_PROP_ADDRESS","drizzle","state","getState","drizzleStatus","initialized","dataKey","contracts","ProposalController","getPropTokenIdMap","value","dispatch","propAddress","console","log"],"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;AACA;AAEA;;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAN,IAAAA,KAAK,CAACQ,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAET,KAAK,CAACU,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBN,YAAY,CAACgB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,eAAe,GAAGjB,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BG,gBAAlD;AACA,YAAMC,WAAW,aAAMF,eAAN,CAAjB;AACA,YAAMG,OAAO,aAAMN,OAAN,CAAb,CALsC,CAMtC;;AACAlB,MAAAA,KAAK,CAACyB,IAAN,CAAWD,OAAX,EAAoB;AAAEf,QAAAA,QAAQ,EAAET,KAAK,CAACU,QAAN,CAAegB;AAA3B,OAApB;AACF;AACF;;AACD,SAAOvB,IAAI,CAACC,MAAD,CAAX;AACD,CAbM;AAiBP,OAAO,MAAMuB,aAAa,GAAGzB,KAAK,IAAIC,IAAI;AAAA,qEAAI,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,gBACxCA,MAAM,CAACC,IAAP,KAAgBuB,gBADwB;AAAA;AAAA;AAAA;;AAEpCC,UAAAA,OAFoC,GAE1BzB,MAAM,CAACyB,OAFmB;AAGtCC,UAAAA,KAHsC,GAG9BD,OAAO,CAAC3B,KAAR,CAAc6B,QAAd,EAH8B;;AAAA,eAItCD,KAAK,CAACE,aAAN,CAAoBC,WAJkB;AAAA;AAAA;AAAA;;AAKlCC,UAAAA,OALkC,GAKxB9B,MAAM,CAAC8B,OALiB;AAAA;AAAA,iBAMVJ,KAAK,CAACK,SAAN,CAAgBC,kBAAhB,CAAmCC,iBAAnC,CAAqDH,OAArD,EAA8DI,KANpD;;AAAA;AAMlCjB,UAAAA,eANkC;AAOxCnB,UAAAA,KAAK,CAACqC,QAAN,CAAe;AAAElC,YAAAA,IAAI,EAAE,kBAAR;AAA4BmC,YAAAA,WAAW,EAACnB;AAAxC,WAAf;AACAoB,UAAAA,OAAO,CAACC,GAAR,CAAYrB,eAAZ;;AARwC;AAAA,2CAUjC,YAViC;;AAAA;AAAA,2CAYrClB,IAAI,CAACC,MAAD,CAZiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;;AAAA;AAAA;AAAA;AAAA,GAAnC","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n// import { newContextComponents } from \"@drizzle/react-components\";\r\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\n//const GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const proposalAddress = action.event.returnValues._proposalAddress\r\n       const showAddress = `${proposalAddress}`\r\n       const display = `${message}`\r\n       //store.dispatch({type:\"GOT_PROP_ADDRESS\", propAddress:showAddress})\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\nexport const fetchPropAddr = store => next => async (action) => {\r\n  if (action.type === GET_PROP_ADDRESS) {\r\n    const drizzle = action.drizzle;\r\n    var state = drizzle.store.getState();\r\n    if (state.drizzleStatus.initialized) {\r\n      const dataKey = action.dataKey;\r\n      const proposalAddress = await state.contracts.ProposalController.getPropTokenIdMap[dataKey].value;\r\n      store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\r\n      console.log(proposalAddress);\r\n      }\r\n      return 'Loading...'\r\n    }\r\n  return next(action)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}