{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport ExpiredNominations from '../ExpiredNominations';\nimport { Loader } from 'rimble-ui'; //import Moment from \"react-moment\";\n//import moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  // const nowUnix = moment().valueOf();\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    fetchParcels();\n  }, []);\n\n  const fetchParcels = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var proposalContract, deployedAddresses, i, orderIdsArray, address, propData, j, expiredOrdersArray, graphql, targetUrl;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController;\n\n          case 2:\n            proposalContract = _context2.sent;\n            _context2.next = 5;\n            return proposalContract.methods.getDeployedAddresses().call();\n\n          case 5:\n            deployedAddresses = _context2.sent;\n            orderIdsArray = [];\n            i = 0;\n\n          case 8:\n            if (!(i < deployedAddresses.length)) {\n              _context2.next = 17;\n              break;\n            }\n\n            address = deployedAddresses[i];\n            _context2.next = 12;\n            return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n          case 12:\n            propData = _context2.sent;\n            orderIdsArray.push(propData[2]);\n\n          case 14:\n            i++;\n            _context2.next = 8;\n            break;\n\n          case 17:\n            expiredOrdersArray = []; //let orderId = [\"0xc99701f31fe9427afb81e2534a9eba054982c20418e97eaad46c0e42a5c07e8b\"];\n\n            for (j = 0; j < orderIdsArray.length; j++) {\n              graphql = JSON.stringify({\n                query: \"{\\n        orders(where: {id:\\\"\".concat(orderIdsArray[j], \"\\\", status:cancelled, category:parcel }) {\\n          status\\n          nft{\\n            parcel {          \\n                    x,\\n                    y,\\n                    tokenId\\n                }\\n      \\n            activeOrder {\\n                id\\n                price\\n                expiresAt\\n                txHash\\n                nftAddress\\n            }\\n        }\\n        }\\n      }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!result.data.orders.length) {\n                          console.log(result.data.orders);\n                          console.log(console.log('empty cancelled array'));\n                        } else {\n                          expiredOrdersArray.push(result.data.orders);\n                          setTotalOrders(expiredOrdersArray.length);\n                          console.log(result.data.orders);\n                          setOrders(expiredOrdersArray);\n                          setLoading(false);\n                        }\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n            }\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchParcels() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, !orders ? __jsx(\"div\", {\n    className: \"align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }\n  }, __jsx(Loader, {\n    className: \"mx-auto\",\n    color: \"#007bff\",\n    size: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  })) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }\n  }, __jsx(ExpiredNominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  })));\n};\n\n_s(NominatedCardsExpired, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","ExpiredNominations","Loader","NominatedCardsExpired","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","orderIdsArray","i","length","address","getPropData","propData","push","expiredOrdersArray","j","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","console","log","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport ExpiredNominations from '../ExpiredNominations';\r\nimport { Loader } from 'rimble-ui';\r\n//import Moment from \"react-moment\";\r\n//import moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  // const nowUnix = moment().valueOf();\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n  const fetchParcels = async () => {\r\n\r\n  const proposalContract = await props.drizzle.contracts.ProposalController;\r\n  const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n\r\n  let i;\r\n  let orderIdsArray = [];\r\n  for (i = 0; i < deployedAddresses.length; i++) {\r\n    const address = deployedAddresses[i];\r\n    const propData = await proposalContract.methods.getPropData(`${address}`).call(); \r\n    orderIdsArray.push(propData[2]);\r\n  }\r\n\r\n  let j;\r\n  let expiredOrdersArray = [];\r\n  //let orderId = [\"0xc99701f31fe9427afb81e2534a9eba054982c20418e97eaad46c0e42a5c07e8b\"];\r\n\r\n  for (j = 0; j < orderIdsArray.length; j++) {\r\n  \r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {id:\"${orderIdsArray[j]}\", status:cancelled, category:parcel }) {\r\n          status\r\n          nft{\r\n            parcel {          \r\n                    x,\r\n                    y,\r\n                    tokenId\r\n                }\r\n      \r\n            activeOrder {\r\n                id\r\n                price\r\n                expiresAt\r\n                txHash\r\n                nftAddress\r\n            }\r\n        }\r\n        }\r\n      }`\r\n  })\r\n\r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then( async (result) => {\r\n      if(!result.data.orders.length){\r\n        console.log(result.data.orders)\r\n        console.log(console.log('empty cancelled array'))\r\n      }\r\n      else{\r\n        expiredOrdersArray.push(result.data.orders);\r\n        setTotalOrders(expiredOrdersArray.length)\r\n        console.log(result.data.orders)\r\n        setOrders(expiredOrdersArray);\r\n        setLoading(false); \r\n      }\r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  ) \r\n}\r\n}\r\n\r\nconst indexOfLastParcel = currentPage * parcelsPerPage;\r\nconst indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\nconst currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\nconst paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\nreturn (   \r\n<>\r\n{!orders  ? \r\n  <div className=\"align-items-center\">   \r\n    <Loader className=\"mx-auto\" color=\"#007bff\" size=\"40px\" />\r\n  </div>\r\n: \r\n  <div>\r\n    <ExpiredNominations \r\n      orders={currentParcels} \r\n      loading={loading} \r\n      props={props}   \r\n      userManaBalance={userManaBalance}\r\n    />\r\n    <Pagination\r\n      currentPage ={currentPage }\r\n      parcelsPerPage={parcelsPerPage}\r\n      totalParcels={totalOrders}\r\n      paginate={paginate}\r\n    />\r\n  </div>\r\n    \r\n  }\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}