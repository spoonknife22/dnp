{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\AbPreNomCard.js\";\n\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\n\nconst AbPreNomCard = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        posts = _useState[0],\n        setPosts = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        postsPerPage = _useState4[0];\n\n  useEffect(() => {\n    const fetchPosts = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var proxyUrl, targetUrl;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.opensea.io/api/v1/events?asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&event_type=created&only_opensea=false&offset=0&limit=100';\n              fetch(proxyUrl + targetUrl, {\n                header: 'x-api-key:2f2a0900458f4bdfbb489680a58e7526'\n              }).then(res => res.json()).then(result => {\n                setPosts(result.asset_events);\n                setLoading(false);\n              }, error => {\n                _this.setState({\n                  isLoaded: true,\n                  error\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchPosts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchPosts();\n  }, []); // Get current posts\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    posts: currentPosts,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    postsPerPage: postsPerPage,\n    totalPosts: posts.length,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n}; // const [orders, setOrders] = useState([]);\n// const [loading, setLoading] = useState(false);\n// const [currentPage, setCurrentPage] = useState(1);\n// const [parcelsPerPage] = useState(6);\n// const [totalOrders, setTotalOrders] = useState();\n// const nowUnix = moment().valueOf();\n// const myHeaders = new Headers();\n// myHeaders.append(\"Content-Type\", \"application/json\");\n// const currentTime= moment().valueOf();\n// const graphql= JSON.stringify({ query: \n//     `{\n//       orders(first:20,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:${currentTime}}) {\n//        status \n//        nft{\n//         parcel {\n//           x,\n//           y, \n//           tokenId\n//         }\n//         activeOrder {\n//           id\n//           price\n//           expiresAt\n//           nftAddress\n//           txHash\n//         }\n//       }\n//     }\n//     }`\n//   })\n// useEffect(() => {\n//   const fetchParcels = async () => {\n//   //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n//   const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\n//   fetch(targetUrl, {\n//     method: \"POST\",\n//     headers:myHeaders,  \n//     body:graphql, variables:{},\n//     redirect: 'follow'\n//   })\n//     .then(res => res.json())\n//     .then( async (result) => {\n//       const ordersGQL = await result.data.orders;\n//       const proposalContract = await props.drizzle.contracts.ProposalController;\n//       const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\n//       let i;\n//       let fundingArray = [];\n//       let fundedArray = [];\n//       let forSaleArray = [];\n//       let activeArray = [];\n//       for (i = 0; i < deployedAddresses.length; i++) {\n//         const address = deployedAddresses[i];\n//         const propData = await proposalContract.methods.getPropData(`${address}`).call();\n//         if(propData[0] == 0 || propData[0] == 1 || propData[0] == 4) {\n//         activeArray.push(propData[1]);\n//       }\n//         if(propData[0] == 0) {\n//           fundingArray.push(propData[1]);\n//         }\n//         if(propData[0] == 1){\n//           fundedArray.push(propData[1]);\n//         }\n//         if(propData[0] == 4){\n//           forSaleArray.push(propData[1]);\n//         }\n//      }\n//     //FILTER OUT NOMINATED PROPS\n//      const ordersFiltered = ordersGQL.filter(item => !activeArray.includes(item.nft.parcel.tokenId));\n//         setOrders(ordersFiltered);\n//         setTotalOrders(ordersFiltered.length)\n//         setLoading(false); \n//       },\n//       (error) => {\n//         setLoading(true),\n//         error;\n//       }\n//   ) \n// }\n//   fetchParcels();  \n// }, []);\n// // Get current orders\n// const indexOfLastParcel = currentPage * parcelsPerPage;\n// const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n// const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n// // Change page\n// const paginate = pageNumber => setCurrentPage(pageNumber);\n// return (   \n//   <div>\n//     <Nominations \n//       orders={currentParcels} \n//       loading={loading} \n//       props={props}   \n//       userManaBalance={userManaBalance}\n//     />\n//      <Pagination\n//       currentPage ={currentPage}\n//       parcelsPerPage={parcelsPerPage}\n//       totalParcels={totalOrders}\n//       paginate={paginate}\n//     />\n//   </div>","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/AbPreNomCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","AbPreNomCard","props","userManaBalance","posts","setPosts","loading","setLoading","currentPage","setCurrentPage","postsPerPage","fetchPosts","proxyUrl","targetUrl","fetch","header","then","res","json","result","asset_events","error","setState","isLoaded","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","length"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA,oBAEzBP,QAAQ,CAAC,EAAD,CAFiB;AAAA,QAE5CQ,KAF4C;AAAA,QAErCC,QAFqC;;AAAA,qBAGrBT,QAAQ,CAAC,KAAD,CAHa;AAAA,QAG5CU,OAH4C;AAAA,QAGnCC,UAHmC;;AAAA,qBAIbX,QAAQ,CAAC,CAAD,CAJK;AAAA,QAI5CY,WAJ4C;AAAA,QAI/BC,cAJ+B;;AAAA,qBAK5Bb,QAAQ,CAAC,CAAD,CALoB;AAAA,QAK5Cc,YAL4C;;AAOnDb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,QADe,GACJ,sCADI,EAEnBC,SAFmB,GAEP,iKAFO;AAGnBC,cAAAA,KAAK,CAACF,QAAQ,GAAGC,SAAZ,EAAsB;AAACE,gBAAAA,MAAM,EAAC;AAAR,eAAtB,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVd,gBAAAA,QAAQ,CAACc,MAAM,CAACC,YAAR,CAAR;AACAb,gBAAAA,UAAU,CAAC,KAAD,CAAV;AAED,eAPL,EAQKc,KAAD,IAAW;AACT,gBAAA,KAAI,CAACC,QAAL,CAAc;AACZC,kBAAAA,QAAQ,EAAE,IADE;AAEZF,kBAAAA;AAFY,iBAAd;AAID,eAbL;;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVV,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAqBAA,IAAAA,UAAU;AACX,GAvBQ,EAuBN,EAvBM,CAAT,CAPmD,CAgCnD;;AACA,QAAMa,eAAe,GAAGhB,WAAW,GAAGE,YAAtC;AACA,QAAMe,gBAAgB,GAAGD,eAAe,GAAGd,YAA3C;AACA,QAAMgB,YAAY,GAAGtB,KAAK,CAACuB,KAAN,CAAYF,gBAAZ,EAA8BD,eAA9B,CAArB,CAnCmD,CAqCnD;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAIpB,cAAc,CAACoB,UAAD,CAA7C;;AAEA,SACE,4BACE,MAAC,WAAD;AACE,IAAA,KAAK,EAAEH,YADT;AAEE,IAAA,OAAO,EAAEpB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,UAAD;AACE,IAAA,YAAY,EAAEI,YADhB;AAEE,IAAA,UAAU,EAAEN,KAAK,CAAC0B,MAFpB;AAGE,IAAA,QAAQ,EAAEF,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAiBD,CAzDD,C,CA4DA;AACE;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\n\r\nconst AbPreNomCard = ({ props, userManaBalance }) => {\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [postsPerPage] = useState(6);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    targetUrl = 'https://api.opensea.io/api/v1/events?asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&event_type=created&only_opensea=false&offset=0&limit=100'\r\n    fetch(proxyUrl + targetUrl,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setPosts(result.asset_events);\r\n          setLoading(false);\r\n          \r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      ) \r\n    \r\n      }\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <>\r\n      <Nominations \r\n        posts={currentPosts} \r\n        loading={loading} \r\n      />\r\n      \r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\n\r\n// const [orders, setOrders] = useState([]);\r\n  // const [loading, setLoading] = useState(false);\r\n  // const [currentPage, setCurrentPage] = useState(1);\r\n  // const [parcelsPerPage] = useState(6);\r\n  // const [totalOrders, setTotalOrders] = useState();\r\n\r\n  // const nowUnix = moment().valueOf();\r\n\r\n  // const myHeaders = new Headers();\r\n  // myHeaders.append(\"Content-Type\", \"application/json\");\r\n  // const currentTime= moment().valueOf();\r\n  // const graphql= JSON.stringify({ query: \r\n  //     `{\r\n  //       orders(first:20,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:${currentTime}}) {\r\n  //        status \r\n  //        nft{\r\n  //         parcel {\r\n  //           x,\r\n  //           y, \r\n  //           tokenId\r\n  //         }\r\n  //         activeOrder {\r\n  //           id\r\n  //           price\r\n  //           expiresAt\r\n  //           nftAddress\r\n  //           txHash\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     }`\r\n  //   })\r\n\r\n  // useEffect(() => {\r\n  //   const fetchParcels = async () => {\r\n  //   //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  //   const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n  //   fetch(targetUrl, {\r\n  //     method: \"POST\",\r\n  //     headers:myHeaders,  \r\n  //     body:graphql, variables:{},\r\n  //     redirect: 'follow'\r\n  //   })\r\n  //     .then(res => res.json())\r\n  //     .then( async (result) => {\r\n  //       const ordersGQL = await result.data.orders;\r\n  //       const proposalContract = await props.drizzle.contracts.ProposalController;\r\n  //       const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      \r\n  //       let i;\r\n  //       let fundingArray = [];\r\n  //       let fundedArray = [];\r\n  //       let forSaleArray = [];\r\n  //       let activeArray = [];\r\n\r\n  //       for (i = 0; i < deployedAddresses.length; i++) {\r\n  //         const address = deployedAddresses[i];\r\n  //         const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n  //         if(propData[0] == 0 || propData[0] == 1 || propData[0] == 4) {\r\n  //         activeArray.push(propData[1]);\r\n  //       }\r\n  //         if(propData[0] == 0) {\r\n  //           fundingArray.push(propData[1]);\r\n  //         }\r\n  //         if(propData[0] == 1){\r\n  //           fundedArray.push(propData[1]);\r\n  //         }\r\n  //         if(propData[0] == 4){\r\n  //           forSaleArray.push(propData[1]);\r\n  //         }\r\n  //      }\r\n    \r\n  //     //FILTER OUT NOMINATED PROPS\r\n  //      const ordersFiltered = ordersGQL.filter(item => !activeArray.includes(item.nft.parcel.tokenId));\r\n  //         setOrders(ordersFiltered);\r\n  //         setTotalOrders(ordersFiltered.length)\r\n  //         setLoading(false); \r\n  //       },\r\n  //       (error) => {\r\n  //         setLoading(true),\r\n  //         error;\r\n  //       }\r\n  //   ) \r\n  // }\r\n  //   fetchParcels();  \r\n  // }, []);\r\n\r\n\r\n  // // Get current orders\r\n  // const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  // const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  // const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // // Change page\r\n  // const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  // return (   \r\n  //   <div>\r\n  //     <Nominations \r\n  //       orders={currentParcels} \r\n  //       loading={loading} \r\n  //       props={props}   \r\n  //       userManaBalance={userManaBalance}\r\n  //     />\r\n  //      <Pagination\r\n  //       currentPage ={currentPage}\r\n  //       parcelsPerPage={parcelsPerPage}\r\n  //       totalParcels={totalOrders}\r\n  //       paginate={paginate}\r\n  //     />\r\n  //   </div>"]},"metadata":{},"sourceType":"module"}