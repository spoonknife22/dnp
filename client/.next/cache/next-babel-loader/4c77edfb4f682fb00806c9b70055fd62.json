{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(testSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchTokenId),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify'; // const delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\n\nconst getDrizzle = state => state.appReducers.drizzle; // const getContracts = (state) => state.contracts;\n\n\nfunction testSaga() {\n  return _regeneratorRuntime.wrap(function testSaga$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TESTED_SAGA'\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchTokenId(action) {\n  return _regeneratorRuntime.wrap(function fetchTokenId$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCHED',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction fetchPropAddr(action) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 2\n        });\n\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport function appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n} //yield takeEvery(TOKEN_ID_FETCH, fetchTokenId);\n// =======\n//   yield put({ type: 'GOT_PROP_ADDRESS', propAddress:action.tokenId });\n// }\n// function* appRootSaga() {\n//   yield takeLatest(TEST_SAGA, testSaga);\n//   yield takeLatest(GET_PROP_ADDRESS, fetchPropAddr);\n//   yield takeLatest(TOKEN_ID_FETCH, fetchTokenId);\n// >>>>>>> parent of f1ec14dc... props address working but not with drizzleStore\n// }\n//export default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["testSaga","fetchTokenId","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","TOKEN_ID_FETCH","GET_PROP_ADDRESS","TEST_SAGA","getDrizzle","state","appReducers","drizzle","type","action","tokenId","propAddress"],"mappings":";;oDAWUA,Q;qDAMAC,Y;qDAIAC,a;qDAOQC,W;;AA5BlB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,OAAhD,C,CACA;;;AAEA,SAAUpB,QAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMO,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUpB,YAAV,CAAwBqB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMf,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE,kBAAR;AAA4BE,UAAAA,OAAO,EAACD,MAAM,CAACC;AAA3C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUrB,aAAV,CAAyBoB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAIE,eAAMf,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE,kBAAR;AAA4BG,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,OAAO,SAAWrB,WAAX;AAAA;AAAA;AAAA;AAAA;AACL,eAAMS,SAAS,CAACG,gBAAD,EAAmBb,aAAnB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGL;AACF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n// const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\n\r\nconst getDrizzle = (state) => state.appReducers.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n\r\nfunction* testSaga () {\r\n  yield put({ type: 'TESTED_SAGA' });\r\n  //console.log('Hello Sagas!');\r\n}\r\n\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n\r\n  // const drizzle = yield select(getDrizzle);\r\n  // const propAddr = yield drizzle.contracts.ProposalController.methods.getPropTokenIdMap(action.tokenId).call()\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:2});\r\n}\r\n\r\nexport function * appRootSaga() {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n}\r\n  //yield takeEvery(TOKEN_ID_FETCH, fetchTokenId);\r\n// =======\r\n//   yield put({ type: 'GOT_PROP_ADDRESS', propAddress:action.tokenId });\r\n// }\r\n\r\n// function* appRootSaga() {\r\n//   yield takeLatest(TEST_SAGA, testSaga);\r\n//   yield takeLatest(GET_PROP_ADDRESS, fetchPropAddr);\r\n//   yield takeLatest(TOKEN_ID_FETCH, fetchTokenId);\r\n// >>>>>>> parent of f1ec14dc... props address working but not with drizzleStore\r\n// }\r\n\r\n//export default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}