{"ast":null,"code":"import React from 'react';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\nimport drizzleOptions from \"../EthComponents/drizzleOptions\"; //CREATE STORE\n\nimport root from './sagas/root';\nimport reducer from './reducers/reducer.js'; //GENERATE STORE\n\nimport appRootSaga from './sagas/appSagas';\nimport appReducer from './reducers/appReducers.js';\nimport rootSagas from './sagas/rootSaga'; //APPMIDDLEWARES\n\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\nconst contractEventNotifier = contractEventSaga;\nconst joinTransactionComplete = joinTransactionSaga;\nconst appMiddlewares = [contractEventNotifier(), joinTransactionComplete]; //GENERATE STORE\n\nconst appReducers = {\n  appReducers: appReducer\n};\nconst appSagas = [appRootSaga];\n\nconst drizzleMiddleware = drizzleInstance => store => next => action => {\n  const type = action.type;\n\n  if (type === DrizzleActions.DRIZZLE_INITIALIZING) {\n    drizzleInstance = action.drizzle;\n  }\n\n  if (type === AccountsActions.ACCOUNTS_FETCHED && drizzleInstance && drizzleInstance.contractList.length) {\n    const newAccount = action.accounts[0];\n    const oldAccount = drizzleInstance.contractList[0].options.from; // Update `from` fields with newAccount\n\n    if (oldAccount !== newAccount) {\n      drizzleInstance.contractList.forEach(contract => {\n        contract.options.from = newAccount;\n      });\n    }\n  }\n\n  if (type === ContractActions.ADD_CONTRACT && drizzleInstance) {\n    try {\n      const contractConfig = action.contractConfig,\n            events = action.events;\n      drizzleInstance.addContract(contractConfig, events);\n    } catch (error) {\n      console.error('Attempt to add a duplicate contract.\\n', error); // Notify user via\n\n      const notificationAction = {\n        type: ContractActions.ERROR_ADD_CONTRACT,\n        error,\n        attemptedAction: action\n      };\n      store.dispatch(notificationAction); // Don't propogate current action\n\n      return;\n    }\n  }\n\n  return next(action);\n};\n\nconst initializedMiddleware = drizzleMiddleware(undefined); //return initializedMiddleware;\n//CREATE STORE\n\nconst initialState = {\n  contracts: generateContractsInitialState(drizzleOptions)\n};\nconst sagaMiddleware = createSagaMiddleware();\nconst allMiddlewares = [...appMiddlewares, sagaMiddleware, drizzleMiddleware];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...allMiddlewares)));\nsagaMiddleware.run(root); // const store = generateStore({\n//   drizzleOptions,\n//   appReducers,\n//   appSagas,\n//   appMiddlewares\n//   //disableReduxDevTools: false  \n// })\n\nexport default store;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/index.js"],"names":["React","composeWithDevTools","createSagaMiddleware","createStore","applyMiddleware","compose","DrizzleContext","DrizzleProvider","generateStore","generateContractsInitialState","drizzleOptions","root","reducer","appRootSaga","appReducer","rootSagas","contractEventSaga","joinTransactionSaga","contractEventNotifier","joinTransactionComplete","appMiddlewares","appReducers","appSagas","drizzleMiddleware","drizzleInstance","store","next","action","type","DrizzleActions","DRIZZLE_INITIALIZING","drizzle","AccountsActions","ACCOUNTS_FETCHED","contractList","length","newAccount","accounts","oldAccount","options","from","forEach","contract","ContractActions","ADD_CONTRACT","contractConfig","events","addContract","error","console","notificationAction","ERROR_ADD_CONTRACT","attemptedAction","dispatch","initializedMiddleware","undefined","initialState","contracts","sagaMiddleware","allMiddlewares","run"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { DrizzleContext, DrizzleProvider } from \"@drizzle/react-plugin\";  \r\nimport { generateStore, generateContractsInitialState } from \"@drizzle/store\";\r\nimport drizzleOptions from \"../EthComponents/drizzleOptions\";\r\n\r\n//CREATE STORE\r\nimport root from './sagas/root';\r\nimport reducer from './reducers/reducer.js'\r\n\r\n//GENERATE STORE\r\nimport appRootSaga from './sagas/appSagas';\r\nimport appReducer from './reducers/appReducers.js'\r\nimport rootSagas from './sagas/rootSaga';\r\n\r\n\r\n\r\n//APPMIDDLEWARES\r\nimport { contractEventSaga, joinTransactionSaga } from './capMiddleWare';\r\nconst contractEventNotifier = contractEventSaga;\r\nconst joinTransactionComplete = joinTransactionSaga;\r\nconst appMiddlewares = [ contractEventNotifier(), joinTransactionComplete ];\r\n\r\n//GENERATE STORE\r\nconst appReducers = {appReducers: appReducer};\r\nconst appSagas = [appRootSaga];\r\n\r\n\r\nconst drizzleMiddleware = drizzleInstance => store => next => action => {\r\n  const { type } = action\r\n\r\n  if (type === DrizzleActions.DRIZZLE_INITIALIZING) {\r\n    drizzleInstance = action.drizzle\r\n  }\r\n\r\n  if (\r\n    type === AccountsActions.ACCOUNTS_FETCHED &&\r\n    drizzleInstance &&\r\n    drizzleInstance.contractList.length\r\n  ) {\r\n    const newAccount = action.accounts[0]\r\n    const oldAccount = drizzleInstance.contractList[0].options.from\r\n\r\n    // Update `from` fields with newAccount\r\n    if (oldAccount !== newAccount) {\r\n      drizzleInstance.contractList.forEach(contract => {\r\n        contract.options.from = newAccount\r\n      })\r\n    }\r\n  }\r\n\r\n  if (type === ContractActions.ADD_CONTRACT && drizzleInstance) {\r\n    try {\r\n      const { contractConfig, events } = action\r\n      drizzleInstance.addContract(contractConfig, events)\r\n    } catch (error) {\r\n      console.error('Attempt to add a duplicate contract.\\n', error)\r\n\r\n      // Notify user via\r\n      const notificationAction = {\r\n        type: ContractActions.ERROR_ADD_CONTRACT,\r\n        error,\r\n        attemptedAction: action\r\n      }\r\n      store.dispatch(notificationAction)\r\n\r\n      // Don't propogate current action\r\n      return\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nconst initializedMiddleware = drizzleMiddleware(undefined)\r\n//return initializedMiddleware;\r\n\r\n//CREATE STORE\r\nconst initialState = {\r\n  contracts: generateContractsInitialState(drizzleOptions)\r\n};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst allMiddlewares = [...appMiddlewares, sagaMiddleware, drizzleMiddleware];\r\n\r\nconst store = createStore(\r\n      reducer,\r\n      initialState,\r\n    composeWithDevTools(\r\n      applyMiddleware(\r\n        ...allMiddlewares\r\n      )\r\n    )\r\n);\r\n\r\nsagaMiddleware.run(root);\r\n\r\n\r\n// const store = generateStore({\r\n//   drizzleOptions,\r\n//   appReducers,\r\n//   appSagas,\r\n//   appMiddlewares\r\n//   //disableReduxDevTools: false  \r\n// })\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}