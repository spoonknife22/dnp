{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\NominationDetailsLink.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { Button } from \"shards-react\";\n\nconst NominationDetailsLink = ({\n  parcel,\n  getTokenId,\n  tokenIdState,\n  txSuccessful\n}) => {\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const fetchDetailsLink = async () => {\n      const graphql = JSON.stringify({\n        query: `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\n      });\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n      fetch(proxyUrl + targetUrl, {\n        method: \"POST\",\n        headers: myHeaders,\n        body: graphql,\n        variables: {},\n        redirect: 'follow'\n      }).then(res => res.json()).then(result => {\n        const parcelData = result.data.parcels[0];\n        const gotTokenId = parcelData.tokenId;\n        setTokenId(gotTokenId);\n      });\n    };\n  });\n  return __jsx(Accordion, {\n    defaultActiveKey: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \" \", console.log(tokenIdState), __jsx(Accordion.Toggle, {\n    as: Button,\n    variant: \"link\",\n    eventKey: \"0\",\n    outline: true,\n    theme: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Asset Details\")), __jsx(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mt-3 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: getTokenId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }, \"Token\")), __jsx(\"a\", {\n    href: `https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/` + tokenId,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Decentraland\"))))));\n};\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.dappReducer.tokenId,\n  txSuccessful: state.dappReducer.txSuccessful,\n  checkMetaMask: state.dappReducer.checkMetaMask,\n  metaMaskReject: state.dappReducer.metaMaskReject\n});\n\nconst getTokenId = tokenId => ({\n  type: \"GET_TOKEN_ID\",\n  tokenId: 2\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: () => dispatch(getTokenId())\n}); // const getTokenId = () => ({ type: \"GET_TOKEN_ID\" });\n// const mapDispatchToProps = (dispatch) => ({\n//   getTokenId: () => dispatch(getTokenId()),\n// });\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/NominationDetailsLink.js"],"names":["React","useState","useEffect","connect","Accordion","Button","NominationDetailsLink","parcel","getTokenId","tokenIdState","txSuccessful","tokenId","setTokenId","loading","setLoading","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","gotTokenId","console","log","mapStateToProps","state","dappReducer","checkMetaMask","metaMaskReject","type","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { Button } from \"shards-react\";\r\n\r\nconst NominationDetailsLink = ({ parcel, getTokenId, tokenIdState, txSuccessful }) => { \r\n\r\n  const [tokenId, setTokenId] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n  const myHeaders = new Headers();  \r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  const fetchDetailsLink = async () => {\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n})\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        const parcelData = result.data.parcels[0];\r\n        const gotTokenId = parcelData.tokenId;\r\n        setTokenId(gotTokenId);\r\n    });\r\n \r\n  } \r\n});\r\n \r\nreturn (\r\n    <Accordion defaultActiveKey=\"1\">\r\n      <div> {console.log(tokenIdState)}\r\n        <Accordion.Toggle as={Button}  variant=\"link\" eventKey=\"0\" outline theme=\"light\">\r\n        <div>Asset Details</div>\r\n        </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <div className=\"p-3 mt-3 border rounded\">\r\n              <div>\r\n              <div>\r\n                  <Button onClick={getTokenId}>Token</Button>\r\n              </div>\r\n                <a href={`https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/`+ tokenId}  target=\"_blank\">Decentraland</a>\r\n              </div>\r\n            </div>\r\n          </Accordion.Collapse>\r\n      </div> \r\n    </Accordion>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tokenIdState: state.dappReducer.tokenId,\r\n  txSuccessful: state.dappReducer.txSuccessful,\r\n  checkMetaMask: state.dappReducer.checkMetaMask,\r\n  metaMaskReject: state.dappReducer.metaMaskReject\r\n})\r\n\r\n\r\n\r\nconst getTokenId = (tokenId) => ({ type: \"GET_TOKEN_ID\", tokenId:2 });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTokenId: () => dispatch(getTokenId()),\r\n});\r\n\r\n// const getTokenId = () => ({ type: \"GET_TOKEN_ID\" });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   getTokenId: () => dispatch(getTokenId()),\r\n// });\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);\r\n\r\n"]},"metadata":{},"sourceType":"module"}