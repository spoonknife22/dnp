{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\forms\\\\InterMediateForm.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nconst InterMediateForm = ({\n  drizzle,\n  drizzleState,\n  assetPrice,\n  propAddress,\n  tokenId\n}) => {\n  const contract = drizzle.contracts[\"\".concat(propAddress)];\n\n  const _useState = useState(null),\n        status = _useState[0],\n        setProposalSatus = _useState[1]; // useEffect(() => {\n  //   fetchProposalStatus();\n  // }, [propAddress])\n\n\n  const fetchProposalStatus = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var dataKey;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            dataKey = contract.methods['proposals'].cacheCall(tokenId);\n            setProposalSatus(dataKey);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function fetchProposalStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }(); //fetchProposalStatus()[];\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 3\n    }\n  }, status);\n};\n\nexport default InterMediateForm; // class InterMediateForm extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       dataKey:null\n//     }\n//   }\n//   componentDidMount() {\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\n//     const contract = drizzle.contracts[`${propAddress}`];\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\n//         this.setState({\n//           dataKey\n//         });\n//   }\n//  async componentDidMount() {   \n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\n//     //let state = drizzle.store.getState();\n//     if (drizzleState.drizzleStatus.initialized && propAddress ) {\n//     const contract =  await drizzle.contracts[`${propAddress}`];\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\n//     this.setState({\n//       dataKey\n//     });\n//     const propContracts = drizzleState.contracts[`${propAddress}`];\n//     const displayData = propContracts.proposals[this.state.dataKey]; \n//     const proposalStatus =  displayData && displayData.value.status;\n//     console.log(proposalStatus)\n//    }\n//   // else{\n//   //   console.log('loading')\n//   // }\n//   return \"Loading...\";\n//   }\n// render() {\n//   const { drizzle, propAddress } = this.props;\n//   const contract = this.props.drizzleState.contracts[`${propAddress}`];\n//   console.log(this.props.drizzle.contracts)\n// let state = drizzle.store.getState();\n// if (state.drizzleStatus.initialized) {\n//   const propContract = state.contracts[`${propAddress}`];\n// const displayData = propContract.methods['getSummary'][this.state.dataKey]; \n// const userId =  displayData && displayData.value;\n// console.log(userId)\n//}\n// console.log(this.state.dataKey)\n//     const displayData = contract.proposals[this.state.dataKey]; \n//     const userId =  displayData && displayData.value;\n//     return (\n//      <div>\n//        'dddd'{useId}\n//      </div>\n//     )\n//   }\n// }   \n// const mapStateToProps = (state) => ({\n//   proposalStorage: state.appReducers.proposalStorage\n// })\n// const mapDispatchToProps = (dispatch) => ({\n//   getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/forms/InterMediateForm.js"],"names":["React","useEffect","useState","connect","InterMediateForm","drizzle","drizzleState","assetPrice","propAddress","tokenId","contract","contracts","status","setProposalSatus","fetchProposalStatus","dataKey","methods","cacheCall"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAGA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA,UAAzB;AAAqCC,EAAAA,WAArC;AAAkDC,EAAAA;AAAlD,CAAD,KAAiE;AACxF,QAAMC,QAAQ,GAAGL,OAAO,CAACM,SAAR,WAAqBH,WAArB,EAAjB;;AADwF,oBAEvDN,QAAQ,CAAC,IAAD,CAF+C;AAAA,QAEnFU,MAFmF;AAAA,QAE3EC,gBAF2E,iBAKtF;AACA;AACA;;;AAEA,QAAMC,mBAAmB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAEpBC,YAAAA,OAFoB,GAEVL,QAAQ,CAACM,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCR,OAAxC,CAFU;AAG1BI,YAAAA,gBAAgB,CAACE,OAAD,CAAhB;;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBD,mBAAmB;AAAA;AAAA;AAAA,KAAzB,CATsF,CAetF;;;AAEJ,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MADH,CADF;AAQC,CAzBD;;AA2BA,eAAeR,gBAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst InterMediateForm = ({ drizzle, drizzleState, assetPrice, propAddress, tokenId }) => {     \r\n  const contract = drizzle.contracts[`${propAddress}`];\r\nconst [status, setProposalSatus] = useState(null);\r\n\r\n\r\n    // useEffect(() => {\r\n    //   fetchProposalStatus();\r\n    // }, [propAddress])\r\n\r\n    const fetchProposalStatus = async () => { \r\n    \r\n      const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n      setProposalSatus(dataKey);\r\n    }\r\n\r\n    //fetchProposalStatus()[];\r\n\r\nreturn (\r\n  <div>\r\n    {status}\r\n  </div>\r\n)\r\n\r\n\r\n\r\n}\r\n\r\nexport default InterMediateForm;   \r\n// class InterMediateForm extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       dataKey:null\r\n//     }\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n//     const contract = drizzle.contracts[`${propAddress}`];\r\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n//         this.setState({\r\n//           dataKey\r\n//         });\r\n//   }\r\n//  async componentDidMount() {   \r\n//     const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n//     //let state = drizzle.store.getState();\r\n//     if (drizzleState.drizzleStatus.initialized && propAddress ) {\r\n//     const contract =  await drizzle.contracts[`${propAddress}`];\r\n//     const dataKey = contract.methods['proposals'].cacheCall(tokenId);\r\n//     this.setState({\r\n//       dataKey\r\n//     });\r\n//     const propContracts = drizzleState.contracts[`${propAddress}`];\r\n//     const displayData = propContracts.proposals[this.state.dataKey]; \r\n//     const proposalStatus =  displayData && displayData.value.status;\r\n//     console.log(proposalStatus)\r\n//    }\r\n//   // else{\r\n//   //   console.log('loading')\r\n//   // }\r\n//   return \"Loading...\";\r\n//   }\r\n  \r\n  // render() {\r\n  //   const { drizzle, propAddress } = this.props;\r\n  //   const contract = this.props.drizzleState.contracts[`${propAddress}`];\r\n  //   console.log(this.props.drizzle.contracts)\r\n    // let state = drizzle.store.getState();\r\n    // if (state.drizzleStatus.initialized) {\r\n    //   const propContract = state.contracts[`${propAddress}`];\r\n    // const displayData = propContract.methods['getSummary'][this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n    // console.log(userId)\r\n    //}\r\n    // console.log(this.state.dataKey)\r\n    \r\n//     const displayData = contract.proposals[this.state.dataKey]; \r\n//     const userId =  displayData && displayData.value;\r\n//     return (\r\n//      <div>\r\n//        'dddd'{useId}\r\n//      </div>\r\n//     )\r\n//   }\r\n// }   \r\n\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   proposalStorage: state.appReducers.proposalStorage\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}