{"ast":null,"code":"import { EventActions, drizzleSagas } from \"@drizzle/store\";\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = `${transactionHash}`;\n    toast.success(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = `${message}`;\n      toast.success(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n} // const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_PROCESSING_DONE\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful); // yield all(\n  //  drizzleSagas.map(saga => fork(saga))\n  // );\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","TX_PROCESSING","TX_PROCESSING_DONE","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","success","position","POSITION","BOTTOM_LEFT","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","TOP_RIGHT","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,GAAI,GAAEF,eAAgB,EAA7C;AACAR,IAAAA,KAAK,CAACW,OAAN,CAAcD,iBAAd,EAAiC;AAAEE,MAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeC;AAA3B,KAAjC;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBjB,YAAY,CAAC2B,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,GAAI,GAAEH,OAAQ,EAA3B;AACApB,MAAAA,KAAK,CAACW,OAAN,CAAcY,OAAd,EAAuB;AAAEX,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeW;AAA3B,OAAvB;AACF;AACF;;AACD,SAAOnB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;;AAaP,UAAUmB,mBAAV,GAAgC;AAC9B,QAAM9B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUmB,cAAV,GAA2B;AACzB,QAAM/B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUoB,iBAAV,GAA8B;AAC5B,QAAMhC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUqB,gBAAV,GAA6B;AAC3B,QAAMjC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAT;AACA,C,CAEF;AACA;;;AAEA,UAAU4B,YAAV,GAAyB;AACvB,QAAMlC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAU4B,WAAV,GAAwB;AACtB,QAAMpC,UAAU,CAAC,iBAAD,EAAoB+B,mBAApB,CAAhB;AACA,QAAM/B,UAAU,CAAC,UAAD,EAAagC,cAAb,CAAhB;AACA,QAAMhC,UAAU,CAAC,gBAAD,EAAmBkC,gBAAnB,CAAhB;AACA,QAAMlC,UAAU,CAAC,eAAD,EAAkBmC,YAAlB,CAAhB,CAJsB,CAKtB;AACA;AACA;AACD;;AAED,OAAO,MAAME,QAAQ,GAAG,CAACD,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions, drizzleSagas } from \"@drizzle/store\";\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\n \r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast.success(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.success(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\nfunction* txSuccessful() {\r\n  yield put({ type: TX_PROCESSING_DONE});\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction* appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  // yield all(\r\n  //  drizzleSagas.map(saga => fork(saga))\r\n  // );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}