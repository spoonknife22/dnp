{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null,\n      userId: null\n    });\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage;\n    const account = drizzleState.accounts[0]; //let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\n\n    let userId = drizzle.contracts.UserStorage.methods.addresses(account).call();\n    const ataKey = drizzle.contracts.UserStorage.methods.profiles([1]).call(); //let userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0]);\n    //let dataKey = contract.methods[\"profiles\"].cacheCall(userId);\n\n    this.setState({\n      ataKey\n    });\n  }\n\n  render() {\n    const dataKey = this.props.drizzleState.UserStorage.methods.profiles([1]).call();\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    console.log(this.state.dataKey); //  const profile = UserStorage.profiles[this.state.dataKey];\n    //username: Web3.utils.toAscii(username),\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 6\n      }\n    }, \"Hi: \", this.state.username);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","userId","componentDidMount","drizzle","drizzleState","props","contract","contracts","UserStorage","account","accounts","methods","addresses","call","ataKey","profiles","setState","render","displayData","state","console","log","username"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KADiC;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGL,YAAY,CAACM,QAAb,CAAsB,CAAtB,CAAhB,CAHkB,CAKlB;;AACA,QAAIT,MAAM,GAAGE,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8BG,OAA9B,CAAsCC,SAAtC,CAAgDH,OAAhD,EAAyDI,IAAzD,EAAb;AACA,UAAMC,MAAM,GAAGX,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8BG,OAA9B,CAAsCI,QAAtC,CAA+C,CAAC,CAAD,CAA/C,EAAoDF,IAApD,EAAf,CAPkB,CAQlB;AACA;;AACA,SAAKG,QAAL,CAAc;AAAEF,MAAAA;AAAF,KAAd;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACR,UAAMjB,OAAO,GAAG,KAAKK,KAAL,CAAWD,YAAX,CAAwBI,WAAxB,CAAoCG,OAApC,CAA4CI,QAA5C,CAAqD,CAAC,CAAD,CAArD,EAA0DF,IAA1D,EAAhB;AAEC,UAAM;AAAEL,MAAAA;AAAF,QAAkB,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAAhD;AACA,UAAMW,WAAW,GAAGV,WAAW,CAACO,QAAZ,CAAqB,KAAKI,KAAL,CAAWnB,OAAhC,CAApB,CAJO,CAIuD;;AAC9DoB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWnB,OAAvB,EALO,CAMR;AAGC;;AAEA,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQ,KAAKmB,KAAL,CAAWG,QAAnB,CAFF;AAID;;AA/BwC;;AAkC1C,eAAexB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null, userId: null };\r\n\r\n componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n   const account = drizzleState.accounts[0];\r\n   \r\n   //let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\r\n   let userId = drizzle.contracts.UserStorage.methods.addresses(account).call()\r\n   const ataKey = drizzle.contracts.UserStorage.methods.profiles([1]).call()\r\n   //let userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0]);\r\n   //let dataKey = contract.methods[\"profiles\"].cacheCall(userId);\r\n   this.setState({ ataKey  });\r\n }\r\n\r\n render() {\r\n  const dataKey = this.props.drizzleState.UserStorage.methods.profiles([1]).call()\r\n\r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   console.log(this.state.dataKey)\r\n  //  const profile = UserStorage.profiles[this.state.dataKey];\r\n\r\n   \r\n   //username: Web3.utils.toAscii(username),\r\n\r\n   return (\r\n    \r\n     <p>Hi: {this.state.username}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}