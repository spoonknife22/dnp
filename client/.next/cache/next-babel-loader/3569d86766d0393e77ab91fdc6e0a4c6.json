{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(transactionProcessing),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(txSuccessful),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\n\nfunction transactionProcessing() {\n  return _regeneratorRuntime.wrap(function transactionProcessing$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TX_PROCESSING'\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction txSuccessful() {\n  return _regeneratorRuntime.wrap(function txSuccessful$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'TX_PROCESSING_DONE'\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction fetchPropAddr(action) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 33\n        });\n\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nfunction appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return takeEvery(TX_BROADCASTED, transactionProcessing);\n\n      case 2:\n        _context4.next = 4;\n        return takeLatest('TX_SUCCESSFUL', txSuccessful);\n\n      case 4:\n        _context4.next = 6;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 6:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["transactionProcessing","txSuccessful","fetchPropAddr","appRootSaga","put","takeEvery","GET_PROP_ADDRESS","TX_BROADCASTED","TX_PROCESSING_DONE","type","action","propAddress","takeLatest"],"mappings":";;oDAMUA,qB;qDAIAC,Y;qDAIAC,a;qDAIAC,W;;AAlBV,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;;AAEA,SAAUR,qBAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMI,GAAG,CAAC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUR,YAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMG,GAAG,CAAC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUP,aAAV,CAAyBQ,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMN,GAAG,CAAC;AAAEK,UAAAA,IAAI,EAAC,kBAAP;AAA2BE,UAAAA,WAAW,EAAC;AAAvC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUR,WAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,SAAS,CAACE,cAAD,EAAiBP,qBAAjB,CAAf;;AADF;AAAA;AAEE,eAAMY,UAAU,CAAC,eAAD,EAAkBX,YAAlB,CAAhB;;AAFF;AAAA;AAGE,eAAMI,SAAS,CAACC,gBAAD,EAAmBJ,aAAnB,CAAf;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeC,WAAf","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\n\r\nfunction* transactionProcessing() {\r\n  yield put({ type: 'TX_PROCESSING'});\r\n}\r\n\r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_PROCESSING_DONE'});\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type:'GOT_PROP_ADDRESS', propAddress:33});\r\n}\r\n\r\nfunction* appRootSaga () {\r\n  yield takeEvery(TX_BROADCASTED, transactionProcessing);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\r\n}\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}