{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport UserInfo from \"./UserInfo\";\nimport MyAddBar from \"./AddressBar.js\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { newContextComponents } from \"@drizzle/react-components\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\";\nimport { Loader } from 'rimble-ui';\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\nconst {\n  ContractData\n} = newContextComponents;\nconst drizzle = new Drizzle(options);\n\nconst AccountsContainer = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return __jsx(Loader, {\n        size: \"30px\",\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const account = drizzleState.accounts[0]; //const acount = drizzleState.accounts[0];\n\n    const member = async () => {\n      const isMember = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\n      let button;\n\n      if (isMember) {\n        console.log('hello');\n        return __jsx(MyAddBar, {\n          drizzleState: drizzleState,\n          drizzle: drizzle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 24\n          }\n        });\n      } else {\n        console.log('hello');\n        return __jsx(JoinButton, {\n          drizzleState: drizzleState,\n          drizzle: drizzle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 26\n          }\n        });\n      }\n    };\n\n    console.log({\n      member\n    });\n\n    if (typeof {\n      member\n    } === \"object\") {\n      var i = 0;\n      const displayObjectProps = [];\n      Object.keys(member).forEach(key => {\n        if (i != key) {\n          displayObjectProps.push(__jsx(\"li\", {\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 23\n            }\n          }, __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }\n          }, key), pendingSpinner, __jsx(\"br\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 25\n            }\n          }), \"\".concat(member[key])));\n        }\n\n        i++;\n      });\n      return __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 26\n        }\n      }, \"www\", displayObjectProps[1]);\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 22\n      }\n    }, \"dja;ldfj\");\n  }));\n};\n\nexport default AccountsContainer;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","UserInfo","MyAddBar","DrizzleContext","newContextComponents","Drizzle","options","Loader","JoinButton","ContractData","drizzle","AccountsContainer","drizzleContext","drizzleState","initialized","account","accounts","member","isMember","contracts","UserStorage","methods","addresses","call","button","console","log","i","displayObjectProps","Object","keys","forEach","key","push","pendingSpinner"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport UserInfo from \"./UserInfo\"; \r\nimport MyAddBar from \"./AddressBar.js\"; \r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\nimport {  Loader } from 'rimble-ui';\r\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\r\n\r\nconst { ContractData } = newContextComponents;\r\nconst drizzle = new Drizzle(options);\r\n\r\nconst AccountsContainer = () => {\r\n \r\n  return  (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized } = drizzleContext;\r\n\r\n          if(!initialized) {\r\n            return <Loader size=\"30px\" color=\"white\" />\r\n          }\r\n      \r\n            const account = drizzleState.accounts[0];\r\n\r\n             \r\n         \r\n              //const acount = drizzleState.accounts[0];\r\n            \r\n              const member = async () => {\r\n              const isMember = await drizzle.contracts.UserStorage.methods.addresses(drizzleState.accounts[0]).call();\r\n              let button;\r\n              if (isMember) {\r\n                console.log('hello')\r\n                return <MyAddBar drizzleState={drizzleState} drizzle={drizzle} /> \r\n                } else {\r\n                  console.log('hello')\r\n                  return <JoinButton drizzleState={drizzleState} drizzle={drizzle} />\r\n                }\r\n                \r\n              } \r\n            console.log({member})\r\n              if (typeof {member} === \"object\") {\r\n                var i = 0;\r\n                const displayObjectProps = [];\r\n          \r\n                Object.keys(member).forEach(key => {\r\n                  if (i != key) {\r\n                    displayObjectProps.push(\r\n                      <li key={i}>\r\n                        <strong>{key}</strong>\r\n                        {pendingSpinner}\r\n                        <br />\r\n                        {`${member[key]}`}\r\n                      </li>,\r\n                    );\r\n                  }\r\n          \r\n                  i++;\r\n                });\r\n                return   <ul>www{displayObjectProps[1]}</ul>;\r\n               \r\n             }\r\n\r\n              return <div>dja;ldfj</div>\r\n            \r\n            \r\n          \r\n          \r\n            \r\n          \r\n     \r\n\r\n        }}\r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n);\r\n  \r\n}\r\nexport default AccountsContainer;"]},"metadata":{},"sourceType":"module"}