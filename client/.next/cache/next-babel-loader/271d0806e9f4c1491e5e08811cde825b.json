{"ast":null,"code":"import { EventActions, drizzleReducers } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\n\nconst getDrizzle = state => drizzleReducers.drizzle;\n\nexport const createUser = async username => {\n  const drizzle = select(getDrizzle);\n  let state = drizzle.store.getState();\n  const contract = drizzle.contracts.UserController;\n  const uname = Web3.utils.fromAscii(username);\n  contract.methods[\"createUser\"].cacheSend(uname);\n};\nexport const contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = `${message}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n};\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const display = `${transactionHash}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n};\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_DONE\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["EventActions","drizzleReducers","all","fork","takeLatest","put","call","take","race","select","toast","TX_DONE","TX_PROCESSING","getDrizzle","state","drizzle","createUser","username","store","getState","contract","contracts","UserController","uname","Web3","utils","fromAscii","methods","cacheSend","contractEventSaga","next","action","type","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT","joinTransactionSaga","transactionHash","txHash","BOTTOM_LEFT","showTxErrorMsg","fetchTransaction","txSuccessful","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,EAAuBC,eAAvB,QAA8C,gBAA9C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAWb,eAAe,CAACc,OAA9C;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAP,IAAoB;AAC5C,QAAMF,OAAO,GAAGN,MAAM,CAACI,UAAD,CAAtB;AACA,MAAIC,KAAK,GAAGC,OAAO,CAACG,KAAR,CAAcC,QAAd,EAAZ;AACA,QAAMC,QAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkBC,cAAnC;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,SAAX,CAAqBT,QAArB,CAAd;AACAG,EAAAA,QAAQ,CAACO,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,CAAyCL,KAAzC;AACD,CANM;AASP,OAAO,MAAMM,iBAAiB,GAAGX,KAAK,IAAIY,IAAI,IAAIC,MAAM,IAAI;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgBhC,YAAY,CAACiC,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,GAAI,GAAEJ,OAAQ,EAA3B;AAEAxB,IAAAA,KAAK,CAAC6B,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAE9B,KAAK,CAAC+B,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,CARM;AAWP,OAAO,MAAMY,mBAAmB,GAAGzB,KAAK,IAAIY,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMY,eAAe,GAAGb,MAAM,CAACc,MAA/B;AACA,UAAMP,OAAO,GAAI,GAAEM,eAAgB,EAAnC;AAEAlC,IAAAA,KAAK,CAAC6B,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAE9B,KAAK,CAAC+B,QAAN,CAAeK;AAA3B,KAAvB;AACD;;AACD,SAAOhB,IAAI,CAACC,MAAD,CAAX;AACD,CARM;;AAWP,UAAUgB,cAAV,GAA2B;AACzB,QAAM1C,GAAG,CAAC;AAAE2B,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAGD,UAAUgB,gBAAV,GAA6B;AAC3B,QAAM3C,GAAG,CAAC;AAAE2B,IAAAA,IAAI,EAAEpB;AAAR,GAAD,CAAT;AACA;;AAGF,UAAUqC,YAAV,GAAyB;AACvB,QAAM5C,GAAG,CAAC;AAAE2B,IAAAA,IAAI,EAAErB;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAUuC,WAAV,GAAwB;AACvB,QAAM9C,UAAU,CAAC,gBAAD,EAAmB4C,gBAAnB,CAAhB;AACA,QAAM5C,UAAU,CAAC,eAAD,EAAkB6C,YAAlB,CAAhB;AACA;;AAED,OAAO,MAAME,QAAQ,GAAG,CAACD,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions, drizzleReducers } from '@drizzle/store';\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\n\r\n\r\nconst getDrizzle = (state) => drizzleReducers.drizzle;\r\n\r\nexport const createUser = async (username) => {\r\n  const drizzle = select(getDrizzle);\r\n  let state = drizzle.store.getState();\r\n  const contract = drizzle.contracts.UserController;\r\n  const uname = Web3.utils.fromAscii(username);\r\n  contract.methods[\"createUser\"].cacheSend(uname);\r\n}\r\n\r\n\r\nexport const contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    const display = `${transactionHash}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\n\r\nfunction *fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n \r\nfunction *txSuccessful() {\r\n  yield put({ type: TX_DONE});\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction *appRootSaga() {\r\n yield takeLatest('TX_BROADCASTED', fetchTransaction)\r\n yield takeLatest('TX_SUCCESSFUL', txSuccessful)\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}