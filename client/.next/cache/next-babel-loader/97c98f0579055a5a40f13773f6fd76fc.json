{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev_Account\\\\dnp\\\\client\\\\pages\\\\openseasdk.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport { Container } from \"shards-react\";\nimport OsSdk from '../components/api/OsSdk.js';\nimport OutterOsSdk from '../components/api/OutterOsSdk.js';\nimport TestOsSdk from '../components/api/TestOsSdk.js';\nimport { Page, Center } from '../components/layout/Layout.js';\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Loader } from 'rimble-ui';\nexport default class SdkPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null\n    });\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var proxyUrl, targetUrl, collectionSlug, collection, i, tokenIdArray;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            //const [loading, setLoading] = useState(false);\n            //const [projectTokenIds, setprojectTokenIds] = useState([]);\n            //const [projectTokenIdArray, setprojectTokenIdArray] = useState([]);\n            //const fetchStats = async () => { \n            proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.opensea.io/api/v1/collection/';\n            collectionSlug = 'doodles-official/';\n            collection = 'stats';\n            tokenIdArray = [];\n            console.log(tokenIdArray); //setprojectTokenIds(tokenIdArray);\n\n            try {\n              fetch(targetUrl + collectionSlug + collection, {\n                header: 'x-api-key:2f2a0900458f4bdfbb489680a58e7526'\n              }).then(res => res.json()).then(res => {\n                const projectTotal = res.stats.count;\n\n                _this.setState({\n                  projectTotal\n                });\n\n                for (i = 0; i < res.stats.count; i++) {\n                  tokenIdArray.push(i);\n                }\n\n                error => {\n                  setLoading(true), error;\n                };\n              }).then(() => {\n                const dataKey = tokenIdArray;\n\n                _this.setState({\n                  dataKey\n                });\n\n                error => {\n                  setLoading(true), error;\n                };\n              }); // this.setState({ dataKey });\n            } catch (err) {\n              _this.setState({\n                errorMessage: err.message\n              });\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, __jsx(Page, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, __jsx(Center, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, __jsx(DrizzleContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, drizzleContext => {\n      const drizzle = drizzleContext.drizzle,\n            drizzleState = drizzleContext.drizzleState,\n            initialized = drizzleContext.initialized;\n\n      if (!initialized) {\n        return __jsx(\"div\", {\n          className: \"justify-content-center align-items-center mt-3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }\n        }, __jsx(Loader, {\n          className: \"mx-auto\",\n          color: \"#007bff\",\n          size: \"40px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 31\n          }\n        }));\n      }\n\n      return __jsx(Container, {\n        fluid: true,\n        className: \"d-flex justify-content-center main-container-pp\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }, __jsx(OsSdk, {\n        drizzleState: drizzleState,\n        drizzle: drizzle,\n        tokenIdArray: this.state.dataKey,\n        projectTotal: this.state.projectTotal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 31\n        }\n      }));\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Dev_Account/dnp/client/pages/openseasdk.js"],"names":["React","Component","useEffect","useState","Container","OsSdk","OutterOsSdk","TestOsSdk","Page","Center","DrizzleContext","Loader","SdkPage","dataKey","componentDidMount","proxyUrl","targetUrl","collectionSlug","collection","tokenIdArray","console","log","fetch","header","then","res","json","projectTotal","stats","count","setState","i","push","error","setLoading","err","errorMessage","message","render","drizzleContext","drizzle","drizzleState","initialized","state"],"mappings":"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","sourcesContent":["import  React, { Component, useEffect, useState  } from \"react\";\r\nimport { Container  } from \"shards-react\";\r\nimport OsSdk from '../components/api/OsSdk.js';\r\nimport OutterOsSdk from '../components/api/OutterOsSdk.js';\r\nimport TestOsSdk from '../components/api/TestOsSdk.js';\r\nimport { Page, Center } from '../components/layout/Layout.js';\r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport {  Loader } from 'rimble-ui';\r\n\r\n\r\nexport default class SdkPage extends Component {\r\n   \r\n \r\n\r\nstate = { dataKey: null };\r\n\r\n    async componentDidMount() {\r\n \r\n\r\n        //const [loading, setLoading] = useState(false);\r\n        //const [projectTokenIds, setprojectTokenIds] = useState([]);\r\n        //const [projectTokenIdArray, setprojectTokenIdArray] = useState([]);\r\n        //const fetchStats = async () => { \r\n   \r\n            var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n            targetUrl = 'https://api.opensea.io/api/v1/collection/';\r\n            const collectionSlug= 'doodles-official/';\r\n            const collection='stats';\r\n           \r\n            let i;\r\n            let tokenIdArray= [];\r\n            console.log(tokenIdArray)\r\n            //setprojectTokenIds(tokenIdArray);\r\n            try {\r\n            fetch(targetUrl + collectionSlug + collection,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n              .then(res => res.json())\r\n              .then(\r\n                (res) => {\r\n                   const projectTotal =  res.stats.count;\r\n                   this.setState({ projectTotal})\r\n   \r\n                   for (i = 0; i < res.stats.count; i++) {\r\n                   tokenIdArray.push(i)\r\n                  }           \r\n                  (error) => {\r\n                    setLoading(true),\r\n                    error;\r\n                  }\r\n                })   \r\n                .then( () => {\r\n                    const dataKey = tokenIdArray;\r\n                    this.setState({ dataKey });\r\n                      (error) => {\r\n                        setLoading(true),\r\n                        error;\r\n                      }\r\n                })     \r\n                \r\n    \r\n     // this.setState({ dataKey });\r\n      }\r\n      catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n     }\r\n  \r\n\r\n\r\n\r\nrender() {\r\n    return (    \r\n            <div>\r\n              <Page>\r\n                <Center>\r\n                  <DrizzleContext.Consumer>\r\n                    {drizzleContext => {\r\n                     const {drizzle, drizzleState, initialized } = drizzleContext;\r\n                        if(!initialized) {\r\n                          return (\r\n                            <div className=\"justify-content-center align-items-center mt-3\">   \r\n                              <Loader className=\"mx-auto\" color=\"#007bff\" size=\"40px\" />\r\n                            </div>\r\n                            )\r\n                          }                       \r\n                          return(\r\n                            <Container fluid className=\"d-flex justify-content-center main-container-pp\">                               \r\n                              <OsSdk  drizzleState={drizzleState} drizzle={drizzle} tokenIdArray={this.state.dataKey} projectTotal={this.state.projectTotal} />\r\n                              {/* <TestOsSdk  drizzleState={drizzleState} drizzle={drizzle}  /> */}\r\n                            </Container>\r\n                          )\r\n                       }\r\n                      }  \r\n                  </DrizzleContext.Consumer>\r\n                </Center>\r\n              </Page>    \r\n            </div>\r\n       \r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}