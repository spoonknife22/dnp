{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport { capRootSaga } from './capSagas';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nconst CHECKING_TX_UI = \"CHECKING_TX_UI\";\nconst TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\nconst CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\nconst TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\"; // reducer with initial state\n\nconst initialState = {\n  metaMaskReject: false,\n  checkingTx: false,\n  txSuccessful: false,\n  redirectToHome: false\n};\nexport default function capReducer(state = initialState, action) {\n  switch (action.type) {\n    case TX_ERROR_METAMASK:\n      return _objectSpread({}, state, {\n        checkMetaMask: false,\n        metaMaskReject: true\n      });\n\n    case CHECKING_TX_UI:\n      return _objectSpread({}, state, {\n        checkMetaMask: false,\n        checkingTx: true\n      });\n\n    case CHECKING_TX_UI_DONE:\n      return _objectSpread({}, state, {\n        checkMetaMask: false,\n        checkingTx: false,\n        redirectToHome: false\n      });\n\n    case TX_SUCCESSFUL_UPDATE_UI:\n      return _objectSpread({}, state, {\n        checkingTx: false,\n        txSuccessful: true\n      });\n\n    default:\n      return state;\n  }\n} //const joinTransactionNotifier = joinTransactionSaga;\n//const capReducer = \n// export default combineReducers({\n//   capReducer,\n//   ...drizzleReducers\n// });","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capReducers.js"],"names":["combineReducers","drizzleReducers","capRootSaga","all","fork","takeLatest","put","call","take","race","select","CHECKING_TX_UI","TX_SUCCESSFUL_UPDATE_UI","CHECKING_TX_UI_DONE","TX_ERROR_METAMASK","initialState","metaMaskReject","checkingTx","txSuccessful","redirectToHome","capReducer","state","action","type","checkMetaMask"],"mappings":";;;;;;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,uBAAuB,GAAG,yBAAhC;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,iBAAiB,GAAG,mBAA1B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE,KADG;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,cAAc,EAAE;AAJG,CAArB;AAOA,eAAe,SAASC,UAAT,CAAoBC,KAAK,GAAGN,YAA5B,EAA0CO,MAA1C,EAAkD;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAL;AACE,+BAAYO,KAAZ;AAAmBG,QAAAA,aAAa,EAAE,KAAlC;AAAyCR,QAAAA,cAAc,EAAE;AAAzD;;AACF,SAAKL,cAAL;AACE,+BAAYU,KAAZ;AAAmBG,QAAAA,aAAa,EAAE,KAAlC;AAAyCP,QAAAA,UAAU,EAAE;AAArD;;AACF,SAAKJ,mBAAL;AACE,+BAAYQ,KAAZ;AAAmBG,QAAAA,aAAa,EAAE,KAAlC;AAAyCP,QAAAA,UAAU,EAAE,KAArD;AAA4DE,QAAAA,cAAc,EAAE;AAA5E;;AACF,SAAKP,uBAAL;AACE,+BAAYS,KAAZ;AAAmBJ,QAAAA,UAAU,EAAE,KAA/B;AAAsCC,QAAAA,YAAY,EAAE;AAApD;;AACF;AACE,aAAOG,KAAP;AAVJ;AAYD,C,CAKD;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["\r\nimport { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport { capRootSaga } from './capSagas';\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\n\r\nconst CHECKING_TX_UI = \"CHECKING_TX_UI\";\r\nconst TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\r\nconst CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\r\nconst TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\r\n\r\n// reducer with initial state\r\nconst initialState = {\r\n  metaMaskReject: false,\r\n  checkingTx: false,\r\n  txSuccessful: false,\r\n  redirectToHome: false,\r\n};\r\n\r\nexport default function capReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case TX_ERROR_METAMASK:\r\n      return { ...state, checkMetaMask: false, metaMaskReject: true };\r\n    case CHECKING_TX_UI:\r\n      return { ...state, checkMetaMask: false, checkingTx: true };\r\n    case CHECKING_TX_UI_DONE:\r\n      return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\r\n    case TX_SUCCESSFUL_UPDATE_UI:\r\n      return { ...state, checkingTx: false, txSuccessful: true };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//const joinTransactionNotifier = joinTransactionSaga;\r\n//const capReducer = \r\n\r\n// export default combineReducers({\r\n//   capReducer,\r\n//   ...drizzleReducers\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}