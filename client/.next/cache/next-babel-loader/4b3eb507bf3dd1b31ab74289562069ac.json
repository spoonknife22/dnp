{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport UserInfo from \"./UserInfo\";\nimport MyAddBar from \"./AddressBar.js\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\";\nimport { Loader } from 'rimble-ui';\nconst drizzle = new Drizzle(options);\n\nconst Address = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext; //const { accounts } = drizzleState;\n\n    if (!initialized) {\n      return __jsx(Loader, {\n        size: \"30px\",\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const {\n      accounts\n    } = drizzleState;\n    const account = drizzleState.accounts[0];\n\n    const IsMem = async account => {\n      const isMember = await drizzle.contracts.UserStorage.methods.addresses(accounts[0]).call();\n      return isMember; // if(isMember=false){\n      //   <p>Connect</p>\n    };\n\n    console.log(IsMem());\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, __jsx(MyAddBar, {\n      drizzleState: drizzleState,\n      drizzle: drizzle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport default Address;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","UserInfo","MyAddBar","DrizzleContext","Drizzle","options","Loader","drizzle","Address","drizzleContext","drizzleState","initialized","accounts","account","IsMem","isMember","contracts","UserStorage","methods","addresses","call","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAUC,MAAV,QAAwB,WAAxB;AAEA,MAAMC,OAAO,GAAG,IAAIH,OAAJ,CAAYC,OAAZ,CAAhB;;AAEC,MAAMG,OAAO,GAAG,MAAM;AACrB,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,OAAO,EAAED,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,cAAc,IAAI;AACjB,UAAM;AAACF,MAAAA,OAAD;AAAUG,MAAAA,YAAV;AAAwBC,MAAAA;AAAxB,QAAwCF,cAA9C,CADiB,CAIjB;;AAGA,QAAG,CAACE,WAAJ,EAAiB;AACf,aAAO,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,KAAK,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAeF,YAArB;AACA,UAAMG,OAAO,GAAGH,YAAY,CAACE,QAAb,CAAsB,CAAtB,CAAhB;;AAEA,UAAME,KAAK,GAAG,MAAOD,OAAP,IAAmB;AACjC,YAAME,QAAQ,GAAG,MAAMR,OAAO,CAACS,SAAR,CAAkBC,WAAlB,CAA8BC,OAA9B,CAAsCC,SAAtC,CAAgDP,QAAQ,CAAC,CAAD,CAAxD,EAA6DQ,IAA7D,EAAvB;AACD,aAAOL,QAAP,CAFkC,CAGjC;AACA;AACC,KALD;;AAMAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,EAAjB;AACA,WAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,MAAC,QAAD;AAAU,MAAA,YAAY,EAAEJ,YAAxB;AAAsC,MAAA,OAAO,EAAEH,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFA;AASP,GA/BG,CADF,CADF;AAuCD,CAxCA;;AAyCD,eAAeC,OAAf","sourcesContent":["import React from \"react\";\r\nimport UserInfo from \"./UserInfo\"; \r\nimport MyAddBar from \"./AddressBar.js\"; \r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\nimport {  Loader } from 'rimble-ui';\r\n\r\nconst drizzle = new Drizzle(options);\r\n\r\n const Address = () => {\r\n  return (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized } = drizzleContext;\r\n          \r\n          \r\n          //const { accounts } = drizzleState;\r\n        \r\n\r\n          if(!initialized) {\r\n            return <Loader size=\"30px\" color=\"white\" />\r\n          }\r\n          \r\n          const { accounts } = drizzleState;\r\n          const account = drizzleState.accounts[0];\r\n          \r\n          const IsMem = async (account) => {\r\n          const isMember = await drizzle.contracts.UserStorage.methods.addresses(accounts[0]).call();\r\n         return isMember;\r\n          // if(isMember=false){\r\n          //   <p>Connect</p>\r\n          }\r\n          console.log(IsMem());\r\n          return (\r\n           \r\n          <div>\r\n            {/* <UserInfo drizzleState={drizzleState} drizzle={drizzle} accounts={accounts} /> */}\r\n        \r\n            <MyAddBar drizzleState={drizzleState} drizzle={drizzle} />\r\n          </div>   \r\n    )\r\n  \r\n  }}\r\n  \r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n);\r\n  \r\n}\r\nexport default Address;"]},"metadata":{},"sourceType":"module"}