{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominatedCardsExpired.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport ExpiredNominations from '../ExpiredNominations';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst NominatedCardsExpired = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const nowUnix = moment().valueOf();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    fetchParcels();\n  }, []);\n\n  const fetchParcels = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var proposalContract, deployedAddresses, i, orderIdsArray, address, propData, j, expiredOrdersArray, graphql, targetUrl;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController;\n\n          case 2:\n            proposalContract = _context2.sent;\n            //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\n            deployedAddresses = ['0xC1c3f622372be5242978c9Df1CA194cA762Ca466']; //const deployedAddresses = [\"0x99ba17432A9F5dE1E44eBc14366c64B783D8a4f7\", \"0xb485eC8CB5Fe376B59e0BB0443B5d788B6120911\", \"0x56B5583CfC68469218073bCc08d4a1830bB73dd9\", \"0xC1c3f622372be5242978c9Df1CA194cA762Ca466\"]\n\n            console.log(deployedAddresses);\n            orderIdsArray = [];\n            i = 0;\n\n          case 7:\n            if (!(i < deployedAddresses.length)) {\n              _context2.next = 16;\n              break;\n            }\n\n            address = deployedAddresses[i];\n            _context2.next = 11;\n            return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n          case 11:\n            propData = _context2.sent;\n            orderIdsArray.push(propData[2]);\n\n          case 13:\n            i++;\n            _context2.next = 7;\n            break;\n\n          case 16:\n            expiredOrdersArray = []; //let orderId = [\"0xc99701f31fe9427afb81e2534a9eba054982c20418e97eaad46c0e42a5c07e8b\"];\n\n            for (j = 0; j < orderIdsArray.length; j++) {\n              graphql = JSON.stringify({\n                query: \"{\\n            orders(where: {id:\\\"\".concat(orderIdsArray[j], \"\\\", status:cancelled, category:parcel }) {\\n             status\\n              nft{\\n                parcel {          \\n                        x,\\n                        y,\\n                        tokenId\\n                    }\\n         \\n                activeOrder {\\n                    id\\n                    price\\n                    expiresAt\\n                    txHash\\n                    nftAddress\\n                }\\n            }\\n            }\\n          }\")\n              });\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        expiredOrdersArray.push(result.data.orders);\n                        console.log(result.data.orders.length);\n                        setTotalOrders(expiredOrdersArray.length);\n                        setOrders(expiredOrdersArray);\n                        setLoading(false);\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                return error;\n              });\n            }\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchParcels() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, !orders ? 'loading' : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(ExpiredNominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(NominatedCardsExpired, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominatedCardsExpired;\nexport default NominatedCardsExpired;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominatedCardsExpired\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominatedCardsExpired.js"],"names":["React","useState","useEffect","Pagination","ExpiredNominations","Nominations","moment","NominatedCardsExpired","props","userManaBalance","nowUnix","valueOf","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","fetchParcels","drizzle","contracts","ProposalController","proposalContract","deployedAddresses","console","log","orderIdsArray","i","length","address","methods","getPropData","call","propData","push","expiredOrdersArray","j","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport ExpiredNominations from '../ExpiredNominations';\r\nimport Nominations from '../Nominations';\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\n\r\nconst NominatedCardsExpired = ({ props, userManaBalance }) => {\r\n  const nowUnix = moment().valueOf();\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n  const fetchParcels = async () => {\r\n\r\n    const proposalContract = await props.drizzle.contracts.ProposalController;\r\n    //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n    const deployedAddresses = ['0xC1c3f622372be5242978c9Df1CA194cA762Ca466'];\r\n    //const deployedAddresses = [\"0x99ba17432A9F5dE1E44eBc14366c64B783D8a4f7\", \"0xb485eC8CB5Fe376B59e0BB0443B5d788B6120911\", \"0x56B5583CfC68469218073bCc08d4a1830bB73dd9\", \"0xC1c3f622372be5242978c9Df1CA194cA762Ca466\"]\r\n    console.log(deployedAddresses)\r\n\r\n    let i;\r\n    let orderIdsArray = [];\r\n    for (i = 0; i < deployedAddresses.length; i++) {\r\n      const address = deployedAddresses[i];\r\n      const propData = await proposalContract.methods.getPropData(`${address}`).call(); \r\n      orderIdsArray.push(propData[2]);\r\n    }\r\n\r\n  \r\n      let j;\r\n      let expiredOrdersArray = [];\r\n      //let orderId = [\"0xc99701f31fe9427afb81e2534a9eba054982c20418e97eaad46c0e42a5c07e8b\"];\r\n\r\n      for (j = 0; j < orderIdsArray.length; j++) {\r\n      \r\n        const graphql = JSON.stringify({ query: \r\n          `{\r\n            orders(where: {id:\"${orderIdsArray[j]}\", status:cancelled, category:parcel }) {\r\n             status\r\n              nft{\r\n                parcel {          \r\n                        x,\r\n                        y,\r\n                        tokenId\r\n                    }\r\n         \r\n                activeOrder {\r\n                    id\r\n                    price\r\n                    expiresAt\r\n                    txHash\r\n                    nftAddress\r\n                }\r\n            }\r\n            }\r\n          }`\r\n      })\r\n  \r\n      const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n      fetch(targetUrl, {\r\n        method: \"POST\",\r\n        headers:myHeaders,  \r\n        body:graphql, variables:{},\r\n        redirect: 'follow'\r\n      })\r\n        .then(res => res.json())\r\n        .then( async (result) => {\r\n          expiredOrdersArray.push(result.data.orders);\r\n          console.log(result.data.orders.length)\r\n          setTotalOrders(expiredOrdersArray.length)\r\n          setOrders(expiredOrdersArray);\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n        return error;\r\n        }\r\n      ) \r\n    }\r\n  \r\n  }\r\n   \r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n    {!orders  ? \r\n    \r\n      'loading'\r\n    : \r\n      <div>\r\n        <ExpiredNominations \r\n          orders={currentParcels} \r\n          loading={loading} \r\n          props={props}   \r\n          userManaBalance={userManaBalance}\r\n        />\r\n        <Pagination\r\n          currentPage ={currentPage }\r\n          parcelsPerPage={parcelsPerPage}\r\n          totalParcels={totalOrders}\r\n          paginate={paginate}\r\n        />\r\n      </div>\r\n      \r\n    }\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominatedCardsExpired;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}