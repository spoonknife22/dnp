{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport { capRootSaga } from './capSagas';\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; // const CHECKING_TX_UI = \"CHECKING_TX_UI\";\n// const TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\n// const CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\n// const TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\n// const initialState = {\n//   metaMaskReject: false,\n//   checkingTx: false,\n//   txSuccessful: false,\n//   redirectToHome: false,\n// };\n// export function capReducer(state = initialState, action) {\n//   switch (action.type) {\n//     case TX_ERROR_METAMASK:\n//       return { ...state, checkMetaMask: false, metaMaskReject: true };\n//     case CHECKING_TX_UI:\n//       return { ...state, checkMetaMask: false, checkingTx: true };\n//     case CHECKING_TX_UI_DONE:\n//       return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\n//     case TX_SUCCESSFUL_UPDATE_UI:\n//       return { ...state, checkingTx: false, txSuccessful: true };\n//     default:\n//       return state;\n//   }\n// }\n// export default combineReducers({\n//   capReducer,\n//   ...drizzleReducers\n// });\n// actions\n\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH';\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\n\nconst todosReducer = (state = [], action) => {\n  if (action.type === TX_SUCCESSFUL) {\n    // update your state\n    return action.todos;\n  }\n\n  return state;\n}; // const todosReducer = (state = [], action) => {\n//  if (action.type === TODOS_RECEIVED) {\n//    // update your state\n//    return action.todos\n//  }\n//  return state\n// }\n// fetch data from service using sagas\n\n\nfunction* fetchTodos() {\n  const todos = yield 'todos';\n  yield put({\n    type: TX_SUCCESSFUL,\n    todos\n  });\n} // function *fetchTodos() {\n//  const todos = yield fetch('https://jsonplaceholder.typicode.com/todos')\n//  .then(resp => response.json())\n//  yield put({ type: TODOS_RECEIVED, todos })\n// }\n// Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeEvery(TX_BROADCASTED, fetchTodos);\n}\n\nexport const appReducers = {\n  todos: todosReducer\n};\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capReducers.js"],"names":["combineReducers","drizzleReducers","capRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","TODOS_FETCH","TODOS_RECEIVED","TX_BROADCASTED","TX_SUCCESSFUL","todosReducer","state","action","type","todos","fetchTodos","appRootSaga","appReducers","appSagas"],"mappings":"AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,oBAApB;AACA,MAAMC,cAAc,GAAG,uBAAvB;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,aAAa,GAAG,eAAtB;;AAGA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,aAApB,EAAmC;AACjC;AACA,WAAOG,MAAM,CAACE,KAAd;AACD;;AACD,SAAOH,KAAP;AACA,CANF,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,UAAUI,UAAV,GAAuB;AACrB,QAAMD,KAAK,GAAG,MAAM,OAApB;AACA,QAAMd,GAAG,CAAC;AAAEa,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA;AAAvB,GAAD,CAAT;AACA,C,CAGF;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA,UAAUE,WAAV,GAAwB;AACvB,QAAMX,SAAS,CAACG,cAAD,EAAiBO,UAAjB,CAAf;AACA;;AAED,OAAO,MAAME,WAAW,GAAG;AAAEH,EAAAA,KAAK,EAAEJ;AAAT,CAApB;AACP,OAAO,MAAMQ,QAAQ,GAAG,CAACF,WAAD,CAAjB","sourcesContent":["\r\nimport { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport { capRootSaga } from './capSagas';\r\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n\r\n// const CHECKING_TX_UI = \"CHECKING_TX_UI\";\r\n// const TX_SUCCESSFUL_UPDATE_UI = \"TX_SUCCESSFUL_UPDATE_UI\";\r\n// const CHECKING_TX_UI_DONE = \"CHECKING_TX_UI_DONE\";\r\n// const TX_ERROR_METAMASK = \"TX_ERROR_METAMASK\";\r\n\r\n// const initialState = {\r\n//   metaMaskReject: false,\r\n//   checkingTx: false,\r\n//   txSuccessful: false,\r\n//   redirectToHome: false,\r\n// };\r\n\r\n\r\n\r\n// export function capReducer(state = initialState, action) {\r\n//   switch (action.type) {\r\n//     case TX_ERROR_METAMASK:\r\n//       return { ...state, checkMetaMask: false, metaMaskReject: true };\r\n//     case CHECKING_TX_UI:\r\n//       return { ...state, checkMetaMask: false, checkingTx: true };\r\n//     case CHECKING_TX_UI_DONE:\r\n//       return { ...state, checkMetaMask: false, checkingTx: false, redirectToHome: false };\r\n//     case TX_SUCCESSFUL_UPDATE_UI:\r\n//       return { ...state, checkingTx: false, txSuccessful: true };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// export default combineReducers({\r\n//   capReducer,\r\n//   ...drizzleReducers\r\n// });\r\n// actions\r\nconst TODOS_FETCH = 'MY_APP/TODOS_FETCH'\r\nconst TODOS_RECEIVED = 'MY_APP/TODOS_RECEIVED'\r\n\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL'\r\n\r\n\r\nconst todosReducer = (state = [], action) => {\r\n  if (action.type === TX_SUCCESSFUL) {\r\n    // update your state\r\n    return action.todos\r\n  }\r\n  return state\r\n }\r\n \r\n\r\n// const todosReducer = (state = [], action) => {\r\n//  if (action.type === TODOS_RECEIVED) {\r\n//    // update your state\r\n//    return action.todos\r\n//  }\r\n//  return state\r\n// }\r\n\r\n\r\n// fetch data from service using sagas\r\nfunction *fetchTodos() {\r\n  const todos = yield('todos')\r\n  yield put({ type: TX_SUCCESSFUL, todos })\r\n }\r\n\r\n\r\n// function *fetchTodos() {\r\n//  const todos = yield fetch('https://jsonplaceholder.typicode.com/todos')\r\n//  .then(resp => response.json())\r\n//  yield put({ type: TODOS_RECEIVED, todos })\r\n// }\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction *appRootSaga() {\r\n yield takeEvery(TX_BROADCASTED, fetchTodos)\r\n}\r\n\r\nexport const appReducers = { todos: todosReducer }\r\nexport const appSagas = [appRootSaga]"]},"metadata":{},"sourceType":"module"}