{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS'; // const SET_DRIZZLE_STATE_CONTRACTS = 'SET_DRIZZLE_STATE_CONTRACTS'\n\nconst getDrizzle = state => state.appReducer.drizzle; //const getContracts = (state) => state.contracts;\n//const getContracts = (state) => state.appReducers.drizzleContracts;\n\n\nfunction fetchTokenId(action) {\n  return _regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCHED',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr(action) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          proposalAddr: 11\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nexport function appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n} //export default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["fetchTokenId","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","GET_PROP_ADDRESS","getDrizzle","state","appReducer","drizzle","action","type","tokenId","proposalAddr"],"mappings":";;oDAaUA,Y;qDAIAC,a;qDAMOC,W;;AAvBjB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB,C,CAEA;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,UAAN,CAAiBC,OAA/C,C,CACA;AACA;;;AAEA,SAAUtB,YAAV,CAAwBuB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMjB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA3C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUxB,aAAV,CAAyBsB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAGE,eAAMjB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAE,kBAAR;AAA4BE,UAAAA,YAAY,EAAC;AAAzC,SAAD,CAAT;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,OAAO,SAAUxB,WAAV;AAAA;AAAA;AAAA;AAAA;AACL,eAAMS,SAAS,CAACO,gBAAD,EAAmBjB,aAAnB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKP","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\n// const SET_DRIZZLE_STATE_CONTRACTS = 'SET_DRIZZLE_STATE_CONTRACTS'\r\n\r\nconst getDrizzle = (state) => state.appReducer.drizzle;\r\n//const getContracts = (state) => state.contracts;\r\n//const getContracts = (state) => state.appReducers.drizzleContracts;\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n  // const drizzle = yield select(getDrizzle);\r\n  // const propAddr = yield drizzle.contracts.ProposalController.methods.getPropTokenIdMap(action.tokenId).call()\r\n  yield put({ type: 'GOT_PROP_ADDRESS', proposalAddr:11});\r\n}\r\n\r\nexport function *appRootSaga() {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n  //yield takeEvery(TOKEN_ID_FETCH, fetchTokenId);\r\n}\r\n\r\n//export default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}