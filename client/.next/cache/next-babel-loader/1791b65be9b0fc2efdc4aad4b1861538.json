{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null\n    });\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage;\n    const account = drizzleState.accounts[0];\n    let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.usernames[this.state.dataKey]; // if displayData (an object) exists, then we can display the value below\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 6\n      }\n    }, \"Hi from Truffle! Here is your storedData: \", displayData && displayData.value);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","EthAccounts","Component","dataKey","componentDidMount","drizzle","props","contract","contracts","UserStorage","account","drizzleState","accounts","methods","cacheCall","setState","render","displayData","usernames","state","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADiC;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGC,YAAY,CAACC,QAAb,CAAsB,CAAtB,CAAhB;AACA,QAAIT,OAAO,GAAGI,QAAQ,CAACM,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCJ,OAAxC,CAAd,CAJkB,CAI8C;;AAChE,SAAKK,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA;AAAF,QAAkB,KAAKH,KAAL,CAAWK,YAAX,CAAwBH,SAAhD;AACA,UAAMS,WAAW,GAAGR,WAAW,CAACS,SAAZ,CAAsB,KAAKC,KAAL,CAAWhB,OAAjC,CAApB,CAFO,CAEwD;;AAC/D,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAA8Cc,WAAW,IAAIA,WAAW,CAACG,KAAzE,CADF;AAGD;;AAjBwC;;AAoB1C,eAAenB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null };\r\n\r\n componentDidMount() {\r\n   const { drizzle } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n   const account = drizzleState.accounts[0];\r\n   let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\r\n   this.setState({ dataKey });\r\n }\r\n\r\n render() {\r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.usernames[this.state.dataKey]; // if displayData (an object) exists, then we can display the value below\r\n   return (\r\n     <p>Hi from Truffle! Here is your storedData: {displayData && displayData.value}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />"]},"metadata":{},"sourceType":"module"}