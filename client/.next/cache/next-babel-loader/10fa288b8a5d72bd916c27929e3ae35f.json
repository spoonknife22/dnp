{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport ContractManager from \"../artifacts/contracts/ContractManager.json\";\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\nimport UserController from \"../artifacts/contracts/UserController.json\";\nimport Web3 from 'web3';\nimport getWeb3 from \"@drizzle-utils/get-web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst crap = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, web3Provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return detectEthereumProvider();\n\n        case 2:\n          provider = _context.sent;\n\n          if (!provider) {\n            _context.next = 8;\n            break;\n          }\n\n          web3Provider = new Web3(Web3.provider);\n          return _context.abrupt(\"return\", web3Provider);\n\n        case 8:\n          console.log('Please install MetaMask!');\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function crap() {\n    return _ref.apply(this, arguments);\n  };\n}(); //const web3 = crap();\n\n\nconst webProvider = new Web3(\"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\"); // console.log(web3);\n// const host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\n// const customProvider = new Web3.providers.HttpProvider(host);\n\nconst drizzleOptions = {\n  web3: {\n    customProvider: webProvider,\n    fallback: {\n      type: 'ws',\n      url: 'ws://127.0.0.1:7545'\n    }\n  },\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\n  events: {\n    UserStorage: [\"UserCreated\"],\n    ProposalController: [\"AssetNomination\"]\n  },\n  polls: {\n    accounts: 1500\n  },\n  syncAlways: true\n};\nexport default drizzleOptions;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/drizzleOptions.js"],"names":["ContractManager","UserStorage","ProposalController","UserController","Web3","getWeb3","detectEthereumProvider","crap","provider","web3Provider","console","log","webProvider","drizzleOptions","web3","customProvider","fallback","type","url","contracts","events","polls","accounts","syncAlways"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,6CAA5B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,IAAI;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEUD,sBAAsB,EAFhC;;AAAA;AAEPE,UAAAA,QAFO;;AAAA,eAITA,QAJS;AAAA;AAAA;AAAA;;AAKPC,UAAAA,YALO,GAKQ,IAAIL,IAAJ,CAASA,IAAI,CAACI,QAAd,CALR;AAAA,2CAMNC,YANM;;AAAA;AASXC,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJJ,IAAI;AAAA;AAAA;AAAA,GAAV,C,CAcA;;;AACA,MAAMK,WAAW,GAAG,IAAIR,IAAJ,CAAS,+DAAT,CAApB,C,CACA;AACA;AACA;;AAEA,MAAMS,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE;AAENC,IAAAA,cAAc,EAACH,WAFT;AAGJI,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAC,IADG;AAERC,MAAAA,GAAG,EAAC;AAFI;AAHN,GADe;AAarBC,EAAAA,SAAS,EAAE,CAAClB,WAAD,EAAcD,eAAd,EAA+BE,kBAA/B,EAAmDC,cAAnD,CAbU;AAerBiB,EAAAA,MAAM,EAAE;AACNnB,IAAAA,WAAW,EAAE,CAAC,aAAD,CADP;AAENC,IAAAA,kBAAkB,EAAE,CAAC,iBAAD;AAFd,GAfa;AAmBrBmB,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAnBc;AAuBrBC,EAAAA,UAAU,EAAC;AAvBU,CAAvB;AA0BA,eAAeV,cAAf","sourcesContent":["import ContractManager from \"../artifacts/contracts/ContractManager.json\";\r\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\r\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\r\nimport UserController from \"../artifacts/contracts/UserController.json\";\r\nimport Web3 from 'web3';\r\nimport getWeb3 from \"@drizzle-utils/get-web3\";\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst crap = async () => {\r\n// this returns the provider, or null if it wasn't detected\r\nconst provider = await detectEthereumProvider();\r\n\r\nif (provider) {\r\nconst web3Provider = new Web3(Web3.provider);\r\nreturn web3Provider;\r\n  \r\n} else {\r\n  console.log('Please install MetaMask!');\r\n}\r\n\r\n}\r\n\r\n//const web3 = crap();\r\nconst webProvider = new Web3(\"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\");\r\n// console.log(web3);\r\n// const host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\r\n// const customProvider = new Web3.providers.HttpProvider(host);\r\n\r\nconst drizzleOptions = {\r\n  web3: {\r\n\r\n  customProvider:webProvider, \r\n    fallback: {\r\n      type:'ws',\r\n      url:'ws://127.0.0.1:7545'\r\n    }\r\n  \r\n\r\n  \r\n  },\r\n\r\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\r\n\r\n  events: {\r\n    UserStorage: [\"UserCreated\"],\r\n    ProposalController: [\"AssetNomination\"]\r\n  },\r\n  polls: {\r\n    accounts: 1500,\r\n  },\r\n\r\n  syncAlways:true,\r\n};\r\n\r\nexport default drizzleOptions;\r\n"]},"metadata":{},"sourceType":"module"}