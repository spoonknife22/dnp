{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst NOM_TX_PROCESSING = 'NOM_TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\nconst SET_TOKEN_ID = \"SET_TOKEN_ID\";\nconst TESTED_SAGA = 'TESTED_SAGA';\nconst PROPOSAL_BALANCE = 'PROPOSAL_BALANCE';\nconst GOT_PROP_ABI = \"GOT_PROP_ABI\";\nconst PROPOSAL_STORAGE_CONTRACT = 'PROPOSAL_STORAGE_CONTRACT';\nconst GOT_CURRENT_CONTRIB = \"GOT_CURRENT_CONTRIB\";\nconst CONTRIB_COMPLETE = \"CONTRIB_COMPLETE\";\nconst initialState = {\n  transactionProcessing: false,\n  txSuccessful: false,\n  tokenId: null,\n  drizzle: null,\n  drizzleContracts: null,\n  propAddress: null,\n  testedSega: false,\n  contractBalance: null,\n  proposalStorageAbi: null,\n  proposalStorage: null,\n  userContribBalance: null,\n  contribComplete: false\n};\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case PROPOSAL_BALANCE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contractBalance: action.balance\n      });\n\n    case GOT_PROP_ABI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        proposalStorageAbi: action.proposalStorageAbi\n      });\n\n    case PROPOSAL_STORAGE_CONTRACT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        proposalStorage: action.proposalStorage\n      });\n\n    case GOT_CURRENT_CONTRIB:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userContribBalance: action.userContribBalance\n      });\n\n    case CONTRIB_COMPLETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        contribComplete: true\n      });\n\n    case TX_BROADCASTED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactionProcessing: true\n      });\n\n    case TX_SUCCESSFUL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txSuccessful: true,\n        transactionProcessing: false\n      });\n\n    case TX_PROCESSING_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: false,\n        checkingTx: false,\n        transactionProcessing: false,\n        txSuccessful: true\n      });\n\n    case SET_TOKEN_ID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenId: action.tokenId\n      });\n\n    case SET_DRIZZLE_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        drizzle: action.drizzle\n      });\n\n    case GOT_PROP_ADDRESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        propAddress: action.proposalAddress\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/reducers/appReducers.js"],"names":["NOM_TX_PROCESSING","TX_PROCESSING_DONE","TOKEN_ID_FETCHED","TX_SUCCESSFUL","TX_BROADCASTED","SET_DRIZZLE_STATE","GOT_PROP_ADDRESS","SET_TOKEN_ID","TESTED_SAGA","PROPOSAL_BALANCE","GOT_PROP_ABI","PROPOSAL_STORAGE_CONTRACT","GOT_CURRENT_CONTRIB","CONTRIB_COMPLETE","initialState","transactionProcessing","txSuccessful","tokenId","drizzle","drizzleContracts","propAddress","testedSega","contractBalance","proposalStorageAbi","proposalStorage","userContribBalance","contribComplete","appReducer","state","action","type","balance","checkMetaMask","checkingTx","proposalAddress"],"mappings":";;;;;;AAAA,MAAMA,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,yBAAyB,GAAG,2BAAlC;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,gBAAgB,EAAC,IALE;AAMnBC,EAAAA,WAAW,EAAC,IANO;AAOnBC,EAAAA,UAAU,EAAC,KAPQ;AAQnBC,EAAAA,eAAe,EAAC,IARG;AASnBC,EAAAA,kBAAkB,EAAC,IATA;AAUnBC,EAAAA,eAAe,EAAC,IAVG;AAWnBC,EAAAA,kBAAkB,EAAC,IAXA;AAYnBC,EAAAA,eAAe,EAAC;AAZG,CAArB;;AAeA,SAASC,UAAT,CAAoBC,KAAK,GAAGd,YAA5B,EAA0Ce,MAA1C,EAAkD;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKrB,gBAAL;AACE,6CAAYmB,KAAZ;AAAmBN,QAAAA,eAAe,EAAEO,MAAM,CAACE;AAA3C;;AACF,SAAKrB,YAAL;AACI,6CAAYkB,KAAZ;AAAmBL,QAAAA,kBAAkB,EAAEM,MAAM,CAACN;AAA9C;;AACJ,SAAKZ,yBAAL;AACE,6CAAYiB,KAAZ;AAAmBJ,QAAAA,eAAe,EAAEK,MAAM,CAACL;AAA3C;;AACF,SAAKZ,mBAAL;AACE,6CAAYgB,KAAZ;AAAmBH,QAAAA,kBAAkB,EAAEI,MAAM,CAACJ;AAA9C;;AACF,SAAKZ,gBAAL;AACE,6CAAYe,KAAZ;AAAmBF,QAAAA,eAAe,EAAE;AAApC;;AACF,SAAKtB,cAAL;AACE,6CAAYwB,KAAZ;AAAmBb,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKZ,aAAL;AACE,6CAAYyB,KAAZ;AAAoBZ,QAAAA,YAAY,EAAE,IAAlC;AAAwCD,QAAAA,qBAAqB,EAAE;AAA/D;;AACF,SAAKd,kBAAL;AACE,6CAAY2B,KAAZ;AAAmBI,QAAAA,aAAa,EAAE,KAAlC;AAAyCC,QAAAA,UAAU,EAAE,KAArD;AAA2DlB,QAAAA,qBAAqB,EAAE,KAAlF;AAAyFC,QAAAA,YAAY,EAAE;AAAvG;;AACF,SAAKT,YAAL;AACI,6CAAYqB,KAAZ;AAAmBX,QAAAA,OAAO,EAACY,MAAM,CAACZ;AAAlC;;AACJ,SAAKZ,iBAAL;AACI,6CAAYuB,KAAZ;AAAmBV,QAAAA,OAAO,EAAEW,MAAM,CAACX;AAAnC;;AACJ,SAAKZ,gBAAL;AACI,6CAAYsB,KAAZ;AAAmBR,QAAAA,WAAW,EAACS,MAAM,CAACK;AAAtC;;AACJ;AACE,aAAON,KAAP;AAxBJ;AA0BD;;AACD,eAAeD,UAAf","sourcesContent":["const NOM_TX_PROCESSING = 'NOM_TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";  \r\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\r\nconst SET_TOKEN_ID = \"SET_TOKEN_ID\";\r\nconst TESTED_SAGA = 'TESTED_SAGA';\r\nconst PROPOSAL_BALANCE = 'PROPOSAL_BALANCE';\r\nconst GOT_PROP_ABI = \"GOT_PROP_ABI\";\r\nconst PROPOSAL_STORAGE_CONTRACT = 'PROPOSAL_STORAGE_CONTRACT';\r\nconst GOT_CURRENT_CONTRIB = \"GOT_CURRENT_CONTRIB\";\r\nconst CONTRIB_COMPLETE = \"CONTRIB_COMPLETE\";\r\n\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  txSuccessful: false, \r\n  tokenId: null,\r\n  drizzle: null,\r\n  drizzleContracts:null,\r\n  propAddress:null, \r\n  testedSega:false,\r\n  contractBalance:null,\r\n  proposalStorageAbi:null,\r\n  proposalStorage:null,\r\n  userContribBalance:null,\r\n  contribComplete:false\r\n};   \r\n \r\nfunction appReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case PROPOSAL_BALANCE:\r\n      return { ...state, contractBalance: action.balance }; \r\n    case GOT_PROP_ABI:\r\n        return { ...state, proposalStorageAbi: action.proposalStorageAbi }; \r\n    case PROPOSAL_STORAGE_CONTRACT:\r\n      return { ...state, proposalStorage: action.proposalStorage }; \r\n    case GOT_CURRENT_CONTRIB:\r\n      return { ...state, userContribBalance: action.userContribBalance }; \r\n    case CONTRIB_COMPLETE:\r\n      return { ...state, contribComplete: true }; \r\n    case TX_BROADCASTED:\r\n      return { ...state, transactionProcessing: true };\r\n    case TX_SUCCESSFUL:\r\n      return { ...state,  txSuccessful: true, transactionProcessing: false };\r\n    case TX_PROCESSING_DONE:\r\n      return { ...state, checkMetaMask: false, checkingTx: false,transactionProcessing: false, txSuccessful: true };\r\n    case SET_TOKEN_ID:\r\n        return { ...state, tokenId:action.tokenId};\r\n    case SET_DRIZZLE_STATE:\r\n        return { ...state, drizzle: action.drizzle };\r\n    case GOT_PROP_ADDRESS:\r\n        return { ...state, propAddress:action.proposalAddress};    \r\n    default:\r\n      return state;\r\n  }\r\n}   \r\nexport default appReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}