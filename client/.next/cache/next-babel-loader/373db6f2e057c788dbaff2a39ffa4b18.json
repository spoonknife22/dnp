{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\NominationModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport ProposalForm from '../forms/ProposalForm';\nimport ProposalAddress from '../ProposalAddress';\n\nconst NominationModal = ({\n  parcel,\n  props,\n  userManaBalance,\n  getTokenId,\n  propAddress,\n  tokenIdState\n}) => {\n  _s();\n\n  const drizzleState = props.drizzleState,\n        drizzle = props.drizzle;\n\n  const _useState = useState(false),\n        show = _useState[0],\n        setShow = _useState[1];\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false); //const [tokenId, setTokenId] = useState(tokenId);\n  //const [loading, setLoading] = useState(true);\n  //const [dataKey, setDataKey] = useState(null);\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\n  //const [currentProp, setCurrentProp] = useState(null);\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphql, proxyUrl, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              graphql = JSON.stringify({\n                query: \"{ parcels(where: {x:\\\"\".concat(parcel.x, \"\\\",y:\\\"\").concat(parcel.y, \"\\\"}) { tokenId }}\")\n              });\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(proxyUrl + targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                const parcelData = result.data.parcels[0];\n                return parcelData;\n              }).then(result => {\n                const tokenId = result.tokenId;\n                getTokenId(tokenId); //drizzle.store.dispatch({ type: \"SET_TOKEN_ID\", tokenId:tokenId });\n\n                return tokenId;\n              }).then(tokenId => {\n                console.log(tokenId);\n                whatEver(tokenId); // { tokenId ? \n                //   <ProposalAddress drizzle={drizzle} drizzleState={drizzleState} tokenIdState={tokenId} />\n                //   : null }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchDetailsLink() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchDetailsLink();\n  }, []); //const { drizzle, tokenIdState, drizzleState } = this.props;\n\n  const whatEver = tokenId => {\n    while (tokenId) {\n      console.log(tokenId);\n      const dataKey = drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(\"\".concat(tokenId));\n      const ProposalController = drizzleState.contracts.ProposalController;\n      const displayData = ProposalController.getPropTokenIdMap[\"\".concat(dataKey)];\n      const proposalAddress = displayData && displayData.value;\n      console.log(displayData, proposalAddress);\n    } // else{\n    //   console.log('not working')\n    //   }\n\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-lg btn-block card-footer-btn\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Nominate Asset\"), __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Header, {\n    className: \"text-center justify-content-center\",\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Title, {\n    className: \"text-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Asset Price:\\xA0\", parcel.publication.price, \"\\xA0MANA\")), __jsx(Modal.Body, {\n    className: \"pt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(ProposalForm, {\n    assetPrice: parcel.publication.price,\n    props: props,\n    drizzle: drizzle,\n    drizzleState: drizzleState,\n    tokenId: tokenIdState,\n    userManaBalance: userManaBalance //propAddress={propAddress}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(NominationModal, \"bXBd/WbmO9A8Q7bxaOKZvuJyGc0=\");\n\n_c = NominationModal;\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.appReducers.tokenId,\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: tokenId => dispatch({\n    type: \"SET_TOKEN_ID\",\n    tokenId: tokenId\n  }) //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\n  //getCurrentProp: (drizzle,dataKey) =>  dispatch({ type: \"GET_PROP_ADDRESS\",drizzle:drizzle,dataKey:dataKey })\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal); //export default NominationModal;      \n\nvar _c;\n\n$RefreshReg$(_c, \"NominationModal\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/NominationModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","ProposalForm","ProposalAddress","NominationModal","parcel","props","userManaBalance","getTokenId","propAddress","tokenIdState","drizzleState","drizzle","show","setShow","handleShow","handleClose","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","tokenId","console","log","whatEver","dataKey","contracts","ProposalController","methods","cacheCall","displayData","getPropTokenIdMap","proposalAddress","value","publication","price","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","type"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAGA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA,eAAjB;AAAkCC,EAAAA,UAAlC;AAA8CC,EAAAA,WAA9C;AAA2DC,EAAAA;AAA3D,CAAD,KAAgF;AAAA;;AAAA,QAE/FC,YAF+F,GAEtEL,KAFsE,CAE/FK,YAF+F;AAAA,QAEjFC,OAFiF,GAEtEN,KAFsE,CAEjFM,OAFiF;;AAAA,oBAI9EhB,QAAQ,CAAC,KAAD,CAJsE;AAAA,QAI/FiB,IAJ+F;AAAA,QAIzFC,OAJyF;;AAKtG,QAAMC,UAAU,GAAG,MAAMD,OAAO,CAAC,IAAD,CAAhC;;AACA,QAAME,WAAW,GAAG,MAAMF,OAAO,CAAC,KAAD,CAAjC,CANsG,CAOtG;AACA;AACA;AACA;AACA;;;AAEA,QAAMG,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMuB,gBAAgB;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAEnBC,cAAAA,OAFmB,GAEVC,IAAI,CAACC,SAAL,CAAe;AAAEC,gBAAAA,KAAK,kCACbnB,MAAM,CAACoB,CADM,oBACGpB,MAAM,CAACqB,CADV;AAAP,eAAf,CAFU;AAMnBC,cAAAA,QANmB,GAMR,sCANQ,EAOzBC,SAPyB,GAOb,kEAPa;AASzBC,cAAAA,KAAK,CAACF,QAAQ,GAAGC,SAAZ,EAAuB;AAC1BE,gBAAAA,MAAM,EAAE,MADkB;AAE1BC,gBAAAA,OAAO,EAACd,SAFkB;AAG1Be,gBAAAA,IAAI,EAACX,OAHqB;AAGZY,gBAAAA,SAAS,EAAC,EAHE;AAI1BC,gBAAAA,QAAQ,EAAE;AAJgB,eAAvB,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH,CAOSG,MAAD,IAAY;AAChB,sBAAMC,UAAU,GAAGD,MAAM,CAACE,IAAP,CAAYC,OAAZ,CAAoB,CAApB,CAAnB;AACA,uBAAOF,UAAP;AACD,eAVH,EAWGJ,IAXH,CAWSG,MAAD,IAAY;AAAA,sBACRI,OADQ,GACIJ,MADJ,CACRI,OADQ;AAEhBlC,gBAAAA,UAAU,CAACkC,OAAD,CAAV,CAFgB,CAGhB;;AACA,uBAAOA,OAAP;AACD,eAhBH,EAiBGP,IAjBH,CAiBSO,OAAD,IAAa;AACjBC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAG,gBAAAA,QAAQ,CAACH,OAAD,CAAR,CAFiB,CAGjB;AACA;AACA;AACD,eAvBH;;AATyB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAhBtB,gBAAgB;AAAA;AAAA;AAAA,OAAtB;;AAkCFA,IAAAA,gBAAgB;AAEf,GArCU,EAqCR,EArCQ,CAAT,CAhBsG,CAuDxG;;AACA,QAAMyB,QAAQ,GAAIH,OAAD,IAAa;AAE9B,WAAMA,OAAN,EAAe;AAEfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,YAAMI,OAAO,GAAGlC,OAAO,CAACmC,SAAR,CAAkBC,kBAAlB,CAAqCC,OAArC,CAA6C,mBAA7C,EAAkEC,SAAlE,WAA+ER,OAA/E,EAAhB;AAHe,YAKPM,kBALO,GAKgBrC,YAAY,CAACoC,SAL7B,CAKPC,kBALO;AAMf,YAAMG,WAAW,GAAGH,kBAAkB,CAACI,iBAAnB,WAAwCN,OAAxC,EAApB;AACA,YAAMO,eAAe,GAAIF,WAAW,IAAIA,WAAW,CAACG,KAApD;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ,EAAyBE,eAAzB;AACC,KAX6B,CAY9B;AACA;AACA;;AACC,GAfD;;AAkBA,SACM,4BAMA;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,sCAAhC;AAAuE,IAAA,OAAO,EAAEtC,UAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANA,EAOE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAEF,IAAb;AAAmB,IAAA,MAAM,EAAEG,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,SAAS,EAAC,oCAAxB;AAA6D,IAAA,WAAW,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,KAAP;AAAa,IAAA,SAAS,EAAC,oCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA+EX,MAAM,CAACkD,WAAP,CAAmBC,KAAlG,aADF,CADF,EAIE,MAAC,KAAD,CAAO,IAAP;AAAY,IAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,YAAD;AACQ,IAAA,UAAU,EAAEnD,MAAM,CAACkD,WAAP,CAAmBC,KADvC;AAEQ,IAAA,KAAK,EAAElD,KAFf;AAGQ,IAAA,OAAO,EAAEM,OAHjB;AAIQ,IAAA,YAAY,EAAED,YAJtB;AAKQ,IAAA,OAAO,EAAED,YALjB;AAMQ,IAAA,eAAe,EAAEH,eANzB,CAOQ;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAJF,CAPF,CADN;AAkCO,CA5GP;;GAAMH,e;;KAAAA,e;;AA6GE,MAAMqD,eAAe,GAAIC,KAAD,KAAY;AAClChD,EAAAA,YAAY,EAAEgD,KAAK,CAACC,WAAN,CAAkBjB,OADE;AAElCjC,EAAAA,WAAW,EAAEiD,KAAK,CAACC,WAAN,CAAkBlD;AAFG,CAAZ,CAAxB;;AAKA,MAAMmD,kBAAkB,GAAIC,QAAD,KAAe;AACxCrD,EAAAA,UAAU,EAAGkC,OAAD,IAAcmB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE,cAAR;AAAwBpB,IAAAA,OAAO,EAACA;AAAhC,GAAD,CADM,CAExC;AACA;;AAHwC,CAAf,CAA3B;;AAOR,eAAe1C,OAAO,CAACyD,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxD,eAA7C,CAAf,C,CAEI","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\nimport ProposalForm from '../forms/ProposalForm';\r\nimport ProposalAddress from '../ProposalAddress';\r\n   \r\n\r\nconst NominationModal = ({ parcel, props, userManaBalance, getTokenId, propAddress, tokenIdState  }) => {\r\n\r\n  const {drizzleState, drizzle} = props;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n  //const [tokenId, setTokenId] = useState(tokenId);\r\n  //const [loading, setLoading] = useState(true);\r\n  //const [dataKey, setDataKey] = useState(null);\r\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\r\n  //const [currentProp, setCurrentProp] = useState(null);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n      getTokenId(tokenId)\r\n      //drizzle.store.dispatch({ type: \"SET_TOKEN_ID\", tokenId:tokenId });\r\n      return tokenId;\r\n    })\r\n    .then((tokenId) => { \r\n      console.log(tokenId);\r\n      whatEver(tokenId);\r\n      // { tokenId ? \r\n      //   <ProposalAddress drizzle={drizzle} drizzleState={drizzleState} tokenIdState={tokenId} />\r\n      //   : null }\r\n    })\r\n  };\r\nfetchDetailsLink();\r\n\r\n}, []);\r\n\r\n//const { drizzle, tokenIdState, drizzleState } = this.props;\r\nconst whatEver = (tokenId) => {\r\n  \r\nwhile(tokenId) {\r\n  \r\nconsole.log(tokenId);\r\nconst dataKey = drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${tokenId}`);   \r\n\r\nconst { ProposalController } = drizzleState.contracts;\r\nconst displayData = ProposalController.getPropTokenIdMap[`${dataKey}`];\r\nconst proposalAddress =  displayData && displayData.value;\r\nconsole.log(displayData, proposalAddress);\r\n}\r\n// else{\r\n//   console.log('not working')\r\n//   }\r\n}\r\n\r\n\r\nreturn (   \r\n      <> \r\n      {/* { tokenIdState ? \r\n\r\n      \r\n      // <ProposalAddress drizzle={drizzle} drizzleState={drizzleState} tokenIdState={tokenIdState} />\r\n      : null } */}\r\n      <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>Nominate Asset</button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">Asset Price:&nbsp;{parcel.publication.price}&nbsp;MANA</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body className=\"pt-1\">\r\n          <ProposalForm                  \r\n                  assetPrice={parcel.publication.price}  \r\n                  props={props}\r\n                  drizzle={drizzle}\r\n                  drizzleState={drizzleState}\r\n                  tokenId={tokenIdState}\r\n                  userManaBalance={userManaBalance}\r\n                  //propAddress={propAddress}\r\n            /> \r\n              {/* <NominationForm                   \r\n                drizzle={props.drizzle}\r\n                drizzleState={props.drizzleState}  \r\n                assetPrice={parcel.publication.price}  \r\n                props={props}\r\n                tokenId={tokenId}\r\n                userManaBalance={userManaBalance}\r\n                />  */}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n        );    \r\n      } \r\n        const mapStateToProps = (state) => ({\r\n          tokenIdState: state.appReducers.tokenId,\r\n          propAddress: state.appReducers.propAddress,\r\n        })\r\n        \r\n        const mapDispatchToProps = (dispatch) => ({\r\n          getTokenId: (tokenId) =>  dispatch({ type: \"SET_TOKEN_ID\", tokenId:tokenId }),\r\n          //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\r\n          //getCurrentProp: (drizzle,dataKey) =>  dispatch({ type: \"GET_PROP_ADDRESS\",drizzle:drizzle,dataKey:dataKey })\r\n        });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal);\r\n\r\n    //export default NominationModal;      "]},"metadata":{},"sourceType":"module"}