{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null,\n      d: null\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle,\n      drizzleState,\n      id\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage;\n    const account = drizzleState.accounts[0];\n    const uid = id; // const user = contract.methods['addresses'].cacheCall(account);\n    // const id = UserStorage.addresses[user]; \n    // const userId = [id && id.value[0]];\n\n    const userId = await drizzle.contracts.UserStorage.methods.addresses(account).call();\n    const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\n    this.setState({\n      dataKey,\n      uid\n    });\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    const user = displayData && displayData.value[1];\n    console.log(this.state.uid);\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 6\n      }\n    }, \"Hi: \", user, \" \");\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","d","componentDidMount","drizzle","drizzleState","id","props","contract","contracts","UserStorage","account","accounts","uid","userId","methods","addresses","call","cacheCall","setState","render","displayData","profiles","state","user","value","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,CAAC,EAAE;AAApB,KADiC;AAAA;;AAG1C,QAAMC,iBAAN,GAA0B;AACvB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,YAAX;AAAyBC,MAAAA;AAAzB,QAAgC,KAAKC,KAA3C;AACA,UAAMC,QAAQ,GAAGJ,OAAO,CAACK,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGN,YAAY,CAACO,QAAb,CAAsB,CAAtB,CAAhB;AACD,UAAMC,GAAG,GAAGP,EAAZ,CAJwB,CAMxB;AACA;AACA;;AAEA,UAAMQ,MAAM,GAAG,MAAMV,OAAO,CAACK,SAAR,CAAkBC,WAAlB,CAA8BK,OAA9B,CAAsCC,SAAtC,CAAgDL,OAAhD,EAAyDM,IAAzD,EAArB;AAGA,UAAMhB,OAAO,GAAG,MAAMO,QAAQ,CAACO,OAAT,CAAiB,UAAjB,EAA6BG,SAA7B,CAAuCJ,MAAvC,CAAtB;AACA,SAAKK,QAAL,CAAc;AAAElB,MAAAA,OAAF;AAAWY,MAAAA;AAAX,KAAd;AAEA;;AAGDO,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEV,MAAAA;AAAF,QAAkB,KAAKH,KAAL,CAAWF,YAAX,CAAwBI,SAAhD;AACA,UAAMY,WAAW,GAAGX,WAAW,CAACY,QAAZ,CAAqB,KAAKC,KAAL,CAAWtB,OAAhC,CAApB,CAHO,CAGuD;;AAC9D,UAAMuB,IAAI,GAAIH,WAAW,IAAIA,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAA7B;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWV,GAAvB;AAEC,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQW,IAAR,MAFF;AAID;;AAjCwC;;AAoC1C,eAAezB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null, d: null };\r\n\r\nasync componentDidMount() {\r\n   const { drizzle, drizzleState, id } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n   const account = drizzleState.accounts[0];\r\n  const uid = id;\r\n                                                        \r\n  // const user = contract.methods['addresses'].cacheCall(account);\r\n  // const id = UserStorage.addresses[user]; \r\n  // const userId = [id && id.value[0]];\r\n\r\n  const userId = await drizzle.contracts.UserStorage.methods.addresses(account).call();\r\n \r\n \r\n  const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\r\n  this.setState({ dataKey, uid });\r\n\r\n }\r\n\r\n\r\n render() {\r\n  \r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   const user =  displayData && displayData.value[1];\r\n  console.log(this.state.uid);\r\n\r\n   return (\r\n \r\n     <p>Hi: {user} </p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}