{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\NominateButton.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Button } from \"shards-react\";\nimport { Loader } from 'rimble-ui';\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst AccountData = newContextComponents.AccountData,\n      ContractData = newContextComponents.ContractData,\n      ContractForm = newContextComponents.ContractForm;\n\nconst NominationButton = ({\n  nominateAsset,\n  transactionProcessing,\n  drizzle,\n  drizzleState,\n  tokenId,\n  propAddress\n}) => {\n  // let state = drizzle.store.getState();\n  // let propAddress = state.transactionProcessing;\n  // useEffect(  () => {\n  //   if(transactProcessing){ \n  //     setShow(true);\n  //   }\n  //   else{\n  //   setShow(false);\n  //   }    \n  // }, [transactProcessing]);   \n  // const getPropAddress = async (tokenId) => {\n  //   const propAddress = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\n  //   return propAddress;\n  // }\n  //const propAddress = drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\n  // {if( (Array.isArray(assetData.sell_orders) && assetData.sell_orders.length) ){\n  if (!transactionProcessing) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, __jsx(Button, {\n      className: \"btn btn-block btn-success contribute-form-btn\",\n      key: \"submit\",\n      type: \"button\",\n      onClick: nominateAsset,\n      theme: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"Nominate\")));\n  }\n\n  if (transactionProcessing) {\n    return __jsx(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, __jsx(Loader, {\n      color: \"#007bff\",\n      size: \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }));\n  }\n};\n\n_c = NominationButton;\n\nconst mapStateToProps = state => ({\n  transactionProcessing: state.appReducers.transactionProcessing,\n  //drizzle: state.appReducers.drizzle,\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({// onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationButton\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/NominateButton.js"],"names":["React","useState","useEffect","connect","Button","Loader","newContextComponents","AccountData","ContractData","ContractForm","NominationButton","nominateAsset","transactionProcessing","drizzle","drizzleState","tokenId","propAddress","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,QAAqC,2BAArC;MACQC,W,GAA4CD,oB,CAA5CC,W;MAAaC,Y,GAA+BF,oB,CAA/BE,Y;MAAcC,Y,GAAiBH,oB,CAAjBG,Y;;AAEnC,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,qBAAjB;AAAwCC,EAAAA,OAAxC;AAAiDC,EAAAA,YAAjD;AAA+DC,EAAAA,OAA/D;AAAwEC,EAAAA;AAAxE,CAAD,KAA2F;AAElH;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACD;AACC,MAAG,CAACJ,qBAAJ,EAA4B;AAE5B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGM,MAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,+CAAlB;AAAkE,MAAA,GAAG,EAAC,QAAtE;AAA+E,MAAA,IAAI,EAAC,QAApF;AAA6F,MAAA,OAAO,EAAED,aAAtG;AAAsH,MAAA,KAAK,EAAC,SAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAHN,CADF;AASC;;AACD,MAAGC,qBAAH,EAA2B;AACzB,WACQ;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADR;AAKD;AAEF,CA3CD;;KAAMF,gB;;AA6CN,MAAMO,eAAe,GAAIC,KAAD,KAAY;AAClCN,EAAAA,qBAAqB,EAAEM,KAAK,CAACC,WAAN,CAAkBP,qBADP;AAEnC;AACCI,EAAAA,WAAW,EAAEE,KAAK,CAACC,WAAN,CAAkBH;AAHG,CAAZ,CAAxB;;AAMA,MAAMI,kBAAkB,GAAIC,QAAD,KAAe,CACzC;AADyC,CAAf,CAA3B;;AAKA,eAAelB,OAAO,CAACc,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CV,gBAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Button } from \"shards-react\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;   \r\n\r\nconst NominationButton = ({ nominateAsset, transactionProcessing, drizzle, drizzleState, tokenId, propAddress }) => {     \r\n\r\n  // let state = drizzle.store.getState();\r\n  // let propAddress = state.transactionProcessing;\r\n \r\n  // useEffect(  () => {\r\n\r\n  //   if(transactProcessing){ \r\n  //     setShow(true);\r\n  //   }\r\n  //   else{\r\n  //   setShow(false);\r\n  //   }    \r\n  // }, [transactProcessing]);   \r\n  \r\n  // const getPropAddress = async (tokenId) => {\r\n  //   const propAddress = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\r\n  //   return propAddress;\r\n  // }\r\n  \r\n  \r\n  //const propAddress = drizzle.contracts.ProposalController.methods.getPropTokenIdMap(tokenId).call();\r\n // {if( (Array.isArray(assetData.sell_orders) && assetData.sell_orders.length) ){\r\n  if(!transactionProcessing)  {  \r\n\r\n  return (\r\n    <div>\r\n    \r\n    {/* <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getPropTokenIdMap\" methodArgs={[tokenId]} /> */}\r\n          <Button className=\"btn btn-block btn-success contribute-form-btn\" key=\"submit\" type=\"button\" onClick={nominateAsset}  theme=\"success\" >\r\n            <p className=\"mb-0\">Nominate</p>\r\n          </Button>\r\n          </div>\r\n        )   \r\n  } \r\n  if(transactionProcessing)  {\r\n    return (   \r\n            <div className=\"mx-auto\">   \r\n              <Loader color=\"#007bff\" size=\"40px\" />\r\n            </div>\r\n        )   \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  transactionProcessing: state.appReducers.transactionProcessing,\r\n //drizzle: state.appReducers.drizzle,\r\n  propAddress: state.appReducers.propAddress\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n // onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle })\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\r\n"]},"metadata":{},"sourceType":"module"}