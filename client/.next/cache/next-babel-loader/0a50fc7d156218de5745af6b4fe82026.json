{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\SoldAssetCard.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination.js';\nimport SoldNominations from '../SoldNominations.js';\n\nconst SoldAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  let ordersArray = [];\n  console.log(ordersArray);\n\n  const orderSoldCall = address => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {category:parcel, status:open, owner:\\\"0x6A1e9564f99Fb9718D37DFCC053b3aEe460368ea\\\"}) {\\n          id\\n          status\\n          nft{\\n            parcel {  \\n                    tokenId     \\n                    x,\\n                    y,\\n                }\\n            }\\n        }\\n      }\"\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then(result => {\n      ordersArray.push(...result.data.orders);\n    }, error => {\n      return error;\n    }).then(() => {\n      setOrders(ordersArray);\n      setTotalOrders(ordersArray.length);\n      setLoading(false);\n    }, error => {\n      return error;\n    });\n  };\n\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var proposalContract, deployedAddresses, i, address;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context.sent;\n              //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\n              deployedAddresses = [\"0x5ce213893956bBf4249a7f8a079331280065eec6\", \"0x6a1e9564f99fb9718d37dfcc053b3aee460368ea\"];\n\n              //for (i = 0; i < deployedAddresses.length; i++) {\n              for (i = 0; i < 1; i++) {\n                address = deployedAddresses[i];\n                console.log(address);\n                orderSoldCall(address);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  if (totalOrders < 0) {\n    return console.log('loading...');\n  } else {\n    const indexOfLastParcel = currentPage * parcelsPerPage;\n    const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n    const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    return __jsx(React.Fragment, null, __jsx(SoldNominations, {\n      orders: currentParcels,\n      loading: loading,\n      props: props,\n      userManaBalance: userManaBalance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), __jsx(Pagination, {\n      currentPage: currentPage,\n      parcelsPerPage: parcelsPerPage,\n      totalParcels: totalOrders,\n      paginate: paginate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }));\n  }\n};\n\nexport default SoldAssetCards; // {orders.map(parcel => (\n//   <div key={parcel.id} className=\"mb-4 col-sm-12 col-md-12 col-lg-4\">{parcel.id}</div>\n// ))}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/SoldAssetCard.js"],"names":["React","useState","useEffect","Pagination","SoldNominations","SoldAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","ordersArray","console","log","orderSoldCall","address","myHeaders","Headers","append","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","error","length","fetchParcels","drizzle","contracts","ProposalController","proposalContract","deployedAddresses","i","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination.js';\r\nimport SoldNominations from '../SoldNominations.js'\r\n\r\n\r\nconst SoldAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  let ordersArray = [];\r\n  console.log(ordersArray)\r\n  const orderSoldCall = (address) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {category:parcel, status:open, owner:\"0x6A1e9564f99Fb9718D37DFCC053b3aEe460368ea\"}) {\r\n          id\r\n          status\r\n          nft{\r\n            parcel {  \r\n                    tokenId     \r\n                    x,\r\n                    y,\r\n                }\r\n            }\r\n        }\r\n      }`\r\n  })\r\n\r\n\r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      ordersArray.push(...result.data.orders);\r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  .then(() => {\r\n    setOrders(ordersArray);\r\n    setTotalOrders(ordersArray.length);\r\n    setLoading(false); \r\n  },\r\n  (error) => {\r\n    return error;\r\n    }\r\n  )\r\n}\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      const deployedAddresses = [\"0x5ce213893956bBf4249a7f8a079331280065eec6\",\"0x6a1e9564f99fb9718d37dfcc053b3aee460368ea\"]\r\n      let i;\r\n      //for (i = 0; i < deployedAddresses.length; i++) {\r\n      for (i = 0; i < 1; i++) {\r\n      \r\n        const address = deployedAddresses[i];\r\n        console.log(address)\r\n        orderSoldCall(address);\r\n    }\r\n}\r\n  fetchParcels();  \r\n}, []);\r\n\r\n\r\n  // Get current orders\r\n \r\n\r\n  if(totalOrders < 0){\r\n    return console.log('loading...');\r\n  }\r\n  else {\r\n    \r\n    const indexOfLastParcel = currentPage * parcelsPerPage;\r\n    const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n    const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n    const paginate = pageNumber => setCurrentPage(pageNumber)\r\n\r\n    return(\r\n        <>\r\n          <SoldNominations \r\n            orders={currentParcels} \r\n            loading={loading} \r\n            props={props}   \r\n            userManaBalance={userManaBalance}\r\n          />\r\n          <Pagination\r\n            currentPage ={currentPage}\r\n            parcelsPerPage={parcelsPerPage}\r\n            totalParcels={totalOrders}\r\n            paginate={paginate}\r\n          />\r\n        </>\r\n    )\r\n\r\n  }\r\n\r\n};\r\n\r\n\r\nexport default SoldAssetCards;\r\n\r\n// {orders.map(parcel => (\r\n//   <div key={parcel.id} className=\"mb-4 col-sm-12 col-md-12 col-lg-4\">{parcel.id}</div>\r\n\r\n// ))}"]},"metadata":{},"sourceType":"module"}