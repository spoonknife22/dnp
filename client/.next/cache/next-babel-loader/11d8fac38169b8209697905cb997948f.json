{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify'; // const TX_PROCESSING = 'TX_PROCESSING'\n// const TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\n\nconst GET_TOKEN_ID = 'GET_TOKEN_ID';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = `${transactionHash}`;\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = `${message}`;\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n}; // function* showMetaMaskOverlay() {\n//   yield put({ type: 'CHECK_METAMASK' });\n// }\n// function* showTxErrorMsg() {\n//   yield put({ type: 'TX_ERROR_METAMASK' });\n// }\n// function* showCheckingTxMsg() {\n//   yield put({ type: 'CHECKING_TX_UI' });\n// } \n// function* fetchTransaction() {\n//   yield put({ type: TX_PROCESSING })\n//  }\n// const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n// function* txSuccessful() {\n//   yield put({ type: TX_PROCESSING_DONE});\n// }\n//Working\n// export const cappSagas = store => next => action => {\n//   if (action.type === 'GOT_TOKEN_ID') { \n//     console.log('hello');\n//   }\n//   return next(action)\n// }\n\nfunction* fetchTokenId() {\n  //toast.info('hi', { position: toast.POSITION.TOP_RIGHT })\n  console.log('hello'); //yield put({ type: GOT_TOKEN_ID,tokenId:3 })\n} // function* fetchTokenId() {\n// const myHeaders = new Headers();  \n// myHeaders.append(\"Content-Type\", \"application/json\");\n// const [tokenId, setTokenId] = useState();\n// const [loading, setLoading] = useState(false);\n// const graphql= JSON.stringify({ query: \n// `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\n// })\n// const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n// targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\n// fetch(proxyUrl + targetUrl, {\n//   method: \"POST\",\n//   headers:myHeaders,  \n//   body:graphql, variables:{},\n//   redirect: 'follow'\n// })\n//   .then(res => res.json())\n//   .then(\n//     (result) => {\n//       const parcelData = result.data.parcels[0];\n//       const gotTokenId = parcelData.tokenId;\n//       setTokenId(gotTokenId);\n//   });\n//   yield put({ type: GET_TOKEN_ID, tokenId: 2});\n// } \n//const drizzleSagas = drizzleSagas;\n// app root saga\n\n\nfunction* appRootSaga() {\n  // yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  // yield takeLatest('TX_ERROR', showTxErrorMsg);\n  // yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  // yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield takeEvery('GOT_TOKEN_ID', fetchTokenId); // yield all(\n  //   drizzleSagas.map(saga => fork(saga))\n  //  );\n}\n\nexport const appSagas = [appRootSaga]; //export const cappSagas = [fetchTokenId];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["EventActions","all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","GET_TOKEN_ID","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","info","TOP_RIGHT","fetchTokenId","console","log","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,GAAI,GAAEF,eAAgB,EAA7C;AACAP,IAAAA,KAAK,CAACS,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBhB,YAAY,CAAC0B,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,GAAI,GAAEH,OAAQ,EAA3B;AACAnB,MAAAA,KAAK,CAACuB,IAAN,CAAWD,OAAX,EAAoB;AAAEZ,QAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAea;AAA3B,OAApB;AACF;AACF;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM,C,CAaP;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUoB,YAAV,GAAyB;AACvB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAHuB,CAIvB;AACA,C,CAKF;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;AACA,UAAUC,WAAV,GAAwB;AACtB;AACA;AACA;AACA;AACA,QAAM7B,SAAS,CAAC,cAAD,EAAiB0B,YAAjB,CAAf,CALsB,CAMpB;AACA;AACA;AACH;;AAED,OAAO,MAAMI,QAAQ,GAAG,CAACD,WAAD,CAAjB,C,CAEP","sourcesContent":["\r\nimport { EventActions } from \"@drizzle/store\";\r\n\r\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n// const TX_PROCESSING = 'TX_PROCESSING'\r\n// const TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst GET_TOKEN_ID = 'GET_TOKEN_ID';\r\n \r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n// function* showMetaMaskOverlay() {\r\n//   yield put({ type: 'CHECK_METAMASK' });\r\n// }\r\n\r\n// function* showTxErrorMsg() {\r\n//   yield put({ type: 'TX_ERROR_METAMASK' });\r\n// }\r\n\r\n// function* showCheckingTxMsg() {\r\n//   yield put({ type: 'CHECKING_TX_UI' });\r\n// } \r\n\r\n// function* fetchTransaction() {\r\n//   yield put({ type: TX_PROCESSING })\r\n//  }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\n// function* txSuccessful() {\r\n//   yield put({ type: TX_PROCESSING_DONE});\r\n// }\r\n\r\n\r\n//Working\r\n// export const cappSagas = store => next => action => {\r\n//   if (action.type === 'GOT_TOKEN_ID') { \r\n//     console.log('hello');\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\nfunction* fetchTokenId() {\r\n  //toast.info('hi', { position: toast.POSITION.TOP_RIGHT })\r\n\r\n  console.log('hello')\r\n  //yield put({ type: GOT_TOKEN_ID,tokenId:3 })\r\n }\r\n\r\n\r\n\r\n\r\n// function* fetchTokenId() {\r\n\r\n// const myHeaders = new Headers();  \r\n// myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n// const [tokenId, setTokenId] = useState();\r\n// const [loading, setLoading] = useState(false);\r\n\r\n// const graphql= JSON.stringify({ query: \r\n// `{ parcels(where: {x:\"${action.parcel.x}\",y:\"${action.parcel.y}\"}) { tokenId }}`\r\n// })\r\n\r\n// const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n// targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n// fetch(proxyUrl + targetUrl, {\r\n//   method: \"POST\",\r\n//   headers:myHeaders,  \r\n//   body:graphql, variables:{},\r\n//   redirect: 'follow'\r\n// })\r\n//   .then(res => res.json())\r\n//   .then(\r\n//     (result) => {\r\n//       const parcelData = result.data.parcels[0];\r\n//       const gotTokenId = parcelData.tokenId;\r\n//       setTokenId(gotTokenId);\r\n//   });\r\n//   yield put({ type: GET_TOKEN_ID, tokenId: 2});\r\n\r\n// } \r\n\r\n//const drizzleSagas = drizzleSagas;\r\n\r\n// app root saga\r\nfunction* appRootSaga() {\r\n  // yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  // yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  // yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  // yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeEvery('GOT_TOKEN_ID', fetchTokenId)\r\n    // yield all(\r\n    //   drizzleSagas.map(saga => fork(saga))\r\n    //  );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n\r\n//export const cappSagas = [fetchTokenId];"]},"metadata":{},"sourceType":"module"}