{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\nimport { Card } from 'react-bootstrap';\n\nconst NominationAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const nowUnix = moment().valueOf();\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const currentTime = moment().valueOf();\n  const graphql = JSON.stringify({\n    query: \"{\\n        orders(first:8,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:\".concat(currentTime, \"}) {\\n         status \\n         nft{\\n          parcel {\\n            x,\\n            y, \\n            tokenId\\n          }\\n          activeOrder {\\n            id\\n            price\\n            expiresAt\\n            nftAddress\\n            txHash\\n          }\\n        }\\n      }\\n      }\")\n  });\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var proxyUrl, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  var ordersGQL, ordersFiltered, proposalContract, deployedAddresses, i, fundingArray, fundedArray, forSaleArray, address, propData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.orders;\n\n                      case 2:\n                        ordersGQL = _context.sent;\n                        _context.next = 5;\n                        return result.data.orders;\n\n                      case 5:\n                        ordersFiltered = _context.sent;\n                        _context.next = 8;\n                        return props.drizzle.contracts.ProposalController;\n\n                      case 8:\n                        proposalContract = _context.sent;\n                        _context.next = 11;\n                        return proposalContract.methods.getDeployedAddresses().call();\n\n                      case 11:\n                        deployedAddresses = _context.sent;\n                        fundingArray = [];\n                        fundedArray = [];\n                        forSaleArray = [];\n                        i = 0;\n\n                      case 16:\n                        if (!(i < deployedAddresses.length)) {\n                          _context.next = 25;\n                          break;\n                        }\n\n                        address = deployedAddresses[i];\n                        _context.next = 20;\n                        return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n                      case 20:\n                        propData = _context.sent;\n\n                        if (propData[0] == 0) {\n                          fundingArray.push(propData[1]);\n                        } else if (propData[0] == 1) {\n                          fundedArray.push(propData[1]);\n                        } else if (propData[0] == 4) {\n                          forSaleArray.push(propData[1]);\n                        }\n\n                      case 22:\n                        i++;\n                        _context.next = 16;\n                        break;\n\n                      case 25:\n                        //FILTER OUT NOMINATED PROPS\n                        //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\n                        //Just Funding Array\n                        //const fundingFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId));\n                        //Just Funded Array where purchase or resale failed\n                        //const fundedFilter = ordersGQL.filter(item => fundedArray.includes(item.parcel.tokenId));\n                        //Just For Sale Array\n                        //const forSaleFilter = ordersGQL.filter(item => forSaleArray.includes(item.parcel.tokenId));\n                        setOrders(ordersFiltered); // console.log(ordersFiltered)\n\n                        setTotalOrders(ordersFiltered.length);\n                        setLoading(false);\n\n                      case 28:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 8\n    }\n  }));\n};\n\n_s(NominationAssetCards, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = NominationAssetCards;\nexport default NominationAssetCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationAssetCards\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Card","NominationAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","nowUnix","valueOf","myHeaders","Headers","append","currentTime","graphql","JSON","stringify","query","fetchParcels","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","ordersGQL","ordersFiltered","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","fundingArray","fundedArray","forSaleArray","i","length","address","getPropData","propData","push","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\nimport { Card } from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\nconst NominationAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const nowUnix = moment().valueOf();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const currentTime= moment().valueOf();\r\n  const graphql= JSON.stringify({ query: \r\n      `{\r\n        orders(first:8,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:${currentTime}}) {\r\n         status \r\n         nft{\r\n          parcel {\r\n            x,\r\n            y, \r\n            tokenId\r\n          }\r\n          activeOrder {\r\n            id\r\n            price\r\n            expiresAt\r\n            nftAddress\r\n            txHash\r\n          }\r\n        }\r\n      }\r\n      }`\r\n    })\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n          const ordersGQL = await result.data.orders;\r\n          \r\n          //All Active Array\r\n          const ordersFiltered = await result.data.orders;\r\n          //FILTER OUT NOMINATED PROPS\r\n          //const tokenIdArray = await props.drizzle.contracts.ProposalController.methods.getDeployedProposal().call();\r\n          //const ordersFiltered = ordersGQL.filter(item => !tokenIdArray.includes(item.parcel.tokenId));\r\n          ///\r\n       \r\n         const proposalContract = await props.drizzle.contracts.ProposalController;\r\n         const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n        \r\n         let i;\r\n         let fundingArray = [];\r\n         let fundedArray = [];\r\n         let forSaleArray = [];\r\n  \r\n         for (i = 0; i < deployedAddresses.length; i++) {\r\n           const address = deployedAddresses[i];\r\n           const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n\r\n           if(propData[0] == 0) {\r\n             fundingArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 1){\r\n             fundedArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 4){\r\n             forSaleArray.push(propData[1]);\r\n           }\r\n       }\r\n    \r\n      //FILTER OUT NOMINATED PROPS\r\n       //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\r\n\r\n      //Just Funding Array\r\n       //const fundingFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId));\r\n\r\n       //Just Funded Array where purchase or resale failed\r\n       //const fundedFilter = ordersGQL.filter(item => fundedArray.includes(item.parcel.tokenId));\r\n\r\n      //Just For Sale Array\r\n       //const forSaleFilter = ordersGQL.filter(item => forSaleArray.includes(item.parcel.tokenId));\r\n          setOrders(ordersFiltered);\r\n          // console.log(ordersFiltered)\r\n          setTotalOrders(ordersFiltered.length)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage}\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default NominationAssetCards;\r\n\r\n"]},"metadata":{},"sourceType":"module"}