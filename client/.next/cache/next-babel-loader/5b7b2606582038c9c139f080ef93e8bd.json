{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null,\n      userId: null\n    });\n\n    _defineProperty(this, \"getUserId\", async (contract, drizzleState) => {\n      const userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0]);\n      return parseInt(userId);\n    });\n\n    _defineProperty(this, \"getDataKey\", async (userId, contract) => {\n      const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\n      this.setState({\n        dataKey\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage; // const account = drizzleState.accounts[0];\n    //const userId = await this.getUserId(contract,drizzleState);\n\n    const userId = 1;\n    this.getDataKey(userId, contract, drizzleState); //const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\n    // const dataKey = contract.methods[\"profiles\"].cacheCall(1);\n    //  this.setState({ dataKey });\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    console.log(this.state.userId); //username: Web3.utils.toAscii(username),\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 6\n      }\n    }, \"Hi: \", displayData && displayData.value[1]);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","userId","contract","drizzleState","methods","cacheCall","accounts","parseInt","setState","componentDidMount","drizzle","props","contracts","UserStorage","getDataKey","render","displayData","profiles","state","console","log","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KADiC;;AAAA,uCAoB9B,OAAMC,QAAN,EAAeC,YAAf,KAAgC;AAC1C,YAAMF,MAAM,GAAGC,QAAQ,CAACE,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCF,YAAY,CAACG,QAAb,CAAsB,CAAtB,CAAxC,CAAf;AACA,aAAOC,QAAQ,CAACN,MAAD,CAAf;AACD,KAvByC;;AAAA,wCAyB7B,OAAMA,MAAN,EAAaC,QAAb,KAA0B;AACrC,YAAMF,OAAO,GAAGE,QAAQ,CAACE,OAAT,CAAiB,UAAjB,EAA6BC,SAA7B,CAAuCJ,MAAvC,CAAhB;AACA,WAAKO,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KA5ByC;AAAA;;AAGzC,QAAMS,iBAAN,GAA0B;AACxB,UAAM;AAAEC,MAAAA,OAAF;AAAWP,MAAAA;AAAX,QAA4B,KAAKQ,KAAvC;AACA,UAAMT,QAAQ,GAAGQ,OAAO,CAACE,SAAR,CAAkBC,WAAnC,CAFwB,CAGzB;AAGE;;AACA,UAAMZ,MAAM,GAAG,CAAf;AACA,SAAKa,UAAL,CAAgBb,MAAhB,EAAuBC,QAAvB,EAAgCC,YAAhC,EARuB,CASvB;AAIF;AACA;AACA;;AAYDY,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEF,MAAAA;AAAF,QAAkB,KAAKF,KAAL,CAAWR,YAAX,CAAwBS,SAAhD;AACA,UAAMI,WAAW,GAAGH,WAAW,CAACI,QAAZ,CAAqB,KAAKC,KAAL,CAAWlB,OAAhC,CAApB,CAHO,CAGuD;;AAC9DmB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWjB,MAAvB,EAJO,CAOP;;AAEA,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQe,WAAW,IAAIA,WAAW,CAACK,KAAZ,CAAkB,CAAlB,CAAvB,CAFF;AAID;;AA3CwC;;AA8C1C,eAAevB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null, userId: null };\r\n\r\n async componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n  // const account = drizzleState.accounts[0];\r\n   \r\n\r\n    //const userId = await this.getUserId(contract,drizzleState);\r\n    const userId = 1;\r\n    this.getDataKey(userId,contract,drizzleState);\r\n    //const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\r\n\r\n\r\n\r\n  // const dataKey = contract.methods[\"profiles\"].cacheCall(1);\r\n  //  this.setState({ dataKey });\r\n }\r\n\r\ngetUserId = async(contract,drizzleState) => {\r\n  const userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\r\n  return parseInt(userId);\r\n}\r\n\r\ngetDataKey = async(userId,contract) => {\r\n  const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\r\n  this.setState({ dataKey });\r\n}\r\n\r\n render() {\r\n  \r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   console.log(this.state.userId)\r\n\r\n   \r\n   //username: Web3.utils.toAscii(username),\r\n\r\n   return (\r\n    \r\n     <p>Hi: {displayData && displayData.value[1]}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}