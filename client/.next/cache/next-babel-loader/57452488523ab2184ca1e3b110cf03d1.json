{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport ExpSaleNominations from '../ExpSaleNominations'; //import Moment from \"react-moment\";\n//import moment from \"moment\";\n\nconst SaleExpCard = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  let ordersArray = [];\n\n  const orderSaleCall = address => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {category:parcel, status:cancelled, owner:\\\"\".concat(address, \"\\\"}) {\\n          status \\n          id\\n          nft{\\n           parcel {\\n             x,\\n             y, \\n             tokenId\\n           }\\n           activeOrder {\\n             id\\n             price\\n             expiresAt\\n             nftAddress\\n             txHash\\n           }\\n         }\\n        }\\n      }\")\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then(result => {\n      ordersArray.push(...result.data.orders);\n    }, error => {\n      return error;\n    }).then(() => {\n      setOrders(ordersArray);\n      console.log(orders);\n      setTotalOrders(ordersArray.length);\n      setLoading(false);\n    }, error => {\n      return error;\n    });\n  };\n\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var proposalContract, deployedAddresses, i, address, propData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return props.drizzle.contracts.ProposalController;\n\n            case 2:\n              proposalContract = _context.sent;\n              _context.next = 5;\n              return proposalContract.methods.getDeployedAddresses().call();\n\n            case 5:\n              deployedAddresses = _context.sent;\n              i = 0;\n\n            case 7:\n              if (!(i < deployedAddresses.length)) {\n                _context.next = 16;\n                break;\n              }\n\n              address = deployedAddresses[i];\n              _context.next = 11;\n              return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n            case 11:\n              propData = _context.sent;\n              //Add all failed 1st and 2nd Sales for 2nd Sale and Award Asset\n              //if(propData[0] == 4){\n              orderSaleCall(address); //}\n\n            case 13:\n              i++;\n              _context.next = 7;\n              break;\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, \"fffff\");\n};\n\n_s(SaleExpCard, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = SaleExpCard;\nexport default SaleExpCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaleExpCard\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/SaleExpCard.js"],"names":["React","useState","useEffect","Pagination","ExpSaleNominations","SaleExpCard","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","ordersArray","orderSaleCall","address","myHeaders","Headers","append","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","push","data","error","console","log","length","fetchParcels","drizzle","contracts","ProposalController","proposalContract","methods","getDeployedAddresses","call","deployedAddresses","i","getPropData","propData","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,kBAAP,MAA+B,uBAA/B,C,CAEA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA;;AAAA,oBAItBN,QAAQ,CAAC,EAAD,CAJc;AAAA,QAI3CO,MAJ2C;AAAA,QAInCC,SAJmC;;AAAA,qBAKpBR,QAAQ,CAAC,KAAD,CALY;AAAA,QAK3CS,OAL2C;AAAA,QAKlCC,UALkC;;AAAA,qBAMZV,QAAQ,CAAC,CAAD,CANI;AAAA,QAM3CW,WAN2C;AAAA,QAM9BC,cAN8B;;AAAA,qBAOzBZ,QAAQ,CAAC,CAAD,CAPiB;AAAA,QAO3Ca,cAP2C;;AAAA,qBAQZb,QAAQ,EARI;AAAA,QAQ3Cc,WAR2C;AAAA,QAQ9BC,cAR8B;;AAUlD,MAAIC,WAAW,GAAG,EAAlB;;AAEA,QAAMC,aAAa,GAAIC,OAAD,IAAa;AACjC,UAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,UAAMC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,iFAEyBP,OAFzB;AAAP,KAAf,CAAhB;AAwBF,UAAMQ,SAAS,GAAG,kEAAlB;AACAC,IAAAA,KAAK,CAACD,SAAD,EAAY;AACfE,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAACV,SAFO;AAGfW,MAAAA,IAAI,EAACR,OAHU;AAGDS,MAAAA,SAAS,EAAC,EAHT;AAIfC,MAAAA,QAAQ,EAAE;AAJK,KAAZ,CAAL,CAMGC,IANH,CAMQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANf,EAOGF,IAPH,CAOSG,MAAD,IAAY;AAChBpB,MAAAA,WAAW,CAACqB,IAAZ,CAAiB,GAAGD,MAAM,CAACE,IAAP,CAAY/B,MAAhC;AACD,KATH,EAUGgC,KAAD,IAAW;AACX,aAAOA,KAAP;AACC,KAZH,EAcCN,IAdD,CAcM,MAAM;AACVzB,MAAAA,SAAS,CAACQ,WAAD,CAAT;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAYlC,MAAZ;AACAQ,MAAAA,cAAc,CAACC,WAAW,CAAC0B,MAAb,CAAd;AACAhC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAnBD,EAoBC6B,KAAD,IAAW;AACT,aAAOA,KAAP;AACC,KAtBH;AAwBD,GArDC;;AAwDAtC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0C,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYtC,KAAK,CAACuC,OAAN,CAAcC,SAAd,CAAwBC,kBADpC;;AAAA;AACbC,cAAAA,gBADa;AAAA;AAAA,qBAEaA,gBAAgB,CAACC,OAAjB,CAAyBC,oBAAzB,GAAgDC,IAAhD,EAFb;;AAAA;AAEbC,cAAAA,iBAFa;AAMdC,cAAAA,CAAC,GAAG,CANU;;AAAA;AAAA,oBAMPA,CAAC,GAAGD,iBAAiB,CAACT,MANf;AAAA;AAAA;AAAA;;AAOXxB,cAAAA,OAPW,GAODiC,iBAAiB,CAACC,CAAD,CAPhB;AAAA;AAAA,qBASML,gBAAgB,CAACC,OAAjB,CAAyBK,WAAzB,WAAwCnC,OAAxC,GAAmDgC,IAAnD,EATN;;AAAA;AASXI,cAAAA,QATW;AAUlB;AACC;AACArC,cAAAA,aAAa,CAACC,OAAD,CAAb,CAZiB,CAapB;;AAboB;AAMuBkC,cAAAA,CAAC,EANxB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZT,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAgBFA,IAAAA,YAAY;AACb,GAlBU,EAkBR,EAlBQ,CAAT,CApEkD,CAwFlD;;AACA,QAAMY,iBAAiB,GAAG5C,WAAW,GAAGE,cAAxC;AACA,QAAM2C,kBAAkB,GAAGD,iBAAiB,GAAG1C,cAA/C;AACA,QAAM4C,cAAc,GAAGlD,MAAM,CAACmD,KAAP,CAAaF,kBAAb,EAAiCD,iBAAjC,CAAvB,CA3FkD,CA6FlD;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAIhD,cAAc,CAACgD,UAAD,CAA7C;;AAEA,SACE,oCADF;AAiBD,CAjHD;;GAAMxD,W;;KAAAA,W;AAoHN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport ExpSaleNominations from '../ExpSaleNominations'\r\n \r\n//import Moment from \"react-moment\";\r\n//import moment from \"moment\";\r\n\r\nconst SaleExpCard = ({ props, userManaBalance }) => {\r\n\r\n\r\n  \r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  let ordersArray = [];\r\n\r\n  const orderSaleCall = (address) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {category:parcel, status:cancelled, owner:\"${address}\"}) {\r\n          status \r\n          id\r\n          nft{\r\n           parcel {\r\n             x,\r\n             y, \r\n             tokenId\r\n           }\r\n           activeOrder {\r\n             id\r\n             price\r\n             expiresAt\r\n             nftAddress\r\n             txHash\r\n           }\r\n         }\r\n        }\r\n      }`\r\n  })\r\n\r\n\r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      ordersArray.push(...result.data.orders);\r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  .then(() => {\r\n    setOrders(ordersArray);\r\n    console.log(orders)\r\n    setTotalOrders(ordersArray.length);\r\n    setLoading(false); \r\n  },\r\n  (error) => {\r\n    return error;\r\n    }\r\n  )\r\n}\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n      const proposalContract = await props.drizzle.contracts.ProposalController;\r\n      const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n      //const deployedAddresses = [\"0xd608bc8B87d8ab9B409C8409800487A1D8b14F6d\"]\r\n     \r\n      let i;\r\n      for (i = 0; i < deployedAddresses.length; i++) {\r\n        const address = deployedAddresses[i];\r\n    \r\n        const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n       //Add all failed 1st and 2nd Sales for 2nd Sale and Award Asset\r\n        //if(propData[0] == 4){\r\n        orderSaleCall(address);\r\n     //}\r\n    }\r\n}\r\n  fetchParcels();  \r\n}, []);\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n    fffff\r\n      {/* <ExpSaleNominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage}\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      /> */}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default SaleExpCard;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}