{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS'; // const getDrizzle = (state) => state.appReducers.drizzle;\n// const getContracts = (state) => state.contracts;\n// function* fetchTokenId (action) {\n//   yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\n// }\n// function* fetchTokenId (action) {\n//   return console.log('Hello Sagas!')\n// }\n\nfunction fetchPropAddr(action) {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS'\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nexport default function appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/appSagas.js"],"names":["fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","GET_PROP_ADDRESS","action","type"],"mappings":"mDAkBUA,a;oDAKeC,W;;AAvBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAUjB,aAAV,CAAyBkB,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMb,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUlB,WAAV;AAAA;AAAA;AAAA;AAAA;AACb,eAAMG,UAAU,CAAC,kBAAD,EAAqBJ,aAArB,CAAhB;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS'\r\n\r\n\r\n// const getDrizzle = (state) => state.appReducers.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n\r\n// function* fetchTokenId (action) {\r\n//   yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n// }\r\n// function* fetchTokenId (action) {\r\n//   return console.log('Hello Sagas!')\r\n// }\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type: 'GOT_PROP_ADDRESS' });\r\n\r\n}\r\n\r\nexport default function *appRootSaga() {\r\n  yield takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\r\n  //yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}