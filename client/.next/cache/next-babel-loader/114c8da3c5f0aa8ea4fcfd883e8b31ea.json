{"ast":null,"code":"import { generateStore, EventActions, drizzleReducers, drizzleSagas } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nconst contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = \"\".concat(message);\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n};\n\nconst joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const broadcast = action.txHash; //const txStatus = action.event.event\n\n    const message = action.receipt;\n    console.log({\n      broadcast\n    });\n    const display = \"\".concat(broadcast);\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n}; //\n\n\nexport default function* capRootSaga() {\n  yield takeLatest(joinTransactionSaga);\n  yield takeLatest(contractEventSaga);\n} // export default function* root() {\n//   yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n//   yield takeLatest('TX_ERROR', showTxErrorMsg);\n//   yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\n//   yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n//   yield all(\n//     drizzleSagas.map(saga => fork(saga))\n//   );\n//   //yield getStoredValueWatcher();\n// }","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["generateStore","EventActions","drizzleReducers","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","contractEventSaga","store","next","action","type","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT","joinTransactionSaga","broadcast","txHash","receipt","console","log","BOTTOM_LEFT","capRootSaga"],"mappings":"AACA,SAASA,aAAT,EAAwBC,YAAxB,EAAsCC,eAAtC,EAAuDC,YAAvD,QAA2E,gBAA3E;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AAEA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACnD,MAAIA,MAAM,CAACC,IAAP,KAAgBhB,YAAY,CAACiB,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,aAAMJ,OAAN,CAAb;AAEAP,IAAAA,KAAK,CAACY,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEb,KAAK,CAACc,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,CARD;;AAUA,MAAMY,mBAAmB,GAAGd,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACrD,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMY,SAAS,GAAGb,MAAM,CAACc,MAAzB,CADmC,CAEnC;;AACA,UAAMX,OAAO,GAAGH,MAAM,CAACe,OAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,MAAAA;AAAD,KAAZ;AACA,UAAMN,OAAO,aAAMM,SAAN,CAAb;AAEAjB,IAAAA,KAAK,CAACY,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEb,KAAK,CAACc,QAAN,CAAeQ;AAA3B,KAAvB;AACD;;AACD,SAAOnB,IAAI,CAACC,MAAD,CAAX;AACD,CAXD,C,CAcA;;;AACA,eAAe,UAAUmB,WAAV,GAAwB;AACrC,QAAM7B,UAAU,CAACsB,mBAAD,CAAhB;AACA,QAAMtB,UAAU,CAACO,iBAAD,CAAhB;AACA,C,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport { generateStore, EventActions, drizzleReducers, drizzleSagas } from '@drizzle/store'\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\n\r\nimport { toast } from 'react-toastify'\r\n\r\nconst contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\nconst joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const broadcast = action.txHash\r\n    //const txStatus = action.event.event\r\n    const message = action.receipt\r\n    console.log({broadcast})\r\n    const display = `${broadcast}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n//\r\nexport default function* capRootSaga() {\r\n  yield takeLatest(joinTransactionSaga)\r\n  yield takeLatest(contractEventSaga)\r\n }\r\n\r\n// export default function* root() {\r\n//   yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n//   yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n//   yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\r\n//   yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n//   yield all(\r\n//     drizzleSagas.map(saga => fork(saga))\r\n//   );\r\n//   //yield getStoredValueWatcher();\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}