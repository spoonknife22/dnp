{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage;\n    const account = drizzleState.accounts[0];\n    const dataKey = await contract.methods[\"addresses\"].cacheCall(account);\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.addresses[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    const user = displayData && displayData.value;\n    const use = user;\n    console.log(use);\n    return {\n      use: use\n    };\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","EthAccounts","Component","dataKey","componentDidMount","drizzle","drizzleState","props","contract","contracts","UserStorage","account","accounts","methods","cacheCall","setState","render","displayData","addresses","state","user","value","use","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADiC;AAAA;;AAG1C,QAAMC,iBAAN,GAA0B;AACvB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGL,YAAY,CAACM,QAAb,CAAsB,CAAtB,CAAhB;AAKD,UAAMT,OAAO,GAAG,MAAMK,QAAQ,CAACK,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCH,OAAxC,CAAtB;AACA,SAAKI,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AAEA;;AAGDa,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEN,MAAAA;AAAF,QAAkB,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAAhD;AACA,UAAMQ,WAAW,GAAGP,WAAW,CAACQ,SAAZ,CAAsB,KAAKC,KAAL,CAAWhB,OAAjC,CAApB,CAHO,CAGwD;;AAC/D,UAAMiB,IAAI,GAAIH,WAAW,IAAIA,WAAW,CAACI,KAAzC;AAEA,UAAMC,GAAG,GAAGF,IAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO;AAELA,MAAAA,GAAG,EAAGA;AAFD,KAAP;AAID;;AA7BwC;;AAgC1C,eAAerB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null };\r\n\r\nasync componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n   const account = drizzleState.accounts[0];\r\n  \r\n                                                        \r\n \r\n \r\n  const dataKey = await contract.methods[\"addresses\"].cacheCall(account);\r\n  this.setState({ dataKey });\r\n  \r\n }\r\n\r\n\r\n render() {\r\n  \r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.addresses[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   const user =  displayData && displayData.value;\r\n\r\n   const use = user;\r\n   console.log(use)\r\n   return {\r\n\r\n     use: (use)\r\n   }\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}