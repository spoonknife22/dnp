{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\AbPreNomCard.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\nimport Web3 from \"web3\";\nimport InnerAbCard from './InnerAbCard'; //import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\n\nconst AbPreNomCard = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        projectTokenIds = _useState[0],\n        setprojectTokenIds = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const graphql = JSON.stringify({\n    query: \" {\\n        projects(where: {projectId: \\\"23\\\", contract_in: [\\\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\\\", \\\"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\\\"]}) {\\n          invocations\\n          tokens{\\n         tokenId\\n         }\\n        }\\n        \\n       }\"\n  });\n  useEffect(() => {\n    const fetchTokenIds = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n                  var projectsGQL, callsPerProject, i, j, tokenIdArray, tokenIdObject;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.projects[0].invocations;\n\n                      case 2:\n                        projectsGQL = _context.sent;\n                        callsPerProject = Math.ceil(projectsGQL / 100);\n                        tokenIdArray = [];\n\n                        for (i = 0; i < callsPerProject; i++) {\n                          for (j = 0; j < 100; j++) {\n                            tokenIdObject = result.data.projects[0].tokens[j];\n                            tokenIdArray.push(tokenIdObject.tokenId);\n                          }\n                        }\n\n                        setprojectTokenIds(tokenIdArray);\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchTokenIds() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchTokenIds();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(InnerAbCard, {\n    props: props,\n    projectTokenIds: projectTokenIds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AbPreNomCard;","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/AbPreNomCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Web3","InnerAbCard","AbPreNomCard","props","userManaBalance","projectTokenIds","setprojectTokenIds","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","graphql","JSON","stringify","query","fetchTokenIds","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","projects","invocations","projectsGQL","callsPerProject","Math","ceil","tokenIdArray","i","j","tokenIdObject","tokens","push","tokenId","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\nimport Web3 from \"web3\";\r\nimport InnerAbCard from './InnerAbCard';\r\n//import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\r\n\r\nconst AbPreNomCard = ({ props, userManaBalance }) => {\r\n\r\n  const [projectTokenIds, setprojectTokenIds] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const graphql= JSON.stringify({ query: \r\n      ` {\r\n        projects(where: {projectId: \"23\", contract_in: [\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\", \"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\"]}) {\r\n          invocations\r\n          tokens{\r\n         tokenId\r\n         }\r\n        }\r\n        \r\n       }`\r\n    })\r\n\r\n  useEffect(() => {\r\n    const fetchTokenIds = async () => {\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks';\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n       \r\n        const projectsGQL = await result.data.projects[0].invocations;\r\n        const callsPerProject = Math.ceil(projectsGQL / 100);\r\n        \r\n        let i;\r\n        let j;\r\n        let tokenIdArray = [];\r\n\r\n        for (i = 0; i < callsPerProject; i++) {\r\n          for (j = 0; j < 100; j++) {\r\n            const tokenIdObject = result.data.projects[0].tokens[j];\r\n            tokenIdArray.push(tokenIdObject.tokenId)\r\n          }             \r\n        }\r\n          setprojectTokenIds(tokenIdArray);\r\n      },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchTokenIds();  \r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <InnerAbCard props ={props} projectTokenIds={projectTokenIds}   />\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\nexport default AbPreNomCard;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}