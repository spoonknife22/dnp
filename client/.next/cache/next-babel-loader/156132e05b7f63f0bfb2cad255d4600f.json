{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\AbPreNomCard.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\nimport Web3 from \"web3\"; //import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\n\nconst AbPreNomCard = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const graphql = JSON.stringify({\n    query: \" {\\n        projects(where: {projectId: \\\"23\\\", contract_in: [\\\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\\\", \\\"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\\\"]}) {\\n          invocations\\n          tokens{\\n         tokenId\\n         }\\n        }\\n        \\n       }\"\n  });\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n                  var projectsGQL, callsPerProject, i, tokenIdArray, tokenId;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.projects[0].invocations;\n\n                      case 2:\n                        projectsGQL = _context.sent;\n                        console.log(result.data.projects[0]);\n                        callsPerProject = Math.ceil(projectsGQL / 100);\n                        tokenIdArray = []; //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\n\n                        for (i = 0; i < callsPerProject; i++) {\n                          tokenId = result.data.projects[0].tokens[i];\n                          console.log(tokenId.tokenId); // const propData = await proposalContract.methods.getPropData(`${address}`).call();\n                          // if(propData[0] == 0 || propData[0] == 1 || propData[0] == 4) {\n                          // activeArray.push(propData[1]);\n                        } // if(propData[0] == 4){\n                        //   forSaleArray.push(propData[1]);\n                        // }\n\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), //FILTER OUT NOMINATED PROPS\n              // const ordersFiltered = ordersGQL.filter(item => forSaleArray.includes(item.nft.parcel.tokenId))\n              //     setOrders(ordersFiltered);\n              //     setTotalOrders(ordersFiltered.length)\n              //     setLoading(false); \n              //},\n              error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current posts\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AbPreNomCard; // let ids = '3000001,3000002,3000003';\n// let nftIds = ids.split(\",\");\n//nftIds.map(Number);\n//let tokensArray = [`?token_ids=${3000001}&token_ids=${3000002}&token_ids=${3000003}`];\n// var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n//targetUrl = \"https://api.opensea.io/api/v1/assets?\"\n//let querystring = '&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270'\n//targetUrl = `https://api.opensea.io/api/v1/assets?token_ids=106000174&token_ids=106000177&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/AbPreNomCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Web3","AbPreNomCard","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","graphql","JSON","stringify","query","fetchParcels","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","projects","invocations","projectsGQL","console","log","callsPerProject","Math","ceil","tokenIdArray","i","tokenId","tokens","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\nimport Web3 from \"web3\";\r\n//import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\r\n\r\nconst AbPreNomCard = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const graphql= JSON.stringify({ query: \r\n      ` {\r\n        projects(where: {projectId: \"23\", contract_in: [\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\", \"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\"]}) {\r\n          invocations\r\n          tokens{\r\n         tokenId\r\n         }\r\n        }\r\n        \r\n       }`\r\n    })\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n       \r\n        const projectsGQL = await result.data.projects[0].invocations;\r\n        console.log(result.data.projects[0])\r\n        const callsPerProject = Math.ceil(projectsGQL / 100);\r\n        \r\n        \r\n        let i;\r\n        let tokenIdArray = [];\r\n        //const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n  \r\n        for (i = 0; i < callsPerProject; i++) {\r\n          const tokenId = result.data.projects[0].tokens[i];\r\n          console.log(tokenId.tokenId)\r\n          // const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n          // if(propData[0] == 0 || propData[0] == 1 || propData[0] == 4) {\r\n          // activeArray.push(propData[1]);\r\n        }\r\n          // if(propData[0] == 4){\r\n          //   forSaleArray.push(propData[1]);\r\n          // }\r\n       },\r\n    \r\n      //FILTER OUT NOMINATED PROPS\r\n      // const ordersFiltered = ordersGQL.filter(item => forSaleArray.includes(item.nft.parcel.tokenId))\r\n      //     setOrders(ordersFiltered);\r\n      //     setTotalOrders(ordersFiltered.length)\r\n      //     setLoading(false); \r\n        //},\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>{}</div>\r\n\r\n      {/* <Nominations \r\n        posts={currentPosts} \r\n        loading={loading} \r\n      />\r\n      \r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      /> */}\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\nexport default AbPreNomCard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // let ids = '3000001,3000002,3000003';\r\n  // let nftIds = ids.split(\",\");\r\n  //nftIds.map(Number);\r\n  //let tokensArray = [`?token_ids=${3000001}&token_ids=${3000002}&token_ids=${3000003}`];\r\n\r\n  // var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  //targetUrl = \"https://api.opensea.io/api/v1/assets?\"\r\n  //let querystring = '&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270'\r\n//targetUrl = `https://api.opensea.io/api/v1/assets?token_ids=106000174&token_ids=106000177&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;"]},"metadata":{},"sourceType":"module"}