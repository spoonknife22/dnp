{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\PreNominatedAssetCards.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations'; //import Moment from \"react-moment\";\n\nimport moment from \"moment\";\n\nconst PreNominatedAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const nowUnix = moment().valueOf();\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const currentTime = moment().valueOf();\n  const graphql = JSON.stringify({\n    query: \"{\\n        orders(first:12,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:\".concat(currentTime, \"}) {\\n         status \\n         nft{\\n          parcel {\\n            x,\\n            y, \\n            tokenId\\n          }\\n          activeOrder {\\n            id\\n            price\\n            expiresAt\\n            nftAddress\\n            txHash\\n          }\\n        }\\n      }\\n      }\")\n  });\n  useEffect(() => {\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n                  var ordersGQL, tokenIdArray, ordersFiltered, proposalContract, deployedAddresses, i, fundingArray, fundedArray, forSaleArray, address, propData;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.orders;\n\n                      case 2:\n                        ordersGQL = _context.sent;\n                        console.log(ordersGQL[0].nft.parcel.tokenId); //All Active Array\n                        //const ordersFiltered = await result.data.orders;\n                        //FILTER OUT NOMINATED PROPS\n\n                        _context.next = 6;\n                        return props.drizzle.contracts.ProposalController.methods.getDeployedProposal().call();\n\n                      case 6:\n                        tokenIdArray = _context.sent;\n                        ordersFiltered = ordersGQL.filter(item => !tokenIdArray.includes(item.parcel.tokenId)); ///\n\n                        _context.next = 10;\n                        return props.drizzle.contracts.ProposalController;\n\n                      case 10:\n                        proposalContract = _context.sent;\n                        _context.next = 13;\n                        return proposalContract.methods.getDeployedAddresses().call();\n\n                      case 13:\n                        deployedAddresses = _context.sent;\n                        fundingArray = [];\n                        fundedArray = [];\n                        forSaleArray = [];\n                        i = 0;\n\n                      case 18:\n                        if (!(i < deployedAddresses.length)) {\n                          _context.next = 27;\n                          break;\n                        }\n\n                        address = deployedAddresses[i];\n                        _context.next = 22;\n                        return proposalContract.methods.getPropData(\"\".concat(address)).call();\n\n                      case 22:\n                        propData = _context.sent;\n\n                        if (propData[0] == 0) {\n                          fundingArray.push(propData[1]);\n                        } else if (propData[0] == 1) {\n                          fundedArray.push(propData[1]);\n                        } else if (propData[0] == 4) {\n                          forSaleArray.push(propData[1]);\n                        }\n\n                      case 24:\n                        i++;\n                        _context.next = 18;\n                        break;\n\n                      case 27:\n                        //FILTER OUT NOMINATED PROPS\n                        //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\n                        //Just Funding Array\n                        //const fundingFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId));\n                        //const ordersFiltered = ordersGQL.filter(item => fundingArray.includes(item.nft.parcel.tokenId));\n                        //Just Funded Array where purchase or resale failed\n                        //const fundedFilter = ordersGQL.filter(item => fundedArray.includes(item.parcel.tokenId));\n                        //Just For Sale Array\n                        //const forSaleFilter = ordersGQL.filter(item => forSaleArray.includes(item.parcel.tokenId));\n                        setOrders(ordersFiltered);\n                        setTotalOrders(ordersFiltered.length);\n                        setLoading(false);\n\n                      case 30:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalOrders,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 8\n    }\n  }));\n};\n\nexport default PreNominatedAssetCards;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/PreNominatedAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","PreNominatedAssetCards","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","nowUnix","valueOf","myHeaders","Headers","append","currentTime","graphql","JSON","stringify","query","fetchParcels","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","ordersGQL","console","log","nft","parcel","tokenId","drizzle","contracts","ProposalController","methods","getDeployedProposal","call","tokenIdArray","ordersFiltered","filter","item","includes","proposalContract","getDeployedAddresses","deployedAddresses","fundingArray","fundedArray","forSaleArray","i","length","address","getPropData","propData","push","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\n//import Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\n\r\nconst PreNominatedAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const nowUnix = moment().valueOf();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const currentTime= moment().valueOf();\r\n  const graphql= JSON.stringify({ query: \r\n      `{\r\n        orders(first:12,orderBy: price,where:{status:open, category:parcel,expiresAt_gt:${currentTime}}) {\r\n         status \r\n         nft{\r\n          parcel {\r\n            x,\r\n            y, \r\n            tokenId\r\n          }\r\n          activeOrder {\r\n            id\r\n            price\r\n            expiresAt\r\n            nftAddress\r\n            txHash\r\n          }\r\n        }\r\n      }\r\n      }`\r\n    })\r\n\r\n  useEffect(() => {\r\n    const fetchParcels = async () => {\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n          const ordersGQL = await result.data.orders;\r\n          console.log(ordersGQL[0].nft.parcel.tokenId)\r\n          //All Active Array\r\n          //const ordersFiltered = await result.data.orders;\r\n          //FILTER OUT NOMINATED PROPS\r\n          const tokenIdArray = await props.drizzle.contracts.ProposalController.methods.getDeployedProposal().call();\r\n          const ordersFiltered = ordersGQL.filter(item => !tokenIdArray.includes(item.parcel.tokenId));\r\n          ///\r\n       \r\n         const proposalContract = await props.drizzle.contracts.ProposalController;\r\n         const deployedAddresses = await proposalContract.methods.getDeployedAddresses().call();\r\n        \r\n         let i;\r\n         let fundingArray = [];\r\n         let fundedArray = [];\r\n         let forSaleArray = [];\r\n  \r\n         for (i = 0; i < deployedAddresses.length; i++) {\r\n           const address = deployedAddresses[i];\r\n           const propData = await proposalContract.methods.getPropData(`${address}`).call();\r\n\r\n           if(propData[0] == 0) {\r\n             fundingArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 1){\r\n             fundedArray.push(propData[1]);\r\n           }\r\n           else if(propData[0] == 4){\r\n             forSaleArray.push(propData[1]);\r\n           }\r\n       }\r\n    \r\n      //FILTER OUT NOMINATED PROPS\r\n       //const ordersFiltered = ordersGQL.filter(item => !fundingArray.includes(item.parcel.tokenId));\r\n\r\n      //Just Funding Array\r\n       //const fundingFilter = ordersGQL.filter(item => fundingArray.includes(item.parcel.tokenId));\r\n       //const ordersFiltered = ordersGQL.filter(item => fundingArray.includes(item.nft.parcel.tokenId));\r\n       //Just Funded Array where purchase or resale failed\r\n       //const fundedFilter = ordersGQL.filter(item => fundedArray.includes(item.parcel.tokenId));\r\n\r\n      //Just For Sale Array\r\n       //const forSaleFilter = ordersGQL.filter(item => forSaleArray.includes(item.parcel.tokenId));\r\n          setOrders(ordersFiltered);\r\n          setTotalOrders(ordersFiltered.length)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props}   \r\n        userManaBalance={userManaBalance}\r\n      />\r\n       <Pagination\r\n        currentPage ={currentPage}\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalOrders}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default PreNominatedAssetCards;\r\n\r\n"]},"metadata":{},"sourceType":"module"}