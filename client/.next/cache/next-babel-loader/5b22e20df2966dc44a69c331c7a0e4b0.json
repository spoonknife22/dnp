{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(testSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\nconst GET_TEST = 'GET_TEST';\n\nfunction testSaga() {\n  return _regeneratorRuntime.wrap(function testSaga$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        console.log(\"Example saga reached\"); //yield put({ type: 'TESTED_SAGA' });\n\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr(action) {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 33\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_TEST, testSaga);\n\n      case 2:\n        _context3.next = 4;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["testSaga","fetchPropAddr","appRootSaga","put","takeEvery","GET_PROP_ADDRESS","TEST_SAGA","GET_TEST","console","log","action","type","propAddress"],"mappings":";;oDAMUA,Q;qDAMAC,a;qDAIAC,W;;AAhBV,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,QAAQ,GAAG,UAAjB;;AAEA,SAAUP,QAAV;AAAA;AAAA;AAAA;AACEQ,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADF,CAEE;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUR,aAAV,CAAyBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMP,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAAC,kBAAP;AAA2BC,UAAAA,WAAW,EAAC;AAAvC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUV,WAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,SAAS,CAACG,QAAD,EAAWP,QAAX,CAAf;;AADF;AAAA;AAEE,eAAMI,SAAS,CAACC,gBAAD,EAAmBJ,aAAnB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAeC,WAAf","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\nconst GET_TEST = 'GET_TEST';\r\n\r\nfunction* testSaga () {\r\n  console.log(\"Example saga reached\");\r\n  //yield put({ type: 'TESTED_SAGA' });\r\n}\r\n\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type:'GOT_PROP_ADDRESS', propAddress:33});\r\n}\r\n\r\nfunction* appRootSaga () {\r\n  yield takeEvery(GET_TEST, testSaga);\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\r\n}\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}