{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\forms\\\\InterMediateForm.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass InterMediateForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, drizzle, drizzleState, propAddress, tokenId, state, contract, dataKey;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this$props = _this.props, drizzle = _this$props.drizzle, drizzleState = _this$props.drizzleState, propAddress = _this$props.propAddress, tokenId = _this$props.tokenId;\n            state = drizzle.store.getState();\n\n            if (!(state.drizzleStatus.initialized && propAddress)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return drizzle.contracts[\"\".concat(propAddress)];\n\n          case 5:\n            contract = _context.sent;\n            dataKey = contract.methods['getSummary'].cacheCall(tokenId);\n\n            _this.setState({\n              dataKey\n            }); // const propContracts = state.contracts[`${propAddress}`];\n            // const displayData = await propContracts.methods['getSummary'][this.state.dataKey]; \n            // const userId =  displayData && displayData.value;\n\n\n          case 8:\n            return _context.abrupt(\"return\", \"Loading...\");\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  render() {\n    // const { drizzle, propAddress } = this.props;\n    // let state = drizzle.store.getState();\n    // if (state.drizzleStatus.initialized) {\n    //   const propContract = state.contracts[`${propAddress}`];\n    // const displayData = propContract.methods['getSummary'][this.state.dataKey]; \n    // const userId =  displayData && displayData.value;\n    // console.log(userId)\n    //}\n    // console.log(this.state.dataKey)\n    // const { propAddress } = this.props.drizzleState.contracts;\n    // const displayData = this.props.drizzleState.contractspropAddress.getSummary[this.state.dataKey]; \n    // const userId =  displayData && displayData.value;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 6\n      }\n    }, \"'dddd'\");\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  proposalStorage: state.appReducers.proposalStorage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPropAbi: ProposalStorageAbi => dispatch({\n    type: \"GOT_PROP_ABI\",\n    proposalStorageAbi: ProposalStorageAbi\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/forms/InterMediateForm.js"],"names":["React","Component","connect","InterMediateForm","constructor","props","state","dataKey","componentDidMount","drizzle","drizzleState","propAddress","tokenId","store","getState","drizzleStatus","initialized","contracts","contract","methods","cacheCall","setState","render","mapStateToProps","proposalStorage","appReducers","mapDispatchToProps","dispatch","getPropAbi","ProposalStorageAbi","type","proposalStorageAbi"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAIA,MAAMC,gBAAN,SAA+BF,SAA/B,CAAyC;AACvCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAC;AADG,KAAb;AAGD;;AAEIC,EAAAA,iBAAN,GAA0B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,0BACiC,KAAI,CAACH,KADtC,EACfI,OADe,eACfA,OADe,EACNC,YADM,eACNA,YADM,EACQC,WADR,eACQA,WADR,EACqBC,OADrB,eACqBA,OADrB;AAEnBN,YAAAA,KAFmB,GAEXG,OAAO,CAACI,KAAR,CAAcC,QAAd,EAFW;;AAAA,kBAGnBR,KAAK,CAACS,aAAN,CAAoBC,WAApB,IAAmCL,WAHhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAICF,OAAO,CAACQ,SAAR,WAAqBN,WAArB,EAJD;;AAAA;AAIjBO,YAAAA,QAJiB;AAKjBX,YAAAA,OALiB,GAKPW,QAAQ,CAACC,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,CAAyCR,OAAzC,CALO;;AAMvB,YAAA,KAAI,CAACS,QAAL,CAAc;AACZd,cAAAA;AADY,aAAd,EANuB,CASvB;AACA;AACA;;;AAXuB;AAAA,6CAgBlB,YAhBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBxB;;AAEDe,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AAKD;;AA7CsC;;AAiDzC,MAAMC,eAAe,GAAIjB,KAAD,KAAY;AAClCkB,EAAAA,eAAe,EAAElB,KAAK,CAACmB,WAAN,CAAkBD;AADD,CAAZ,CAAxB;;AAIA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,UAAU,EAAGC,kBAAD,IAAyBF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,kBAAkB,EAACF;AAA3C,GAAD;AADL,CAAf,CAA3B;;AAIA,eAAe3B,OAAO,CAACqB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CvB,gBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n   \r\nclass InterMediateForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataKey:null\r\n    }\r\n  }\r\n\r\n async componentDidMount() {   \r\n    const { drizzle, drizzleState, propAddress, tokenId } = this.props;\r\n    let state = drizzle.store.getState();\r\n    if (state.drizzleStatus.initialized && propAddress ) {\r\n    const contract =  await drizzle.contracts[`${propAddress}`];\r\n    const dataKey = contract.methods['getSummary'].cacheCall(tokenId);\r\n    this.setState({\r\n      dataKey\r\n    });\r\n    // const propContracts = state.contracts[`${propAddress}`];\r\n    // const displayData = await propContracts.methods['getSummary'][this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n   }\r\n  // else{\r\n  //   console.log('loading')\r\n  // }\r\n  return \"Loading...\";\r\n  }\r\n  \r\n  render() {\r\n    // const { drizzle, propAddress } = this.props;\r\n    // let state = drizzle.store.getState();\r\n    // if (state.drizzleStatus.initialized) {\r\n    //   const propContract = state.contracts[`${propAddress}`];\r\n    // const displayData = propContract.methods['getSummary'][this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n    // console.log(userId)\r\n    //}\r\n    // console.log(this.state.dataKey)\r\n    // const { propAddress } = this.props.drizzleState.contracts;\r\n    // const displayData = this.props.drizzleState.contractspropAddress.getSummary[this.state.dataKey]; \r\n    // const userId =  displayData && displayData.value;\r\n    return (\r\n     <div>\r\n       'dddd'\r\n     </div>\r\n    )\r\n  }\r\n}   \r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  proposalStorage: state.appReducers.proposalStorage\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getPropAbi: (ProposalStorageAbi) =>  dispatch({ type: \"GOT_PROP_ABI\", proposalStorageAbi:ProposalStorageAbi })\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InterMediateForm);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}