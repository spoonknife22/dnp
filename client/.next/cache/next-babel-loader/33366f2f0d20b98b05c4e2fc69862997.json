{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\NominationModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport ProposalForm from '../forms/ProposalForm';\n\nconst NominationModal = ({\n  parcel,\n  props,\n  userManaBalance,\n  getTokenId,\n  getCurrentProp,\n  propAddress\n}) => {\n  _s();\n\n  const drizzleState = props.drizzleState,\n        drizzle = props.drizzle;\n\n  const _useState = useState(false),\n        show = _useState[0],\n        setShow = _useState[1];\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false);\n\n  const _useState2 = useState(null),\n        tokenId = _useState2[0],\n        setTokenId = _useState2[1];\n\n  const _useState3 = useState(true),\n        loading = _useState3[0],\n        setLoading = _useState3[1]; ///const[drizzle, setDrizzle] = useState(props.drizzle)\n  //const [currentProp, setCurrentProp] = useState(null);\n\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphql, proxyUrl, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              graphql = JSON.stringify({\n                query: \"{ parcels(where: {x:\\\"\".concat(parcel.x, \"\\\",y:\\\"\").concat(parcel.y, \"\\\"}) { tokenId }}\")\n              });\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(proxyUrl + targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                const parcelData = result.data.parcels[0];\n                return parcelData;\n              }).then(result => {\n                const tokenId = result.tokenId;\n\n                if (tokenId === null) {\n                  setLoading(true);\n                }\n\n                setLoading(false);\n                return tokenId;\n              }).then(tokenId => {\n                setTokenId(tokenId);\n                getTokenId(tokenId);\n                const assetId = tokenId;\n                return assetId; //getCurrentProp(result,drizzle,drizzleState);\n                //onSetDrizzleState(drizzle);\n              }).then(assetId => {// var state = drizzle.store.getState()\n                // if (state.drizzleStatus.initialized) {\n                // const dataKey = drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${assetId}`);\n                // getCurrentProp(drizzle, dataKey);\n                // }\n                //return dataKey\n              }); // .then(async (dataKey) => {  \n              //   var state = drizzle.store.getState()\n              //   if (state.drizzleStatus.initialized) {\n              //   const displayData = await state.contracts.ProposalController.getPropTokenIdMap[dataKey];\n              //   const proposalAddress = displayData.value;\n              //   return proposalAddress\n              //   }\n              // }) \n              // .then(async (proposalAddress) => {  \n              //   //drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\n              //   const contractAddress = await proposalAddress;\n              //   return console.log(contractAddress)\n              // }) \n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchDetailsLink() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchDetailsLink();\n    propGetter();\n  }, []);\n  var state = drizzle.store.getState();\n\n  const propGetter = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var dataKey, contracts, proposalAddress, address;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!state.drizzleStatus.initialized) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 3;\n            return drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(\"\".concat(tokenId));\n\n          case 3:\n            dataKey = _context2.sent;\n            _context2.next = 6;\n            return state.contracts;\n\n          case 6:\n            contracts = _context2.sent;\n\n            if (contracts.ProposalController.synced) {\n              proposalAddress = contracts.ProposalController.getPropTokenIdMap[dataKey];\n              address = proposalAddress.value;\n              drizzle.store.dispatch({\n                type: 'GOT_PROP_ADDRESS',\n                propAddress: address\n              }); //return proposalAddress;\n            }\n\n          case 8:\n            console.log('Loading...');\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function propGetter() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // propGetter();\n  //   const delay = (ms) => new Promise(res => setTimeout(res, ms));\n  //delay(30).then(() => propGetter());\n\n\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-lg btn-block card-footer-btn\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Nominate Asset\"), __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Header, {\n    className: \"text-center justify-content-center\",\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Title, {\n    className: \"text-center justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Asset Price:\\xA0\", parcel.publication.price, \"\\xA0MANA\")), __jsx(Modal.Body, {\n    className: \"pt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(ProposalForm, {\n    assetPrice: parcel.publication.price,\n    props: props,\n    drizzle: drizzle,\n    drizzleState: drizzleState,\n    tokenId: tokenId,\n    userManaBalance: userManaBalance,\n    propAddress: propAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(NominationModal, \"0IZIldQ2wRnkX0/p+j9ruYY9oLg=\");\n\n_c = NominationModal;\n\nconst mapStateToProps = state => ({\n  //tokenIdState: state.appReducers.tokenId,\n  propAddress: state.appReducers.propAddress\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: result => dispatch({\n    type: \"TOKEN_ID_FETCH\",\n    tokenId: result\n  }),\n  //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\n  getCurrentProp: (drizzle, dataKey) => dispatch({\n    type: \"GET_PROP_ADDRESS\",\n    drizzle: drizzle,\n    dataKey: dataKey\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal); //export default NominationModal;      \n\nvar _c;\n\n$RefreshReg$(_c, \"NominationModal\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/NominationModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","ProposalForm","NominationModal","parcel","props","userManaBalance","getTokenId","getCurrentProp","propAddress","drizzleState","drizzle","show","setShow","handleShow","handleClose","tokenId","setTokenId","loading","setLoading","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","assetId","propGetter","state","store","getState","drizzleStatus","initialized","contracts","ProposalController","methods","cacheCall","dataKey","synced","proposalAddress","getPropTokenIdMap","address","value","dispatch","type","console","log","publication","price","mapStateToProps","appReducers","mapDispatchToProps"],"mappings":"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","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\nimport ProposalForm from '../forms/ProposalForm';\r\n   \r\n\r\nconst NominationModal = ({ parcel, props, userManaBalance, getTokenId,  getCurrentProp, propAddress  }) => {\r\n\r\n  const {drizzleState, drizzle} = props;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n  const [tokenId, setTokenId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  ///const[drizzle, setDrizzle] = useState(props.drizzle)\r\n  //const [currentProp, setCurrentProp] = useState(null);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n      if(tokenId === null){\r\n        setLoading(true)\r\n      }\r\n      setLoading(false);\r\n      return tokenId;\r\n    })\r\n    .then((tokenId) => {  \r\n      \r\n      setTokenId(tokenId);\r\n      getTokenId(tokenId);\r\n      const assetId = tokenId;\r\n      return assetId;\r\n      //getCurrentProp(result,drizzle,drizzleState);\r\n      //onSetDrizzleState(drizzle);\r\n    }) \r\n    .then((assetId) => {  \r\n     \r\n      // var state = drizzle.store.getState()\r\n      // if (state.drizzleStatus.initialized) {\r\n      // const dataKey = drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${assetId}`);\r\n      // getCurrentProp(drizzle, dataKey);\r\n      // }\r\n     //return dataKey\r\n    }) \r\n    // .then(async (dataKey) => {  \r\n    //   var state = drizzle.store.getState()\r\n    //   if (state.drizzleStatus.initialized) {\r\n    //   const displayData = await state.contracts.ProposalController.getPropTokenIdMap[dataKey];\r\n      \r\n    //   const proposalAddress = displayData.value;\r\n    //   return proposalAddress\r\n    //   }\r\n  \r\n    // }) \r\n    // .then(async (proposalAddress) => {  \r\n    //   //drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\r\n    //   const contractAddress = await proposalAddress;\r\n    //   return console.log(contractAddress)\r\n    // }) \r\n    \r\n  };\r\nfetchDetailsLink();\r\npropGetter();\r\n}, []);\r\n\r\nvar state = drizzle.store.getState()\r\n\r\nconst propGetter = async () => {\r\n  if (state.drizzleStatus.initialized) {\r\n      const dataKey = await drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"].cacheCall(`${tokenId}`)\r\n      const contracts = await state.contracts;\r\n      if (contracts.ProposalController.synced) {   \r\n      const proposalAddress = contracts.ProposalController.getPropTokenIdMap[dataKey];\r\n      let address = proposalAddress.value\r\n      drizzle.store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:address});\r\n      //return proposalAddress;\r\n      }\r\n    }\r\n    console.log('Loading...')\r\n\r\n  }\r\n  // propGetter();\r\n//   const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n  //delay(30).then(() => propGetter());\r\n   \r\nreturn (   \r\n      <> \r\n        <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>Nominate Asset</button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">Asset Price:&nbsp;{parcel.publication.price}&nbsp;MANA</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body className=\"pt-1\">\r\n          <ProposalForm                  \r\n                  assetPrice={parcel.publication.price}  \r\n                  props={props}\r\n                  drizzle={drizzle}\r\n                  drizzleState={drizzleState}\r\n                  tokenId={tokenId}\r\n                  userManaBalance={userManaBalance}\r\n                  propAddress={propAddress}\r\n            /> \r\n              {/* <NominationForm                   \r\n                drizzle={props.drizzle}\r\n                drizzleState={props.drizzleState}  \r\n                assetPrice={parcel.publication.price}  \r\n                props={props}\r\n                tokenId={tokenId}\r\n                userManaBalance={userManaBalance}\r\n                />  */}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n        );    \r\n      } \r\n        const mapStateToProps = (state) => ({\r\n          //tokenIdState: state.appReducers.tokenId,\r\n          propAddress: state.appReducers.propAddress,\r\n        })\r\n        \r\n        const mapDispatchToProps = (dispatch) => ({\r\n          getTokenId: (result) =>  dispatch({ type: \"TOKEN_ID_FETCH\", tokenId:result }),\r\n          //onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle }),\r\n          getCurrentProp: (drizzle,dataKey) =>  dispatch({ type: \"GET_PROP_ADDRESS\",drizzle:drizzle,dataKey:dataKey })\r\n        });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationModal);\r\n\r\n    //export default NominationModal;      "]},"metadata":{},"sourceType":"module"}