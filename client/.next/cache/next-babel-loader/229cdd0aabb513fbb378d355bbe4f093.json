{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport ContractManager from \"../artifacts/contracts/ContractManager.json\";\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\nimport UserController from \"../artifacts/contracts/UserController.json\";\nimport Web3 from 'web3';\nimport getWeb3 from \"@drizzle-utils/get-web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst crap = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var provider, web3;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return detectEthereumProvider();\n\n        case 2:\n          provider = _context.sent;\n\n          if (provider) {\n            web3 = new Web3(Web3.provider);\n          } else {\n            console.log('Please install MetaMask!');\n          }\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function crap() {\n    return _ref.apply(this, arguments);\n  };\n}(); //const customProvider = new Web3.providers.HttpProvider(crap());\n\n\nconsole.log(crap());\nconst host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\nconst customProvider = new Web3.providers.HttpProvider(host); //const web3 = getWeb3({ customProvider });\n//console.log(web3)\n\nconst drizzleOptions = {\n  web3: {\n    customProvider: customProvider\n  },\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\n  events: {\n    UserStorage: [\"UserCreated\"],\n    ProposalController: [\"AssetNomination\"]\n  },\n  polls: {\n    accounts: 1500\n  },\n  syncAlways: true\n};\nexport default drizzleOptions;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/drizzleOptions.js"],"names":["ContractManager","UserStorage","ProposalController","UserController","Web3","getWeb3","detectEthereumProvider","crap","provider","web3","console","log","host","customProvider","providers","HttpProvider","drizzleOptions","contracts","events","polls","accounts","syncAlways"],"mappings":";;;;AAAA,OAAOA,eAAP,MAA4B,6CAA5B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,IAAI;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEUD,sBAAsB,EAFhC;;AAAA;AAEPE,UAAAA,QAFO;;AAIb,cAAIA,QAAJ,EAAc;AACRC,YAAAA,IADQ,GACD,IAAIL,IAAJ,CAASA,IAAI,CAACI,QAAd,CADC;AAIb,WAJD,MAIO;AACLE,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJJ,IAAI;AAAA;AAAA;AAAA,GAAV,C,CAaA;;;AACAG,OAAO,CAACC,GAAR,CAAYJ,IAAI,EAAhB;AACA,MAAMK,IAAI,GAAG,+DAAb;AACA,MAAMC,cAAc,GAAG,IAAIT,IAAI,CAACU,SAAL,CAAeC,YAAnB,CAAgCH,IAAhC,CAAvB,C,CACA;AACA;;AACA,MAAMI,cAAc,GAAG;AACrBP,EAAAA,IAAI,EAAE;AACJI,IAAAA,cAAc,EAACA;AADX,GADe;AAKrBI,EAAAA,SAAS,EAAE,CAAChB,WAAD,EAAcD,eAAd,EAA+BE,kBAA/B,EAAmDC,cAAnD,CALU;AAOrBe,EAAAA,MAAM,EAAE;AACNjB,IAAAA,WAAW,EAAE,CAAC,aAAD,CADP;AAENC,IAAAA,kBAAkB,EAAE,CAAC,iBAAD;AAFd,GAPa;AAWrBiB,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAXc;AAerBC,EAAAA,UAAU,EAAC;AAfU,CAAvB;AAkBA,eAAeL,cAAf","sourcesContent":["import ContractManager from \"../artifacts/contracts/ContractManager.json\";\r\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\r\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\r\nimport UserController from \"../artifacts/contracts/UserController.json\";\r\nimport Web3 from 'web3';\r\nimport getWeb3 from \"@drizzle-utils/get-web3\";\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\nconst crap = async () => {\r\n// this returns the provider, or null if it wasn't detected\r\nconst provider = await detectEthereumProvider();\r\n\r\nif (provider) {\r\nconst web3 = new Web3(Web3.provider);\r\n\r\n  \r\n} else {\r\n  console.log('Please install MetaMask!');\r\n}\r\n\r\n}\r\n//const customProvider = new Web3.providers.HttpProvider(crap());\r\nconsole.log(crap());\r\nconst host = \"https://ropsten.infura.io/v3/5ee399b76fea4821a1fcc71a0ff87e60\";\r\nconst customProvider = new Web3.providers.HttpProvider(host);\r\n//const web3 = getWeb3({ customProvider });\r\n//console.log(web3)\r\nconst drizzleOptions = {\r\n  web3: {\r\n    customProvider:customProvider\r\n  },\r\n\r\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\r\n\r\n  events: {\r\n    UserStorage: [\"UserCreated\"],\r\n    ProposalController: [\"AssetNomination\"]\r\n  },\r\n  polls: {\r\n    accounts: 1500,\r\n  },\r\n\r\n  syncAlways:true,\r\n};\r\n\r\nexport default drizzleOptions;\r\n"]},"metadata":{},"sourceType":"module"}