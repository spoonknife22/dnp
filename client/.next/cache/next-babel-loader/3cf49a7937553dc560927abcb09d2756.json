{"ast":null,"code":"import { EventActions, drizzleSagas } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING';\nexport const contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = `${message}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n};\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const display = `${transactionHash}`;\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n};\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'REDIRECT_HOME'\n  });\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL_UPDATE_UI'\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield all(drizzleSagas.map(saga => fork(saga)));\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","TX_DONE","TX_PROCESSING","contractEventSaga","store","next","action","type","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT","joinTransactionSaga","transactionHash","txHash","BOTTOM_LEFT","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","appRootSaga","map","saga","appSagas"],"mappings":"AACA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAGA,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgBjB,YAAY,CAACkB,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGH,MAAM,CAACI,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,GAAI,GAAEJ,OAAQ,EAA3B;AAEAT,IAAAA,KAAK,CAACc,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEf,KAAK,CAACgB,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOZ,IAAI,CAACC,MAAD,CAAX;AACD,CARM;AAWP,OAAO,MAAMY,mBAAmB,GAAGd,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMY,eAAe,GAAGb,MAAM,CAACc,MAA/B;AACA,UAAMP,OAAO,GAAI,GAAEM,eAAgB,EAAnC;AAEAnB,IAAAA,KAAK,CAACc,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEf,KAAK,CAACgB,QAAN,CAAeK;AAA3B,KAAvB;AACD;;AACD,SAAOhB,IAAI,CAACC,MAAD,CAAX;AACD,CARM;;AAWP,UAAUgB,mBAAV,GAAgC;AAC9B,QAAM3B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUgB,cAAV,GAA2B;AACzB,QAAM5B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUiB,iBAAV,GAA8B;AAC5B,QAAM7B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMZ,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUkB,gBAAV,GAA6B;AAC3B,QAAM9B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAT;AACA;;AAGF,UAAUwB,YAAV,GAAyB;AACvB,QAAM/B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAUoB,WAAV,GAAwB;AACtB,QAAMjC,UAAU,CAAC,iBAAD,EAAoB4B,mBAApB,CAAhB;AACA,QAAM5B,UAAU,CAAC,UAAD,EAAa6B,cAAb,CAAhB;AACA,QAAM7B,UAAU,CAAC,gBAAD,EAAmB+B,gBAAnB,CAAhB;AACA,QAAM/B,UAAU,CAAC,eAAD,EAAkBgC,YAAlB,CAAhB;AACA,QAAMlC,GAAG,CACPD,YAAY,CAACqC,GAAb,CAAiBC,IAAI,IAAIpC,IAAI,CAACoC,IAAD,CAA7B,CADO,CAAT;AAGD;;AAED,OAAO,MAAMC,QAAQ,GAAG,CAACH,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions, drizzleSagas } from '@drizzle/store';\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\n\r\n\r\nexport const contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    const display = `${transactionHash}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'REDIRECT_HOME' });\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n \r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_SUCCESSFUL_UPDATE_UI'});\r\n}\r\n\r\n// Combine all your redux concerns\r\n   \r\n// app root saga\r\nfunction *appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield all(\r\n    drizzleSagas.map(saga => fork(saga))\r\n  );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}