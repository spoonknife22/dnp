{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify'; // const delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\n\nconst getDrizzle = state => state.appReducers.drizzle; // const getContracts = (state) => state.contracts;\n\n\nfunction fetchTokenId(action) {\n  return _regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCHED',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr() {\n  return _regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 2\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction appRootSaga() {\n  return _regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["fetchTokenId","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","toast","TOKEN_ID_FETCH","GET_PROP_ADDRESS","TEST_SAGA","getDrizzle","state","appReducers","drizzle","action","type","tokenId","propAddress"],"mappings":";;oDAaWA,Y;qDAIDC,a;qDAKCC,W;;AAtBX,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,OAAhD,C,CACA;;;AAIA,SAAWnB,YAAX,CAAyBoB,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMd,GAAG,CAAC;AAAEe,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA3C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUrB,aAAV;AAAA;AAAA;AAAA;AAAA;AAEE,eAAMK,GAAG,CAAC;AAAEe,UAAAA,IAAI,EAAE,kBAAR;AAA4BE,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAWrB,WAAX;AAAA;AAAA;AAAA;AAAA;AACE,eAAMS,SAAS,CAACG,gBAAD,EAAmBb,aAAnB,CAAf;;AADF;AAAA;AAEE,eAAMU,SAAS,CAACG,gBAAD,EAAmBb,aAAnB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeC,WAAf","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n// const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\n\r\nconst getDrizzle = (state) => state.appReducers.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n\r\n\r\n\r\nfunction * fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n}\r\n\r\nfunction* fetchPropAddr () {\r\n\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:2});\r\n}\r\n\r\nfunction * appRootSaga () {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr)\r\n}\r\n\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}