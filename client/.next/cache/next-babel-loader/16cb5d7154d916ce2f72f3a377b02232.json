{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport { appReducer as cap } from './transactionReducer'; //const ogrerun =  ... drizzleReducers;\n\nexport default combineReducers(_objectSpread({\n  cap\n}, drizzleReducers)); //export default appReducerCombine;\n// const reducer = combineReducers({\n//   routing: routerReducer,\n//   todos,\n//   user,\n//   ...drizzleReducers\n// })\n// export default reducer","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/reducers/index.js"],"names":["combineReducers","drizzleReducers","appReducer","cap"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAAQC,UAAU,IAAIC,GAAtB,QAAgC,sBAAhC,C,CAEA;;AAEA,eAAeH,eAAe;AAC5BG,EAAAA;AAD4B,GAE1BF,eAF0B,EAA9B,C,CAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport {appReducer as cap} from './transactionReducer';\r\n\r\n//const ogrerun =  ... drizzleReducers;\r\n\r\nexport default combineReducers({\r\n  cap,\r\n ...drizzleReducers \r\n})\r\n\r\n//export default appReducerCombine;\r\n\r\n// const reducer = combineReducers({\r\n//   routing: routerReducer,\r\n//   todos,\r\n//   user,\r\n//   ...drizzleReducers\r\n// })\r\n// export default reducer"]},"metadata":{},"sourceType":"module"}