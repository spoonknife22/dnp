{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\AbPreNomCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\nimport Web3 from \"web3\"; //import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\n\nconst AbPreNomCard = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1]; //get tokenId's for a project by read contract (25)projectTokenInfo\n  //get tokenId's for a project by read contract (24)projectShowAllTokens\n  //put tokenId' in array. Count\n  //decalare variable with each tokenId\n\n\n  let tokenId = '3000001';\n  let ordersArray = \"token_ids=3000001\"; //let ordersArray = [parseInt(3000001),parseInt(3000002)];\n  //console.log(ordersArray)\n\n  var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n      //targetUrl = `https://api.opensea.io/api/v1/assets?token_ids= [${ordersArray}]&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;\n  targetUrl = \"https://api.opensea.io/api/v1/assets?\";\n  let nftIds = '3000001'; // var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n  //targetUrl = \"https://api.opensea.io/api/v1/assets?\"\n\n  let querystring = \"asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270\"; //First tokenId=3000001\n  //Last tokenId= 99001023\n\n  useEffect(() => {\n    const fetchPosts = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              //i is equal to the total number of tokens for each project\n              //j is the tokenId\n              for (i = 0; i < 1; i++) {\n                //fetch(targetUrl,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\n                fetch(targetUrl + querystring + ordersArray, {\n                  header: 'x-api-key:2f2a0900458f4bdfbb489680a58e7526'\n                }).then(res => res.json()).then(result => {\n                  console.log(result); //ordersArray.push(...result.assets);\n                }, error => {\n                  return error;\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchPosts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchPosts();\n  }, []); // Get current posts\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, (ordersArray, nftIds)));\n};\n\n_s(AbPreNomCard, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = AbPreNomCard;\nexport default AbPreNomCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AbPreNomCard\");","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/AbPreNomCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Web3","AbPreNomCard","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","tokenId","ordersArray","proxyUrl","targetUrl","nftIds","querystring","fetchPosts","i","fetch","header","then","res","json","result","console","log","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AAIA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAgC;AAAA;;AAAA,oBAEvBR,QAAQ,CAAC,EAAD,CAFe;AAAA,QAE5CS,MAF4C;AAAA,QAEpCC,SAFoC;;AAAA,qBAGrBV,QAAQ,CAAC,KAAD,CAHa;AAAA,QAG5CW,OAH4C;AAAA,QAGnCC,UAHmC;;AAAA,qBAIbZ,QAAQ,CAAC,CAAD,CAJK;AAAA,QAI5Ca,WAJ4C;AAAA,QAI/BC,cAJ+B;;AAAA,qBAK1Bd,QAAQ,CAAC,CAAD,CALkB;AAAA,QAK5Ce,cAL4C;;AAAA,qBAMbf,QAAQ,EANK;AAAA,QAM5CgB,WAN4C;AAAA,QAM/BC,cAN+B,kBAQnD;AACA;AACA;AACA;;;AACA,MAAIC,OAAO,GAAG,SAAd;AACA,MAAIC,WAAW,GAAG,mBAAlB,CAbmD,CAcnD;AACA;;AACA,MAAIC,QAAQ,GAAG,sCAAf;AAAA,MACA;AACAC,EAAAA,SAAS,0CAFT;AAGA,MAAIC,MAAM,GAAE,SAAZ,CAnBmD,CAoBnD;AACA;;AACA,MAAIC,WAAW,GAAG,mEAAlB,CAtBmD,CAuBnD;AACA;;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAEnB;AACA;AAEA,mBAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AAExB;AACAC,gBAAAA,KAAK,CAACL,SAAS,GAAGE,WAAZ,GAA0BJ,WAA3B,EAAuC;AAACQ,kBAAAA,MAAM,EAAC;AAAR,iBAAvC,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,MAAD,IAAY;AAChBC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADgB,CAEhB;AACD,iBALD,EAMCG,KAAD,IAAW;AACX,yBAAOA,KAAP;AACC,iBARD;AAUC;;AAlBkB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVV,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAqBAA,IAAAA,UAAU;AACX,GAvBQ,EAuBN,EAvBM,CAAT,CA1BmD,CAmDnD;;AACA,QAAMW,iBAAiB,GAAGtB,WAAW,GAAGE,cAAxC;AACA,QAAMqB,kBAAkB,GAAGD,iBAAiB,GAAGpB,cAA/C;AACA,QAAMsB,cAAc,GAAG5B,MAAM,CAAC6B,KAAP,CAAaF,kBAAb,EAAiCD,iBAAjC,CAAvB;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAI1B,cAAc,CAAC0B,UAAD,CAA7C;;AAIA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAMrB,WAAW,EAACG,MAAlB,EADF,CADF;AAmBD,CA9ED;;GAAMhB,Y;;KAAAA,Y;AAgFN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\nimport Web3 from \"web3\";\r\n//import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\r\n\r\n\r\n\r\nconst AbPreNomCard = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  //get tokenId's for a project by read contract (25)projectTokenInfo\r\n  //get tokenId's for a project by read contract (24)projectShowAllTokens\r\n  //put tokenId' in array. Count\r\n  //decalare variable with each tokenId\r\n  let tokenId = '3000001';\r\n  let ordersArray = \"token_ids=3000001\";\r\n  //let ordersArray = [parseInt(3000001),parseInt(3000002)];\r\n  //console.log(ordersArray)\r\n  var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  //targetUrl = `https://api.opensea.io/api/v1/assets?token_ids= [${ordersArray}]&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;\r\n  targetUrl = `https://api.opensea.io/api/v1/assets?`\r\n  let nftIds ='3000001';\r\n  // var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  //targetUrl = \"https://api.opensea.io/api/v1/assets?\"\r\n  let querystring = \"asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270\"\r\n  //First tokenId=3000001\r\n  //Last tokenId= 99001023\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n   \r\n    //i is equal to the total number of tokens for each project\r\n    //j is the tokenId\r\n    let i;\r\n    for (i = 0; i < 1; i++) {\r\n      \r\n    //fetch(targetUrl,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n    fetch(targetUrl + querystring + ordersArray,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      console.log(result)\r\n      //ordersArray.push(...result.assets);\r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n    }\r\n      }\r\n\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>{ordersArray,nftIds}</div>\r\n\r\n      {/* <Nominations \r\n        posts={currentPosts} \r\n        loading={loading} \r\n      />\r\n      \r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      /> */}\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\nexport default AbPreNomCard;\r\n"]},"metadata":{},"sourceType":"module"}