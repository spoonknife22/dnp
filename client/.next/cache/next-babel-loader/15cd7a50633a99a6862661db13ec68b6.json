{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nimport { put, takeEvery } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\nexport const fetchPropAddr = store => next => action => {\n  if (action.type === GET_PROP_ADDRESS) {\n    let state = store.getState();\n\n    if (state.drizzleStatus.initialized) {\n      const drizzle = action.drizzle;\n      console.log(action.tokenId); //const token = action.result;\n\n      const tokenId = action.tokenId.toString();\n      const propAddress = Promise.drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"](tokenId).call();\n      store.dispatch({\n        type: 'GOT_PROP_ADDRESS',\n        propAddress: propAddress\n      });\n    }\n\n    return 'Loading...';\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","put","takeEvery","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","info","TOP_RIGHT","fetchPropAddr","state","getState","drizzleStatus","initialized","drizzle","console","log","tokenId","toString","propAddress","Promise","contracts","ProposalController","methods","call","dispatch"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAT,IAAAA,KAAK,CAACW,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBT,YAAY,CAACmB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,aAAMH,OAAN,CAAb;AACArB,MAAAA,KAAK,CAACyB,IAAN,CAAWD,OAAX,EAAoB;AAAEZ,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAea;AAA3B,OAApB;AACF;AACF;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;AAYP,OAAO,MAAMoB,aAAa,GAAGtB,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACtD,MAAIA,MAAM,CAACC,IAAP,KAAgBL,gBAApB,EAAsC;AACpC,QAAIyB,KAAK,GAAGvB,KAAK,CAACwB,QAAN,EAAZ;;AACA,QAAID,KAAK,CAACE,aAAN,CAAoBC,WAAxB,EAAqC;AACnC,YAAMC,OAAO,GAAGzB,MAAM,CAACyB,OAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY3B,MAAM,CAAC4B,OAAnB,EAFmC,CAGnC;;AAEA,YAAMA,OAAO,GAAG5B,MAAM,CAAC4B,OAAP,CAAeC,QAAf,EAAhB;AACA,YAAMC,WAAW,GAAGC,OAAO,CAACN,OAAR,CAAgBO,SAAhB,CAA0BC,kBAA1B,CAA6CC,OAA7C,CAAqD,mBAArD,EAA0EN,OAA1E,EAAmFO,IAAnF,EAApB;AACArC,MAAAA,KAAK,CAACsC,QAAN,CAAe;AAAEnC,QAAAA,IAAI,EAAE,kBAAR;AAA4B6B,QAAAA,WAAW,EAACA;AAAxC,OAAf;AACC;;AACD,WAAO,YAAP;AACD;;AACH,SAAO/B,IAAI,CAACC,MAAD,CAAX;AACD,CAfM","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\nimport { put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const fetchPropAddr = store => next => action => {\r\n  if (action.type === GET_PROP_ADDRESS) {\r\n    let state = store.getState();\r\n    if (state.drizzleStatus.initialized) {\r\n      const drizzle = action.drizzle;\r\n      console.log(action.tokenId)\r\n      //const token = action.result;\r\n     \r\n      const tokenId = action.tokenId.toString();\r\n      const propAddress = Promise.drizzle.contracts.ProposalController.methods[\"getPropTokenIdMap\"](tokenId).call();\r\n      store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:propAddress});\r\n      }\r\n      return 'Loading...'\r\n    }\r\n  return next(action)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}