{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\AccountsContainer.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport UserInfo from \"./UserInfo\";\nimport MyAddBar from \"./AddressBar.js\";\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { newContextComponents } from \"@drizzle/react-components\";\nimport { Drizzle } from \"@drizzle/store\";\nimport options from \"./drizzleOptions\";\nimport { Loader } from 'rimble-ui';\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\nconst {\n  ContractData\n} = newContextComponents;\nconst drizzle = new Drizzle(options);\nexport const AccountsContainer = async drizzle => {\n  //const AccountsContainer = () => {\n  return __jsx(DrizzleContext.Provider, {\n    drizzle: drizzle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(DrizzleContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, drizzleContext => {\n    const {\n      drizzle,\n      drizzleState,\n      initialized\n    } = drizzleContext;\n\n    if (!initialized) {\n      return __jsx(Loader, {\n        size: \"30px\",\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 20\n        }\n      });\n    } else {\n      const account = drizzleState.accounts[0];\n      let member; //member = async (account) => {\n      //const address =  \n\n      __jsx(ContractData, {\n        drizzle: drizzle,\n        drizzleState: drizzleState,\n        contract: \"UserStorage\",\n        method: \"addresses\",\n        methodArgs: [drizzleState.accounts[0]],\n        render: ({\n          address,\n          balance,\n          units\n        }) => __jsx(EthAddress, {\n          theme: customTheme,\n          backgroundColor: \"blue\",\n          address: address,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }\n        }) // render={displayData => {\n        //   const value = displayData;\n        //   <div>{value}</div>\n        //         }}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      });\n\n      const value = __jsx(ContractData, {\n        drizzle: drizzle,\n        drizzleState: drizzleState,\n        contract: \"UserStorage\",\n        method: \"addresses\",\n        methodArgs: [drizzleState.accounts[0]],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }\n      });\n\n      const isMember = drizzle.contracts.UserStorage.methods.addresses(account).call();\n      console.log({\n        isMember\n      });\n\n      if (!isMember) {\n        return __jsx(JoinButton, {\n          drizzleState: drizzleState,\n          drizzle: drizzle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 18\n          }\n        });\n      }\n\n      return __jsx(MyAddBar, {\n        drizzleState: drizzleState,\n        drizzle: drizzle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 18\n        }\n      });\n    }\n  }));\n};\nexport default AccountsContainer;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/AccountsContainer.js"],"names":["React","UserInfo","MyAddBar","DrizzleContext","newContextComponents","Drizzle","options","Loader","JoinButton","ContractData","drizzle","AccountsContainer","drizzleContext","drizzleState","initialized","account","accounts","member","address","balance","units","customTheme","value","isMember","contracts","UserStorage","methods","addresses","call","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport UserInfo from \"./UserInfo\"; \r\nimport MyAddBar from \"./AddressBar.js\"; \r\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nimport { Drizzle } from \"@drizzle/store\";\r\nimport options from \"./drizzleOptions\";\r\nimport {  Loader } from 'rimble-ui';\r\nimport JoinButton from \"../components/Buttons/JoinButton.js\";\r\n\r\nconst { ContractData } = newContextComponents;\r\nconst drizzle = new Drizzle(options);\r\n\r\nexport const AccountsContainer = async (drizzle) => {\r\n//const AccountsContainer = () => {\r\n \r\n  return  (\r\n    <DrizzleContext.Provider drizzle={drizzle}>\r\n      <DrizzleContext.Consumer>\r\n        {drizzleContext => {\r\n          const {drizzle, drizzleState, initialized } = drizzleContext;\r\n\r\n          if(!initialized) {\r\n            return <Loader size=\"30px\" color=\"white\" />\r\n          }\r\n          else  {\r\n          const account = drizzleState.accounts[0];\r\n          let member;\r\n          //member = async (account) => {\r\n          //const address =  \r\n          <ContractData\r\n            drizzle={drizzle}\r\n            drizzleState={drizzleState}\r\n            contract=\"UserStorage\"\r\n            method=\"addresses\"\r\n            methodArgs={[drizzleState.accounts[0]]}\r\n            render={({ address, balance, units }) => (\r\n\r\n              <EthAddress theme={customTheme} backgroundColor='blue' address={address}  />\r\n              \r\n              )}\r\n            // render={displayData => {\r\n            //   const value = displayData;\r\n              \r\n            //   <div>{value}</div>\r\n                        \r\n            //         }}\r\n          />\r\n\r\n          const value = <ContractData\r\n          drizzle={drizzle}\r\n          drizzleState={drizzleState}\r\n          contract=\"UserStorage\"\r\n          method=\"addresses\"\r\n        methodArgs={[drizzleState.accounts[0]]} \r\n       \r\n        />\r\n        const  isMember = drizzle.contracts.UserStorage.methods.addresses(account).call();\r\n\r\n          console.log( {isMember}  )\r\n         \r\n          if(!isMember){\r\n          \r\n          return <JoinButton drizzleState={drizzleState} drizzle={drizzle} />\r\n          }\r\n          return <MyAddBar drizzleState={drizzleState} drizzle={drizzle}  />\r\n          }\r\n        }}\r\n      </DrizzleContext.Consumer>\r\n    </DrizzleContext.Provider>\r\n);\r\n  \r\n}\r\nexport default AccountsContainer;"]},"metadata":{},"sourceType":"module"}