{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(transactionProcessing),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(txSuccessful),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(fetchStackId),\n    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport { put, takeEvery, takeLatest } from 'redux-saga/effects';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst GOT_STACK_ID = \"GOT_STACK_ID\";\n\nfunction transactionProcessing() {\n  return regeneratorRuntime.wrap(function transactionProcessing$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TX_PROCESSING'\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction txSuccessful() {\n  return regeneratorRuntime.wrap(function txSuccessful$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'TX_PROCESSING_DONE'\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction fetchPropAddr() {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 33\n        });\n\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nfunction fetchStackId() {\n  return regeneratorRuntime.wrap(function fetchStackId$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return put({\n          type: GOT_STACK_ID,\n          stackId: stackId\n        });\n\n      case 2:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n}\n\nfunction appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        _context5.next = 2;\n        return takeEvery(TX_BROADCASTED, transactionProcessing);\n\n      case 2:\n        _context5.next = 4;\n        return takeLatest(TX_SUCCESSFUL, txSuccessful);\n\n      case 4:\n        _context5.next = 6;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 6:\n        _context5.next = 8;\n        return takeEvery(GOT_STACK_ID, fetchStackId);\n\n      case 8:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _marked5);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["transactionProcessing","txSuccessful","fetchPropAddr","fetchStackId","appRootSaga","put","takeEvery","takeLatest","GET_PROP_ADDRESS","TX_BROADCASTED","TX_PROCESSING_DONE","TX_SUCCESSFUL","GOT_STACK_ID","type","propAddress","stackId"],"mappings":"mDAQUA,qB;oDAIAC,Y;oDAIAC,a;oDAIAC,Y;oDAKAC,W;;AAzBV,SAASC,GAAT,EAAcC,SAAd,EAAyBC,UAAzB,QAA2C,oBAA3C;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAE,cAApB;;AAEA,SAAUZ,qBAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMK,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMI,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUX,aAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMG,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAAC,kBAAP;AAA2BC,UAAAA,WAAW,EAAC;AAAvC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,GAAG,CAAC;AAAEQ,UAAAA,IAAI,EAACD,YAAP;AAAqBG,UAAAA,OAAO,EAACA;AAA7B,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUX,WAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAME,SAAS,CAACG,cAAD,EAAiBT,qBAAjB,CAAf;;AADF;AAAA;AAEE,eAAMO,UAAU,CAACI,aAAD,EAAgBV,YAAhB,CAAhB;;AAFF;AAAA;AAGE,eAAMK,SAAS,CAACE,gBAAD,EAAmBN,aAAnB,CAAf;;AAHF;AAAA;AAIE,eAAMI,SAAS,CAACM,YAAD,EAAeT,YAAf,CAAf;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeC,WAAf","sourcesContent":["import { put, takeEvery, takeLatest } from 'redux-saga/effects';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\nconst GOT_STACK_ID =\"GOT_STACK_ID\"\r\n\r\nfunction* transactionProcessing() {\r\n  yield put({ type: 'TX_PROCESSING'});\r\n}\r\n\r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_PROCESSING_DONE'});\r\n}\r\n\r\nfunction* fetchPropAddr () {\r\n  yield put({ type:'GOT_PROP_ADDRESS', propAddress:33});\r\n}\r\n\r\nfunction* fetchStackId () {\r\n  yield put({ type:GOT_STACK_ID, stackId:stackId});\r\n}\r\n\r\n\r\nfunction* appRootSaga () {\r\n  yield takeEvery(TX_BROADCASTED, transactionProcessing);\r\n  yield takeLatest(TX_SUCCESSFUL, txSuccessful);\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\r\n  yield takeEvery(GOT_STACK_ID, fetchStackId);\r\n}\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}