{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'react-redux';\nimport { drizzleReducers } from '@drizzle/store';\nimport dappReducer from './transactionReducer';\nexport default combineReducers(_objectSpread({\n  dappReducer\n}, drizzleReducers));","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/reducers/index.js"],"names":["combineReducers","drizzleReducers","dappReducer"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,eAAeF,eAAe;AAC5BE,EAAAA;AAD4B,GAEzBD,eAFyB,EAA9B","sourcesContent":["import { combineReducers } from 'react-redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\nimport dappReducer from './transactionReducer';\r\n\r\nexport default combineReducers({\r\n  dappReducer,\r\n  ...drizzleReducers\r\n});"]},"metadata":{},"sourceType":"module"}