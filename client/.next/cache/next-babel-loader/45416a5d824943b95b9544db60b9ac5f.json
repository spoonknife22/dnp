{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\ContributeInnerModal.js\",\n    _this = this;\n\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useEffect, useState } from 'react';\nimport Web3 from \"web3\";\nimport ContributeForm from '../forms/ContributeForm';\nimport { Loader } from 'rimble-ui';\n\nconst ContributeInnnerModal = ({\n  drizzleState,\n  drizzle,\n  propAddress,\n  tokenId,\n  assetPrice,\n  newAbi\n}) => {\n  let web3 = new Web3(Web3.givenProvider);\n\n  if (tokenId == null) {\n    __jsx(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }\n    }, __jsx(Loader, {\n      color: \"#007bff\",\n      size: \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  if (tokenId) {\n    useEffect(() => {\n      fetchProposalAddress();\n    }, [tokenId]);\n  }\n\n  const fetchProposalAddress = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(newAbi) {\n      var proposalAddress, contractConfig, propBalance, proposalBalance, address;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            console.log(_this.props);\n\n            if (propAddress === 'undefined') {\n              __jsx(\"div\", {\n                className: \"mx-auto\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 23,\n                  columnNumber: 9\n                }\n              }, __jsx(Loader, {\n                color: \"#007bff\",\n                size: \"40px\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 24,\n                  columnNumber: 11\n                }\n              }));\n            }\n\n            if (!(propAddress === null && newAbi !== null)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 5;\n            return drizzle.contracts.ProposalController.methods.getPropTokenIdMap(\"\".concat(tokenId)).call();\n\n          case 5:\n            proposalAddress = _context.sent;\n            contractConfig = {\n              contractName: \"ProposalStorage\",\n              web3Contract: new web3.eth.Contract(newAbi, \"\".concat(proposalAddress))\n            };\n\n            if (!drizzle.contracts['ProposalStorage']) {\n              drizzle.addContract(contractConfig);\n            }\n\n            if (!drizzle.contracts['ProposalStorage']) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 11;\n            return drizzle.contracts.ProposalStorage.methods.getSummary(\"\".concat(tokenId)).call();\n\n          case 11:\n            propBalance = _context.sent;\n            _context.next = 14;\n            return propBalance.balance;\n\n          case 14:\n            proposalBalance = _context.sent;\n            drizzle.store.dispatch({\n              type: 'PROPOSAL_BALANCE',\n              balance: \"\".concat(proposalBalance)\n            });\n\n          case 16:\n            address = Number(propAddress);\n\n            if (!(isNaN(address) && newAbi !== null)) {\n              _context.next = 30;\n              break;\n            }\n\n            console.log(propAddress);\n            proposalAddress = \"\".concat(propAddress);\n            contractConfig = {\n              contractName: \"ProposalStorage\",\n              web3Contract: new web3.eth.Contract(newAbi, proposalAddress)\n            };\n\n            if (!drizzle.contracts['ProposalStorage']) {\n              drizzle.addContract(contractConfig);\n            }\n\n            if (!drizzle.contracts['ProposalStorage']) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 25;\n            return drizzle.contracts.ProposalStorage.methods.getSummary(\"\".concat(tokenId)).call();\n\n          case 25:\n            propBalance = _context.sent;\n            _context.next = 28;\n            return propBalance.balance;\n\n          case 28:\n            proposalBalance = _context.sent;\n            drizzle.store.dispatch({\n              type: 'PROPOSAL_BALANCE',\n              balance: \"\".concat(proposalBalance)\n            });\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function fetchProposalAddress(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(ContributeForm, {\n    drizzle: drizzle,\n    drizzleState: drizzleState,\n    assetPrice: assetPrice,\n    propAddress: propAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default ContributeInnnerModal;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/ContributeInnerModal.js"],"names":["React","useEffect","useState","Web3","ContributeForm","Loader","ContributeInnnerModal","drizzleState","drizzle","propAddress","tokenId","assetPrice","newAbi","web3","givenProvider","fetchProposalAddress","console","log","props","contracts","ProposalController","methods","getPropTokenIdMap","call","proposalAddress","contractConfig","contractName","web3Contract","eth","Contract","addContract","ProposalStorage","getSummary","propBalance","balance","proposalBalance","store","dispatch","type","address","Number","isNaN"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Web3 from \"web3\";\r\nimport ContributeForm from '../forms/ContributeForm';\r\nimport { Loader } from 'rimble-ui';\r\n\r\nconst ContributeInnnerModal =  ({ drizzleState, drizzle, propAddress, tokenId, assetPrice, newAbi }) => {\r\n    let web3 = new Web3(Web3.givenProvider);\r\n\r\n  if(tokenId == null){\r\n    <div className=\"mx-auto\">   \r\n      <Loader color=\"#007bff\" size=\"40px\" />\r\n    </div>\r\n  }\r\n  if(tokenId) {\r\n    useEffect(() => {\r\n      fetchProposalAddress();\r\n    }, [tokenId]);\r\n  }\r\n\r\n  const fetchProposalAddress = async (newAbi) => {\r\n    console.log(this.props)\r\n    if(propAddress === 'undefined') {\r\n        <div className=\"mx-auto\">   \r\n          <Loader color=\"#007bff\" size=\"40px\" />\r\n        </div>\r\n    }  \r\n    if(propAddress === null && newAbi !== null) {\r\n    const proposalAddress = await drizzle.contracts.ProposalController.methods.getPropTokenIdMap(`${tokenId}`).call(); \r\n    const contractConfig = {\r\n      contractName: \"ProposalStorage\",\r\n      web3Contract: new web3.eth.Contract(newAbi, `${proposalAddress}`)\r\n    }\r\n    if (!drizzle.contracts['ProposalStorage']) {\r\n      drizzle.addContract(contractConfig);\r\n      } \r\n    if(drizzle.contracts['ProposalStorage']){\r\n      const propBalance = await drizzle.contracts.ProposalStorage.methods.getSummary(`${tokenId}`).call();\r\n      const proposalBalance = await propBalance.balance;\r\n      drizzle.store.dispatch({ type:'PROPOSAL_BALANCE', balance:`${proposalBalance}` });\r\n      }\r\n    }\r\n    const address = Number(propAddress)\r\n    if(isNaN(address) && newAbi !== null){\r\n      console.log(propAddress)\r\n      let proposalAddress = `${propAddress}`;\r\n      const contractConfig = {\r\n        contractName: \"ProposalStorage\",\r\n        web3Contract: new web3.eth.Contract(newAbi, proposalAddress)\r\n      };\r\n      if (!drizzle.contracts['ProposalStorage']) {\r\n        drizzle.addContract(contractConfig);\r\n      }\r\n      if(drizzle.contracts['ProposalStorage']){\r\n        const propBalance = await drizzle.contracts.ProposalStorage.methods.getSummary(`${tokenId}`).call();\r\n        const proposalBalance = await propBalance.balance;\r\n        drizzle.store.dispatch({ type:'PROPOSAL_BALANCE', balance:`${proposalBalance}` });\r\n      }\r\n    }\r\n}\r\n  return ( \r\n        <>\r\n          <ContributeForm drizzle={drizzle} drizzleState={drizzleState} assetPrice={assetPrice} propAddress={propAddress} />\r\n        </>\r\n      );    \r\n    } \r\n\r\nexport default ContributeInnnerModal;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}