{"ast":null,"code":"import { EventActions, drizzleSagas } from \"@drizzle/store\";\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_PROCESSING = 'TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = `${transactionHash}`;\n    toast.info(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = `${message}`;\n      toast(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n} // const getDrizzle = (state) => state.dappReducer.drizzle;\n// const getContracts = (state) => state.contracts;\n\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_PROCESSING_DONE\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful); // yield all(\n  //  drizzleSagas.map(saga => fork(saga))\n  // );\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","TX_PROCESSING","TX_PROCESSING_DONE","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","info","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","TOP_RIGHT","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,GAAI,GAAEF,eAAgB,EAA7C;AACAR,IAAAA,KAAK,CAACW,IAAN,CAAWD,iBAAX,EAA8B;AAAEE,MAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAA9B;AACD;;AACD,SAAOV,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMU,iBAAiB,GAAGC,eAAe,IAAIb,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBjB,YAAY,CAAC4B,WAAjC,EAA8C;AAC5C,QAAIZ,MAAM,CAACa,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGX,MAAM,CAACa,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGf,MAAM,CAACa,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,GAAI,GAAEH,OAAQ,EAA3B;AACArB,MAAAA,KAAK,CAACwB,OAAD,EAAU;AAAEZ,QAAAA,QAAQ,EAAEZ,KAAK,CAACa,QAAN,CAAeY;AAA3B,OAAV,CAAL;AACF;AACF;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;;AAaP,UAAUoB,mBAAV,GAAgC;AAC9B,QAAM/B,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUoB,cAAV,GAA2B;AACzB,QAAMhC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUqB,iBAAV,GAA8B;AAC5B,QAAMjC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUsB,gBAAV,GAA6B;AAC3B,QAAMlC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAT;AACA,C,CAEF;AACA;;;AAEA,UAAU6B,YAAV,GAAyB;AACvB,QAAMnC,GAAG,CAAC;AAAEY,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAU6B,WAAV,GAAwB;AACtB,QAAMrC,UAAU,CAAC,iBAAD,EAAoBgC,mBAApB,CAAhB;AACA,QAAMhC,UAAU,CAAC,UAAD,EAAaiC,cAAb,CAAhB;AACA,QAAMjC,UAAU,CAAC,gBAAD,EAAmBmC,gBAAnB,CAAhB;AACA,QAAMnC,UAAU,CAAC,eAAD,EAAkBoC,YAAlB,CAAhB,CAJsB,CAKtB;AACA;AACA;AACD;;AAED,OAAO,MAAME,QAAQ,GAAG,CAACD,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions, drizzleSagas } from \"@drizzle/store\";\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\n \r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast.info(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       toast(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n// const getDrizzle = (state) => state.dappReducer.drizzle;\r\n// const getContracts = (state) => state.contracts;\r\n \r\nfunction* txSuccessful() {\r\n  yield put({ type: TX_PROCESSING_DONE});\r\n}\r\n\r\n// Combine all your redux concerns\r\n\r\n// app root saga\r\nfunction* appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  // yield all(\r\n  //  drizzleSagas.map(saga => fork(saga))\r\n  // );\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}