{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === \"TX_BROADCASTED\") {\n    store.dispatch({\n      type: \"TX_PROCESSING\"\n    });\n  }\n\n  if (action.type === \"TX_SUCCESSFUL\") {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    store.dispatch({\n      type: \"TX_PROCESSING_DONE\"\n    });\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const depositCurrency = store => next => action => {\n  if (action.type === \"GOT_STACK_ID\") {\n    console.log(\"GOT_STACK_ID\");\n    toast('you', {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-stackId'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n\n      if (action.event.event === \"ContributionSuccess\") {\n        const poolDepth = action.event.returnValues.currentContractBalance;\n        store.dispatch({\n          type: \"PROPOSAL_BALANCE\",\n          balance: \"\".concat(poolDepth)\n        });\n      }\n\n      if (action.event.event === \"AssetNomination\") {\n        const propAddress = action.event.returnValues._proposalAddress;\n        const proposalAddress = \"\".concat(propAddress);\n        store.dispatch({\n          type: \"GOT_PROP_ADDRESS\",\n          proposalAddress: proposalAddress\n        });\n      }\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","dispatch","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","depositCurrency","console","log","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","poolDepth","currentContractBalance","balance","propAddress","_proposalAddress","proposalAddress","info","TOP_RIGHT"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,gBAApB,EAAsC;AACpCH,IAAAA,KAAK,CAACI,QAAN,CAAe;AAACD,MAAAA,IAAI,EAAC;AAAN,KAAf;AACD;;AACD,MAAID,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAME,eAAe,GAAGH,MAAM,CAACI,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAL,IAAAA,KAAK,CAACI,QAAN,CAAe;AAACD,MAAAA,IAAI,EAAC;AAAN,KAAf;AACAN,IAAAA,KAAK,CAACU,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEX,KAAK,CAACY,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOV,IAAI,CAACC,MAAD,CAAX;AACD,CAXM;AAeP,OAAO,MAAMU,eAAe,GAAGZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACxD,MAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AAClCU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAjB,IAAAA,KAAK,CAAC,KAAD,EAAQ;AAAEW,MAAAA,QAAQ,EAAEX,KAAK,CAACY,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAAR,CAAL;AACD;;AACD,SAAOV,IAAI,CAACC,MAAD,CAAX;AACD,CANM;AASP,OAAO,MAAMa,iBAAiB,GAAGC,eAAe,IAAIhB,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBP,YAAY,CAACqB,WAAjC,EAA8C;AAC5C,QAAIf,MAAM,CAACgB,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGd,MAAM,CAACgB,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGlB,MAAM,CAACgB,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,OAAO,aAAMH,OAAN,CAAb;;AACA,UAAGlB,MAAM,CAACgB,KAAP,CAAaA,KAAb,KAAuB,qBAA1B,EAAgD;AAC/C,cAAMM,SAAS,GAAGtB,MAAM,CAACgB,KAAP,CAAaG,YAAb,CAA0BI,sBAA5C;AACAzB,QAAAA,KAAK,CAACI,QAAN,CAAe;AAACD,UAAAA,IAAI,EAAC,kBAAN;AAA0BuB,UAAAA,OAAO,YAAIF,SAAJ;AAAjC,SAAf;AACA;;AACD,UAAGtB,MAAM,CAACgB,KAAP,CAAaA,KAAb,KAAuB,iBAA1B,EAA4C;AAC3C,cAAMS,WAAW,GAAGzB,MAAM,CAACgB,KAAP,CAAaG,YAAb,CAA0BO,gBAA9C;AACA,cAAMC,eAAe,aAAMF,WAAN,CAArB;AACA3B,QAAAA,KAAK,CAACI,QAAN,CAAe;AAACD,UAAAA,IAAI,EAAC,kBAAN;AAA0B0B,UAAAA,eAAe,EAACA;AAA1C,SAAf;AACC;;AACFhC,MAAAA,KAAK,CAACiC,IAAN,CAAWP,OAAX,EAAoB;AAAEf,QAAAA,QAAQ,EAAEX,KAAK,CAACY,QAAN,CAAesB;AAA3B,OAApB;AACF;AACF;;AACD,SAAO9B,IAAI,CAACC,MAAD,CAAX;AACD,CAnBM","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === \"TX_BROADCASTED\") {\r\n    store.dispatch({type:\"TX_PROCESSING\"})\r\n  }\r\n  if (action.type === \"TX_SUCCESSFUL\") { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    store.dispatch({type:\"TX_PROCESSING_DONE\"})\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\nexport const depositCurrency = store => next => action => {\r\n  if (action.type === \"GOT_STACK_ID\") {\r\n    console.log(\"GOT_STACK_ID\")\r\n    toast('you', { position: toast.POSITION.BOTTOM_LEFT,className:'successful-stackId' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       if(action.event.event === \"ContributionSuccess\"){\r\n        const poolDepth = action.event.returnValues.currentContractBalance\r\n        store.dispatch({type:\"PROPOSAL_BALANCE\", balance:`${poolDepth}`})\r\n       }\r\n       if(action.event.event === \"AssetNomination\"){\r\n        const propAddress = action.event.returnValues._proposalAddress\r\n        const proposalAddress = `${propAddress}`\r\n        store.dispatch({type:\"GOT_PROP_ADDRESS\", proposalAddress:proposalAddress})\r\n        }\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}