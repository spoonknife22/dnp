{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\cards\\\\NominateAssetCards.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../../components/Pagination';\nimport Nominations from '../../components/Nominations';\n\nconst NominationAssetCards = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setParcels = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalParcels = _useState5[0],\n        setTotalParcels = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(first:4,where: {status:open, category:parcel}) {\\n          nft{\\n              name\\n              tokenId\\n              parcel{          \\n                      x\\n                      y\\n                  }\\n              activeOrder{\\n                  Order:\\n                  nftAddress\\n                  price\\n                  expiresAt\\n                  txHash\\n              }\\n          }\\n        }\\n      }\"\n    });\n\n    const fetchParcels = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var proxyUrl, targetUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then(result => {\n                setParcels(result.data.orders);\n                setTotalParcels(4);\n                setLoading(false);\n              }, error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchParcels() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchParcels();\n  }, []); // Get current orders\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(Nominations, {\n    orders: currentParcels,\n    loading: loading,\n    props: props,\n    userManaBalance: userManaBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), __jsx(Pagination, {\n    currentPage: currentPage,\n    parcelsPerPage: parcelsPerPage,\n    totalParcels: totalParcels,\n    paginate: paginate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(NominationAssetCards, \"U7Q9wEvSKy90/6jZCPDL3NIz5Zs=\");\n\n_c = NominationAssetCards;\nexport default NominationAssetCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationAssetCards\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/cards/NominateAssetCards.js"],"names":["React","useState","useEffect","Pagination","Nominations","NominationAssetCards","props","userManaBalance","orders","setParcels","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalParcels","setTotalParcels","myHeaders","Headers","append","graphql","JSON","stringify","query","fetchParcels","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../../components/Pagination';\r\nimport Nominations from '../../components/Nominations'\r\n\r\nconst NominationAssetCards = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setParcels] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalParcels, setTotalParcels] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(\r\n    () => {\r\n    const graphql= JSON.stringify({ query: \r\n      `{\r\n        orders(first:4,where: {status:open, category:parcel}) {\r\n          nft{\r\n              name\r\n              tokenId\r\n              parcel{          \r\n                      x\r\n                      y\r\n                  }\r\n              activeOrder{\r\n                  Order:\r\n                  nftAddress\r\n                  price\r\n                  expiresAt\r\n                  txHash\r\n              }\r\n          }\r\n        }\r\n      }`\r\n    })\r\n  \r\n    const fetchParcels = async () => {\r\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then((result) => {\r\n          setParcels(result.data.orders);\r\n    \r\n          setTotalParcels(4)\r\n          setLoading(false); \r\n        },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchParcels();  \r\n  }, []);\r\n\r\n\r\n  // Get current orders\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n\r\n  // Change page\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  return (   \r\n    <>\r\n      <Nominations \r\n        orders={currentParcels} \r\n        loading={loading} \r\n        props={props} \r\n        userManaBalance={userManaBalance}\r\n      />\r\n      <Pagination\r\n        currentPage ={currentPage }\r\n        parcelsPerPage={parcelsPerPage}\r\n        totalParcels={totalParcels}\r\n        paginate={paginate}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NominationAssetCards;"]},"metadata":{},"sourceType":"module"}