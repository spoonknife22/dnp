{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\modals\\\\ForSaleModal.js\";\n\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport NominationForm from '../forms/NominationForm';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport ProposalForm from '../forms/ProposalForm';\nimport { Loader } from 'rimble-ui';\n\nconst ForSaleModal = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee({\n    parcel,\n    props,\n    userManaBalance,\n    propAddress,\n    proposalStorage\n  }) {\n    var drizzle, drizzleState, tokenId, _useState, deposits, setDespositInfo, state, proposalContract, depositInfoLength, i, depositInfo, _useState2, show, setShow, handleShow, handleClose;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          drizzle = props.drizzle, drizzleState = props.drizzleState;\n          tokenId = parcel.parcel.tokenId;\n          _useState = useState(null), deposits = _useState[0], setDespositInfo = _useState[1];\n          console.log(deposits); // useEffect(() => {\n          //   fetchProposalInfo();\n          // }, [])\n          // const fetchProposalInfo = async () => { \n          //   let state = drizzle.store.getState()\n          //   if(state.drizzleStatus.initialized){\n          //   const proposalContract = await drizzle.contracts[`${propAddress}`];\n          //   const depositInfoLength = await proposalContract.methods.countDepositers().call();\n          //   var i;\n          //   for (i = 0; i < depositInfoLength; i++) {\n          //     const depositInfo = await proposalContract.methods.depositers([i]).call();\n          //     return console.log(depositInfo);\n          //     setDespositInfo(depositInfo);\n          //   }\n          //   }\n          //  return 'Loading....'\n          // }\n\n          state = drizzle.store.getState();\n\n          if (!state.drizzleStatus.initialized) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 8;\n          return drizzle.contracts[\"\".concat(propAddress)];\n\n        case 8:\n          proposalContract = _context.sent;\n          _context.next = 11;\n          return proposalContract.methods.countDepositers().call();\n\n        case 11:\n          depositInfoLength = _context.sent;\n          i = 0;\n\n        case 13:\n          if (!(i < depositInfoLength)) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 16;\n          return proposalContract.methods.depositers([i]).call();\n\n        case 16:\n          depositInfo = _context.sent;\n          return _context.abrupt(\"return\", console.log(depositInfo));\n\n        case 19:\n          i++;\n          _context.next = 13;\n          break;\n\n        case 22:\n          return _context.abrupt(\"return\", 'Loading....');\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function ForSaleModal(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst mapStateToProps = state => ({\n  propAddress: state.appReducers.propAddress,\n  proposalStorage: state.appReducers.proposalStorage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: tokenId => dispatch({\n    type: \"SET_TOKEN_ID\",\n    tokenId: tokenId\n  }) //getNftAddress: (nftAddress) =>  dispatch({ type: \"SET_NftAddress\", NftAddress:nftAddress }),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForSaleModal);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/modals/ForSaleModal.js"],"names":["React","useState","useEffect","Modal","NominationForm","connect","Web3","ProposalForm","Loader","ForSaleModal","parcel","props","userManaBalance","propAddress","proposalStorage","drizzle","drizzleState","tokenId","deposits","setDespositInfo","console","log","state","store","getState","drizzleStatus","initialized","contracts","proposalContract","methods","countDepositers","call","depositInfoLength","i","depositers","depositInfo","mapStateToProps","appReducers","mapDispatchToProps","dispatch","getTokenId","type"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,YAAY;AAAA,qEAAG,iBAAO;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA,WAAlC;AAA+CC,IAAAA;AAA/C,GAAP;AAAA;;AAAA;AAAA;AAAA;AAEZC,UAAAA,OAFY,GAEaJ,KAFb,CAEZI,OAFY,EAEHC,YAFG,GAEaL,KAFb,CAEHK,YAFG;AAGbC,UAAAA,OAHa,GAGHP,MAAM,CAACA,MAAP,CAAcO,OAHX;AAAA,sBAIiBhB,QAAQ,CAAC,IAAD,CAJzB,EAIZiB,QAJY,iBAIFC,eAJE;AAKnBC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EALmB,CAMnB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEII,UAAAA,KA1Be,GA0BPP,OAAO,CAACQ,KAAR,CAAcC,QAAd,EA1BO;;AAAA,eA2BhBF,KAAK,CAACG,aAAN,CAAoBC,WA3BJ;AAAA;AAAA;AAAA;;AAAA;AAAA,iBA4BYX,OAAO,CAACY,SAAR,WAAqBd,WAArB,EA5BZ;;AAAA;AA4Bbe,UAAAA,gBA5Ba;AAAA;AAAA,iBA6BaA,gBAAgB,CAACC,OAAjB,CAAyBC,eAAzB,GAA2CC,IAA3C,EA7Bb;;AAAA;AA6BbC,UAAAA,iBA7Ba;AA+BdC,UAAAA,CAAC,GAAG,CA/BU;;AAAA;AAAA,gBA+BPA,CAAC,GAAGD,iBA/BG;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAgCSJ,gBAAgB,CAACC,OAAjB,CAAyBK,UAAzB,CAAoC,CAACD,CAAD,CAApC,EAAyCF,IAAzC,EAhCT;;AAAA;AAgCXI,UAAAA,WAhCW;AAAA,2CAiCVf,OAAO,CAACC,GAAR,CAAYc,WAAZ,CAjCU;;AAAA;AA+BgBF,UAAAA,CAAC,EA/BjB;AAAA;AAAA;;AAAA;AAAA,2CAqCb,aArCa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZxB,YAAY;AAAA;AAAA;AAAA,GAAlB;;AA6GM,MAAM2B,eAAe,GAAId,KAAD,KAAY;AAClCT,EAAAA,WAAW,EAAES,KAAK,CAACe,WAAN,CAAkBxB,WADG;AAElCC,EAAAA,eAAe,EAAEQ,KAAK,CAACe,WAAN,CAAkBvB;AAFD,CAAZ,CAAxB;;AAKA,MAAMwB,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,UAAU,EAAGvB,OAAD,IAAcsB,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,cAAR;AAAwBxB,IAAAA,OAAO,EAACA;AAAhC,GAAD,CADM,CAExC;;AAFwC,CAAf,CAA3B;;AAMN,eAAeZ,OAAO,CAAC+B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C7B,YAA7C,CAAf","sourcesContent":["  \r\nimport React, { useState, useEffect } from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NominationForm from '../forms/NominationForm';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from 'web3';\r\nimport ProposalForm from '../forms/ProposalForm';\r\nimport { Loader } from 'rimble-ui';\r\n\r\nconst ForSaleModal = async ({ parcel, props, userManaBalance, propAddress, proposalStorage }) => {\r\n  \r\n  const {drizzle, drizzleState} = props;\r\n  const tokenId = parcel.parcel.tokenId;\r\n  const [deposits, setDespositInfo] = useState(null);\r\n  console.log(deposits)\r\n  // useEffect(() => {\r\n  //   fetchProposalInfo();\r\n  // }, [])\r\n\r\n  // const fetchProposalInfo = async () => { \r\n  //   let state = drizzle.store.getState()\r\n  //   if(state.drizzleStatus.initialized){\r\n  //   const proposalContract = await drizzle.contracts[`${propAddress}`];\r\n  //   const depositInfoLength = await proposalContract.methods.countDepositers().call();\r\n  //   var i;\r\n  //   for (i = 0; i < depositInfoLength; i++) {\r\n  //     const depositInfo = await proposalContract.methods.depositers([i]).call();\r\n  //     return console.log(depositInfo);\r\n  //     setDespositInfo(depositInfo);\r\n  //   }\r\n  //   }\r\n  //  return 'Loading....'\r\n\r\n  // }\r\n\r\n  let state = drizzle.store.getState()\r\n  if(state.drizzleStatus.initialized){\r\n  const proposalContract = await drizzle.contracts[`${propAddress}`];\r\n  const depositInfoLength = await proposalContract.methods.countDepositers().call();\r\n  var i;\r\n  for (i = 0; i < depositInfoLength; i++) {\r\n    const depositInfo = await proposalContract.methods.depositers([i]).call();\r\n    return console.log(depositInfo);\r\n    setDespositInfo(depositInfo);\r\n  }\r\n  }\r\n return 'Loading....'\r\n\r\n\r\n  //const proposalContract = await drizzle.contracts[`${propAddress}`];\r\n\r\n  // const contractData = await proposalContract.methods.proposals(`${tokenId}`).call();\r\n  // const { listPrice, balance, expiresAt } = contractData;\r\n  // const depositAmount = await proposalContract.methods.depositedAmount(drizzleState.accounts[0]).call();\r\n  // const proposalContract = drizzle.contracts[`${propAddress}`];\r\n\r\n\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleClose = () => setShow(false);\r\n\r\nreturn (   \r\n      <>   \r\n        <button type=\"button\" className=\"btn btn-lg btn-block card-footer-btn\" onClick={handleShow}>\r\n          NPP NFT\r\n        </button>\r\n        <Modal className=\"nomintation-modal\" show={show} onHide={handleClose}>\r\n          <Modal.Header className=\"text-center justify-content-center\" closeButton>\r\n            <Modal.Title className=\"text-center justify-content-center\">\r\n            <div className=\"current-price-title\">Current Price:&nbsp;{Web3.utils.fromWei(`${parcel.activeOrder.price}`,'ether')}&nbsp;MANA</div>\r\n            <p className=\"mana-balance mb-1\" >Your MANA Balance:&nbsp;<span className=\"amount-number\">{userManaBalance}</span></p>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n          <Modal.Body className=\"pt-1 align-items-center\">\r\n          {tokenId !== null  ?   \r\n//  {[assetData.asset].map((sub)=> \r\n\r\ndeposits\r\n          // deposits.map((depositer) => {\r\n          //   <div>{depositer.amount}</div>\r\n          // })\r\n            // <ProposalForm                  \r\n            //   assetPrice={parcel.activeOrder.price}\r\n            //   expiresAt={parcel.activeOrder.expiresAt}  \r\n            //   nftAddress={parcel.activeOrder.nftAddress}  \r\n            //   props={props}\r\n            //   drizzle={drizzle}\r\n            //   drizzleState={drizzleState}\r\n            //   tokenId={tokenId}\r\n            //   userManaBalance={userManaBalance}\r\n            // /> \r\n          :\r\n            <div className=\"align-items-center\">   \r\n              <Loader className=\"mx-auto\" color=\"#007bff\" size=\"40px\" />\r\n            </div>\r\n          } \r\n          </Modal.Body>\r\n        </Modal>\r\n        <style jsx>\r\n          {` \r\n              .current-price-title{font-size:1.3rem;}\r\n              .nomintation-modal{font-family: Poppins;}\r\n              .card-footer-btn{background:#17c671;color:#ffffff;}\r\n              .btn-lg{border-radius: 0rem;\r\n                border-top-left-radius: 0rem;\r\n                border-top-right-radius: 0rem;\r\n                border-bottom-right-radius: .5rem;\r\n                border-bottom-left-radius: .5rem;}\r\n              .card-footer-btn:hover{background:#e6e6e6;color:#000000;}\r\n              .mana-balance{font-size:.9rem;color:#000;font-weight: 200;text-align:left}\r\n              .amount-number{font-family:Poppins;color:#66a3ff;}\r\n          `}                \r\n        </style>\r\n      </>\r\n        );    \r\n      } \r\n\r\n      const mapStateToProps = (state) => ({\r\n        propAddress: state.appReducers.propAddress,\r\n        proposalStorage: state.appReducers.proposalStorage\r\n      })\r\n           \r\n      const mapDispatchToProps = (dispatch) => ({\r\n        getTokenId: (tokenId) =>  dispatch({ type: \"SET_TOKEN_ID\", tokenId:tokenId }),\r\n        //getNftAddress: (nftAddress) =>  dispatch({ type: \"SET_NftAddress\", NftAddress:nftAddress }),\r\n      });\r\n        \r\n        \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForSaleModal);\r\n     "]},"metadata":{},"sourceType":"module"}