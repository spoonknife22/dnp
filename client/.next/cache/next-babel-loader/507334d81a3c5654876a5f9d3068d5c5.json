{"ast":null,"code":"import ContractManager from \"../artifacts/contracts/ContractManager.json\";\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\nimport UserController from \"../artifacts/contracts/UserController.json\";\nimport Web3 from 'web3';\nimport getWeb3 from \"@drizzle-utils/get-web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nconst provider = await detectEthereumProvider();\n\nif (provider) {\n  console.log('Ethereum successfully detected!'); // From now on, this should always be true:\n  // provider === window.ethereum\n  // Access the decentralized web!\n  // Legacy providers may only have ethereum.sendAsync\n\n  const chainId = await provider.request({\n    method: 'eth_chainId'\n  });\n} else {\n  // if the provider is not detected, detectEthereumProvider resolves to null\n  console.error('Please install MetaMask!', error);\n} // const web3 = getWeb3();\n// const provider = new Web3.providers.HttpProvider(\n// \t'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03'\n// \t);\n\n\nconst drizzleOptions = {\n  web3: {\n    provider,\n    block: false // fallback: {\n    //   type: 'wss',\n    //   //url: 'ws://127.0.0.1:7545',\n    //    url: 'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03',\n    //},\n\n  },\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\n  events: {\n    UserStorage: [\"UserCreated\"],\n    ProposalController: [\"AssetNomination\"]\n  },\n  polls: {\n    accounts: 1500\n  },\n  syncAlways: true\n};\nexport default drizzleOptions;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/drizzleOptions.js"],"names":["ContractManager","UserStorage","ProposalController","UserController","Web3","getWeb3","detectEthereumProvider","provider","console","log","chainId","request","method","error","drizzleOptions","web3","block","contracts","events","polls","accounts","syncAlways"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,6CAA5B;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,kBAAP,MAA+B,gDAA/B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,MAAMC,QAAQ,GAAG,MAAMD,sBAAsB,EAA7C;;AAEA,IAAIC,QAAJ,EAAc;AAEZC,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAFY,CAIZ;AACA;AAEA;AAEA;;AACA,QAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AACrCC,IAAAA,MAAM,EAAE;AAD6B,GAAjB,CAAtB;AAGD,CAbD,MAaO;AAEL;AACAJ,EAAAA,OAAO,CAACK,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD,C,CACD;AACA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE;AACJR,IAAAA,QADI;AAEJS,IAAAA,KAAK,EAAE,KAFH,CAGJ;AACA;AACA;AACA;AACA;;AAPI,GADe;AAUrBC,EAAAA,SAAS,EAAE,CAAChB,WAAD,EAAcD,eAAd,EAA+BE,kBAA/B,EAAmDC,cAAnD,CAVU;AAYrBe,EAAAA,MAAM,EAAE;AACNjB,IAAAA,WAAW,EAAE,CAAC,aAAD,CADP;AAENC,IAAAA,kBAAkB,EAAE,CAAC,iBAAD;AAFd,GAZa;AAgBrBiB,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAhBc;AAoBrBC,EAAAA,UAAU,EAAC;AApBU,CAAvB;AAuBA,eAAeP,cAAf","sourcesContent":["import ContractManager from \"../artifacts/contracts/ContractManager.json\";\r\nimport UserStorage from \"../artifacts/contracts/UserStorage.json\";\r\nimport ProposalController from \"../artifacts/contracts/ProposalController.json\";\r\nimport UserController from \"../artifacts/contracts/UserController.json\";\r\nimport Web3 from 'web3';\r\nimport getWeb3 from \"@drizzle-utils/get-web3\";\r\n\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\n \r\nconst provider = await detectEthereumProvider()\r\n \r\nif (provider) {\r\n \r\n  console.log('Ethereum successfully detected!')\r\n \r\n  // From now on, this should always be true:\r\n  // provider === window.ethereum\r\n \r\n  // Access the decentralized web!\r\n \r\n  // Legacy providers may only have ethereum.sendAsync\r\n  const chainId = await provider.request({\r\n    method: 'eth_chainId'\r\n  })\r\n} else {\r\n \r\n  // if the provider is not detected, detectEthereumProvider resolves to null\r\n  console.error('Please install MetaMask!', error)\r\n}\r\n// const web3 = getWeb3();\r\n// const provider = new Web3.providers.HttpProvider(\r\n// \t'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03'\r\n// \t);\r\n\r\nconst drizzleOptions = {\r\n  web3: {\r\n    provider,\r\n    block: false,\r\n    // fallback: {\r\n    //   type: 'wss',\r\n    //   //url: 'ws://127.0.0.1:7545',\r\n    //    url: 'https://rinkeby.infura.io/v3/46d0a980b69b4b08bde308d7ad58cb03',\r\n    //},\r\n  },\r\n  contracts: [UserStorage, ContractManager, ProposalController, UserController],\r\n\r\n  events: {\r\n    UserStorage: [\"UserCreated\"],\r\n    ProposalController: [\"AssetNomination\"]\r\n  },\r\n  polls: {\r\n    accounts: 1500,\r\n  },\r\n\r\n  syncAlways:true,\r\n};\r\n\r\nexport default drizzleOptions;\r\n"]},"metadata":{},"sourceType":"module"}