{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\NominationDetailsLink.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { Button } from \"shards-react\";\nimport { Loader } from 'rimble-ui';\n\nconst NominationDetailsLink = ({\n  parcel,\n  getTokenId,\n  txSuccessful\n}) => {\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  useEffect(() => {\n    const fetchDetailsLink = async () => {\n      const graphql = JSON.stringify({\n        query: `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\n      });\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n            targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n      fetch(proxyUrl + targetUrl, {\n        method: \"POST\",\n        headers: myHeaders,\n        body: graphql,\n        variables: {},\n        redirect: 'follow'\n      }).then(res => res.json()).then(result => {\n        const parcelData = result.data.parcels[0];\n        return parcelData;\n      }).then(result => {\n        const {\n          tokenId\n        } = result;\n\n        if (tokenId === null) {\n          setLoading(true);\n        }\n\n        setLoading(false);\n        return tokenId;\n      }).then(result => {\n        setTokenId(result);\n        getTokenId(result);\n      });\n    };\n\n    fetchDetailsLink();\n  }, []);\n  return __jsx(Accordion, {\n    defaultActiveKey: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(Accordion.Toggle, {\n    as: Button,\n    variant: \"link\",\n    eventKey: \"0\",\n    outline: true,\n    theme: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Asset Details\")), __jsx(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"p-3 mt-3 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, loading ? __jsx(Loader, {\n    size: \"30px\",\n    color: \"#007bff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  }) : __jsx(Loader, {\n    size: \"25px\",\n    color: \"#007bff\",\n    className: \"mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }) // <a href={`https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/` + tokenId}  target=\"_blank\">Decentraland</a>\n  )))));\n};\n\nconst mapStateToProps = state => ({\n  tokenIdState: state.tokenId,\n  txSuccessful: state.txSuccessful\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTokenId: result => dispatch({\n    type: \"TOKEN_ID_FETCH\",\n    tokenId: result\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/NominationDetailsLink.js"],"names":["React","useState","useEffect","connect","Accordion","Button","Loader","NominationDetailsLink","parcel","getTokenId","txSuccessful","tokenId","setTokenId","loading","setLoading","myHeaders","Headers","append","fetchDetailsLink","graphql","JSON","stringify","query","x","y","proxyUrl","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","parcelData","data","parcels","mapStateToProps","state","tokenIdState","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { Button } from \"shards-react\";\r\nimport {  Loader } from 'rimble-ui';\r\n\r\nconst NominationDetailsLink = ({ parcel, getTokenId, txSuccessful }) => { \r\n  \r\n\r\n  const [tokenId, setTokenId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  useEffect(() => {\r\n \r\n  const fetchDetailsLink = async () => {\r\n\r\n  const graphql= JSON.stringify({ query: \r\n  `{ parcels(where: {x:\"${parcel.x}\",y:\"${parcel.y}\"}) { tokenId }}`\r\n})\r\n\r\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n\r\n  fetch(proxyUrl + targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then((result) => {\r\n      const parcelData = result.data.parcels[0];\r\n      return parcelData;\r\n    })\r\n    .then((result) => { \r\n      const { tokenId } = result;\r\n      if(tokenId === null){\r\n        setLoading(true)\r\n      }\r\n      setLoading(false);\r\n      return tokenId;\r\n    })\r\n    .then((result) => {\r\n      setTokenId(result);\r\n      getTokenId(result);\r\n    }) \r\n  };\r\nfetchDetailsLink();\r\n}, []);\r\n\r\nreturn (\r\n    <Accordion defaultActiveKey=\"1\">\r\n      <div>\r\n        <Accordion.Toggle as={Button}  variant=\"link\" eventKey=\"0\" outline theme=\"light\">\r\n        <div>Asset Details</div>\r\n        </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <div className=\"p-3 mt-3 border rounded\">\r\n              <div>\r\n                {loading ?\r\n                  <Loader size=\"30px\" color=\"#007bff\" /> :\r\n                  <Loader size=\"25px\" color=\"#007bff\" className=\"mx-auto\"/>\r\n                  // <a href={`https://market.decentraland.org/contracts/0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d/tokens/` + tokenId}  target=\"_blank\">Decentraland</a>\r\n                } \r\n                </div>\r\n            </div>\r\n          </Accordion.Collapse>\r\n      </div> \r\n    </Accordion>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tokenIdState: state.tokenId,\r\n  txSuccessful: state.txSuccessful,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getTokenId: (result) =>  dispatch({ type: \"TOKEN_ID_FETCH\", tokenId:result })\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationDetailsLink);\r\n\r\n"]},"metadata":{},"sourceType":"module"}