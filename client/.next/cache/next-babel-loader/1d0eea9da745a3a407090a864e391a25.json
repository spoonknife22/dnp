{"ast":null,"code":"import { EventActions, drizzleSagas } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'REDIRECT_HOME'\n  });\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL_UPDATE_UI'\n  });\n  yield put({\n    type: 'GET_STORED_VALUE'\n  });\n}\n\nexport const contractEventSaga = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const message = action.event.returnValues._message;\n    const display = \"\".concat(message);\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    });\n  }\n\n  return next(action);\n};\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash; //const txStatus = action.event.event\n    //const message = action.receipt.status\n\n    const display = \"\".concat(transactionHash);\n    toast.success(display, {\n      position: toast.POSITION.BOTTOM_LEFT\n    });\n  }\n\n  return next(action);\n};\nexport default function* root() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield all(drizzleSagas.map(saga => fork(saga))); //yield getStoredValueWatcher();\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["EventActions","drizzleSagas","all","fork","takeLatest","put","call","take","race","select","toast","showTxErrorMsg","type","showCheckingTxMsg","txSuccessful","contractEventSaga","store","next","action","EVENT_FIRED","message","event","returnValues","_message","display","success","position","POSITION","BOTTOM_RIGHT","joinTransactionSaga","transactionHash","txHash","BOTTOM_LEFT","root","showMetaMaskOverlay","map","saga"],"mappings":"AACA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAGA,UAAUC,cAAV,GAA2B;AACzB,QAAMN,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUC,iBAAV,GAA8B;AAC5B,QAAMR,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMP,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUE,YAAV,GAAyB;AACvB,QAAMT,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMP,GAAG,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAGD,OAAO,MAAMG,iBAAiB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC1D,MAAIA,MAAM,CAACN,IAAP,KAAgBZ,YAAY,CAACmB,WAAjC,EAA8C;AAC5C,UAAMC,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAaC,YAAb,CAA0BC,QAA1C;AACA,UAAMC,OAAO,aAAMJ,OAAN,CAAb;AAEAV,IAAAA,KAAK,CAACe,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC;AAA3B,KAAvB;AACD;;AACD,SAAOX,IAAI,CAACC,MAAD,CAAX;AACD,CARM;AAUP,OAAO,MAAMW,mBAAmB,GAAGb,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACN,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMkB,eAAe,GAAGZ,MAAM,CAACa,MAA/B,CADmC,CAEnC;AACA;;AACA,UAAMP,OAAO,aAAMM,eAAN,CAAb;AAEApB,IAAAA,KAAK,CAACe,OAAN,CAAcD,OAAd,EAAuB;AAAEE,MAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeK;AAA3B,KAAvB;AACD;;AACD,SAAOf,IAAI,CAACC,MAAD,CAAX;AACD,CAVM;AAaP,eAAe,UAAUe,IAAV,GAAiB;AAC9B,QAAM7B,UAAU,CAAC,iBAAD,EAAoB8B,mBAApB,CAAhB;AACA,QAAM9B,UAAU,CAAC,UAAD,EAAaO,cAAb,CAAhB;AACA,QAAMP,UAAU,CAAC,gBAAD,EAAmBS,iBAAnB,CAAhB;AACA,QAAMT,UAAU,CAAC,eAAD,EAAkBU,YAAlB,CAAhB;AACA,QAAMZ,GAAG,CACPD,YAAY,CAACkC,GAAb,CAAiBC,IAAI,IAAIjC,IAAI,CAACiC,IAAD,CAA7B,CADO,CAAT,CAL8B,CAQ9B;AACD","sourcesContent":["\r\nimport { EventActions, drizzleSagas } from '@drizzle/store'\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify'\r\n\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'REDIRECT_HOME' });\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction* txSuccessful() {\r\n  yield put({ type: 'TX_SUCCESSFUL_UPDATE_UI'});\r\n  yield put({ type: 'GET_STORED_VALUE'});\r\n}\r\n\r\n\r\nexport const contractEventSaga = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const message = action.event.returnValues._message\r\n    const display = `${message}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') {\r\n    const transactionHash = action.txHash\r\n    //const txStatus = action.event.event\r\n    //const message = action.receipt.status\r\n    const display = `${transactionHash}`\r\n \r\n    toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nexport default function* root() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield all(\r\n    drizzleSagas.map(saga => fork(saga))\r\n  );\r\n  //yield getStoredValueWatcher();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}