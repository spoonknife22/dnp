{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\n\nconst getDrizzle = state => state.appReducers.drizzle;\n\nconst getContracts = state => state.contracts;\n\nfunction fetchTokenId(action) {\n  return regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCHED',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n} // function* fetchTokenId (action) {\n//   return console.log('Hello Sagas!')\n// }\n\n\nfunction fetchPropAddr(action) {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 22\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nexport default function appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/appSagas.js"],"names":["fetchTokenId","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","GET_PROP_ADDRESS","getDrizzle","state","appReducers","drizzle","getContracts","contracts","action","type","tokenId","propAddress"],"mappings":"mDAWUA,Y;oDAOAC,a;oDAKeC,W;;AAvBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,OAAhD;;AACA,MAAMC,YAAY,GAAIH,KAAD,IAAWA,KAAK,CAACI,SAAtC;;AAEA,SAAUxB,YAAV,CAAwByB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMnB,GAAG,CAAC;AAAEoB,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA3C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGA;AACA;AACA;;;AAEA,SAAU1B,aAAV,CAAyBwB,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMnB,GAAG,CAAC;AAAEoB,UAAAA,IAAI,EAAE,kBAAR;AAA4BE,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AACb,eAAMG,UAAU,CAAC,kBAAD,EAAqBJ,aAArB,CAAhB;;AADa;AAAA;AAEb,eAAMI,UAAU,CAAC,gBAAD,EAAmBL,YAAnB,CAAhB;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS'\r\n\r\n\r\nconst getDrizzle = (state) => state.appReducers.drizzle;\r\nconst getContracts = (state) => state.contracts;\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCHED', tokenId:action.tokenId });\r\n}\r\n// function* fetchTokenId (action) {\r\n//   return console.log('Hello Sagas!')\r\n// }\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:22 });\r\n\r\n}\r\n\r\nexport default function* appRootSaga() {\r\n  yield takeLatest('GET_PROP_ADDRESS', fetchPropAddr);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}