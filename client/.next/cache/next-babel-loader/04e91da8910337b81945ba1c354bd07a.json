{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify'; // import { newContextComponents } from \"@drizzle/react-components\";\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\n\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const proposalAddress = action.event.returnValues._proposalAddress;\n      const showAddress = \"\".concat(proposalAddress);\n      const display = \"\".concat(message); //store.dispatch({type:\"GOT_PROP_ADDRESS\", propAddress:showAddress})\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n}; // export const fetchPropAddr = store => next => async (action) => {\n//   if (action.type === GET_PROP_ADDRESS) {\n//     const drizzle = action.drizzle;\n//     var state = drizzle.store.getState();\n//     const contracts = state.contracts;\n//     if (contracts.ProposalController.synced) {\n//     //if (state.drizzleStatus.initialized) {\n//       const dataKey = action.dataKey;\n//       //console.log(dataKey);\n//       const proposalAddress = contracts.ProposalController[\"getPropTokenIdMap\"][dataKey];\n//       console.log(proposalAddress);\n//       //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\n//       }\n//       return 'Loading...'\n//     }\n//   return next(action)\n// }","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","proposalAddress","_proposalAddress","showAddress","display","info","TOP_RIGHT"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;AACA;;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAP,IAAAA,KAAK,CAACS,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBP,YAAY,CAACiB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,eAAe,GAAGjB,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BG,gBAAlD;AACA,YAAMC,WAAW,aAAMF,eAAN,CAAjB;AACA,YAAMG,OAAO,aAAMN,OAAN,CAAb,CALsC,CAMtC;;AACAnB,MAAAA,KAAK,CAAC0B,IAAN,CAAWD,OAAX,EAAoB;AAAEf,QAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAegB;AAA3B,OAApB;AACF;AACF;;AACD,SAAOvB,IAAI,CAACC,MAAD,CAAX;AACD,CAbM,C,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n// import { newContextComponents } from \"@drizzle/react-components\";\r\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const proposalAddress = action.event.returnValues._proposalAddress\r\n       const showAddress = `${proposalAddress}`\r\n       const display = `${message}`\r\n       //store.dispatch({type:\"GOT_PROP_ADDRESS\", propAddress:showAddress})\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n\r\n// export const fetchPropAddr = store => next => async (action) => {\r\n//   if (action.type === GET_PROP_ADDRESS) {\r\n//     const drizzle = action.drizzle;\r\n//     var state = drizzle.store.getState();\r\n//     const contracts = state.contracts;\r\n//     if (contracts.ProposalController.synced) {\r\n//     //if (state.drizzleStatus.initialized) {\r\n//       const dataKey = action.dataKey;\r\n//       //console.log(dataKey);\r\n//       const proposalAddress = contracts.ProposalController[\"getPropTokenIdMap\"][dataKey];\r\n//       console.log(proposalAddress);\r\n//       //store.dispatch({ type: 'GOT_PROP_ADDRESS', propAddress:proposalAddress});\r\n      \r\n//       }\r\n//       return 'Loading...'\r\n//     }\r\n//   return next(action)\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}