{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchTokenId),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(sagaTester),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(txSuccessful),\n    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(root);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nimport { drizzleSagas } from '@drizzle/store';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nfunction fetchTokenId(action) {\n  return regeneratorRuntime.wrap(function fetchTokenId$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'TOKEN_ID_FETCH',\n          tokenId: action.tokenId\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction sagaTester() {\n  return regeneratorRuntime.wrap(function sagaTester$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'TESTED_SAGA',\n          testSaga: true\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n} //const drizzleSagas=drizzleSaga;\n\n\nfunction txSuccessful() {\n  return regeneratorRuntime.wrap(function txSuccessful$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return put({\n          type: 'TX_SUCCESSFUL'\n        });\n\n      case 2:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default function root() {\n  return regeneratorRuntime.wrap(function root$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return takeLatest('TEST_SAGA', sagaTester);\n\n      case 2:\n        _context4.next = 4;\n        return takeLatest('TX_SUCCESSFUL', txSuccessful);\n\n      case 4:\n        _context4.next = 6;\n        return takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n\n      case 6:\n        _context4.next = 8;\n        return all(...drizzleSagas.map(saga => fork(saga)));\n\n      case 8:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/rootSaga.js"],"names":["fetchTokenId","sagaTester","txSuccessful","root","all","fork","takeLatest","put","call","take","race","select","takeEvery","drizzleSagas","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","action","type","tokenId","testSaga","map","saga"],"mappings":"mDAOUA,Y;oDAGAC,U;oDAKAC,Y;oDAIeC,I;;AAnBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;;AAEA,SAAUnB,YAAV,CAAwBoB,MAAxB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMb,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAE,gBAAR;AAA2BC,UAAAA,OAAO,EAACF,MAAM,CAACE;AAA1C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUrB,UAAV;AAAA;AAAA;AAAA;AAAA;AAEE,eAAMM,GAAG,CAAC;AAAEc,UAAAA,IAAI,EAAC,aAAP;AAAsBE,UAAAA,QAAQ,EAAC;AAA/B,SAAD,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAAUrB,YAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMK,GAAG,CAAC;AAACc,UAAAA,IAAI,EAAC;AAAN,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUlB,IAAV;AAAA;AAAA;AAAA;AAAA;AACb,eAAMG,UAAU,CAAC,WAAD,EAAcL,UAAd,CAAhB;;AADa;AAAA;AAEb,eAAMK,UAAU,CAAC,eAAD,EAAkBJ,YAAlB,CAAhB;;AAFa;AAAA;AAGb,eAAMI,UAAU,CAAC,gBAAD,EAAmBN,YAAnB,CAAhB;;AAHa;AAAA;AAIb,eAAMI,GAAG,CACP,GAAGS,YAAY,CAACW,GAAb,CAAiBC,IAAI,IAAIpB,IAAI,CAACoB,IAAD,CAA7B,CADI,CAAT;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nimport { drizzleSagas } from '@drizzle/store';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type: 'TOKEN_ID_FETCH' , tokenId:action.tokenId  });\r\n}\r\nfunction* sagaTester () {\r\n  //return console.log('Hello Sagas!')\r\n  yield put({ type:'TESTED_SAGA', testSaga:true})\r\n}\r\n//const drizzleSagas=drizzleSaga;\r\nfunction* txSuccessful() {\r\n  yield put({type:'TX_SUCCESSFUL'});\r\n}\r\n\r\nexport default function* root() {\r\n  yield takeLatest('TEST_SAGA', sagaTester);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n  yield all(\r\n    ...drizzleSagas.map(saga => fork(saga))\r\n  );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}