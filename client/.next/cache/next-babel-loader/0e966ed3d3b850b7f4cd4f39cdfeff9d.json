{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { drizzleReducers } from '@drizzle/store';\nconst NOM_TX_PROCESSING = 'NOM_TX_PROCESSING';\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst TX_BROADCASTED = 'TX_BROADCASTED';\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\nconst TESTED_SAGA = 'TESTED_SAGA';\nconst initialState = {\n  transactionProcessing: false,\n  txSuccessful: false,\n  tokenId: null,\n  drizzle: null,\n  drizzleContracts: null,\n  propAddress: 1\n};\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case TESTED_SAGA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        testedSaga: true\n      });\n\n    case TX_BROADCASTED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactionProcessing: true\n      });\n\n    case TX_SUCCESSFUL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        txSuccessful: true,\n        transactionProcessing: false\n      });\n\n    case TX_PROCESSING_DONE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkMetaMask: false,\n        checkingTx: false,\n        transactionProcessing: false,\n        txSuccessful: true\n      });\n\n    case TOKEN_ID_FETCHED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenId: action.tokenId\n      });\n\n    case SET_DRIZZLE_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        drizzle: action.drizzle\n      });\n\n    case GOT_PROP_ADDRESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        propAddress: action.propAddress\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/reducers/appReducers.js"],"names":["combineReducers","drizzleReducers","NOM_TX_PROCESSING","TX_PROCESSING_DONE","TOKEN_ID_FETCHED","TX_SUCCESSFUL","TX_BROADCASTED","SET_DRIZZLE_STATE","GOT_PROP_ADDRESS","TESTED_SAGA","initialState","transactionProcessing","txSuccessful","tokenId","drizzle","drizzleContracts","propAddress","appReducer","state","action","type","testedSaga","checkMetaMask","checkingTx"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,aAApB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAC,KADH;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,gBAAgB,EAAC,IALE;AAMnBC,EAAAA,WAAW,EAAC;AANO,CAArB;;AASA,SAASC,UAAT,CAAoBC,KAAK,GAAGR,YAA5B,EAA0CS,MAA1C,EAAkD;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACE,6CAAYS,KAAZ;AAAmBG,QAAAA,UAAU,EAAE;AAA/B;;AACF,SAAKf,cAAL;AACE,6CAAYY,KAAZ;AAAmBP,QAAAA,qBAAqB,EAAE;AAA1C;;AACF,SAAKN,aAAL;AACE,6CAAYa,KAAZ;AAAoBN,QAAAA,YAAY,EAAE,IAAlC;AAAwCD,QAAAA,qBAAqB,EAAE;AAA/D;;AACF,SAAKR,kBAAL;AACE,6CAAYe,KAAZ;AAAmBI,QAAAA,aAAa,EAAE,KAAlC;AAAyCC,QAAAA,UAAU,EAAE,KAArD;AAA2DZ,QAAAA,qBAAqB,EAAE,KAAlF;AAAyFC,QAAAA,YAAY,EAAE;AAAvG;;AACF,SAAKR,gBAAL;AACI,6CAAYc,KAAZ;AAAmBL,QAAAA,OAAO,EAACM,MAAM,CAACN;AAAlC;;AACJ,SAAKN,iBAAL;AACI,6CAAYW,KAAZ;AAAmBJ,QAAAA,OAAO,EAAEK,MAAM,CAACL;AAAnC;;AACJ,SAAKN,gBAAL;AACI,6CAAYU,KAAZ;AAAmBF,QAAAA,WAAW,EAACG,MAAM,CAACH;AAAtC;;AACJ;AACE,aAAOE,KAAP;AAhBJ;AAkBD;;AAGH,eAAeD,UAAf","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { drizzleReducers } from '@drizzle/store';\r\n\r\nconst NOM_TX_PROCESSING = 'NOM_TX_PROCESSING'\r\nconst TX_PROCESSING_DONE = \"TX_PROCESSING_DONE\";\r\nconst TOKEN_ID_FETCHED = 'TOKEN_ID_FETCHED';\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\nconst TX_BROADCASTED = 'TX_BROADCASTED'\r\nconst SET_DRIZZLE_STATE = \"SET_DRIZZLE_STATE\";  \r\nconst GOT_PROP_ADDRESS = \"GOT_PROP_ADDRESS\";\r\nconst TESTED_SAGA = 'TESTED_SAGA';\r\n\r\n\r\nconst initialState = {\r\n  transactionProcessing:false,\r\n  txSuccessful: false, \r\n  tokenId: null,\r\n  drizzle: null,\r\n  drizzleContracts:null,\r\n  propAddress:1\r\n};   \r\n \r\nfunction appReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case TESTED_SAGA:\r\n        return { ...state, testedSaga: true };\r\n      case TX_BROADCASTED:\r\n        return { ...state, transactionProcessing: true };\r\n      case TX_SUCCESSFUL:\r\n        return { ...state,  txSuccessful: true, transactionProcessing: false };\r\n      case TX_PROCESSING_DONE:\r\n        return { ...state, checkMetaMask: false, checkingTx: false,transactionProcessing: false, txSuccessful: true };\r\n      case TOKEN_ID_FETCHED:\r\n          return { ...state, tokenId:action.tokenId};\r\n      case SET_DRIZZLE_STATE:\r\n          return { ...state, drizzle: action.drizzle };\r\n      case GOT_PROP_ADDRESS:\r\n          return { ...state, propAddress:action.propAddress};    \r\n      default:\r\n        return state;\r\n    }\r\n  }   \r\n\r\n\r\nexport default appReducer;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}