{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\pages\\\\innerTestPage.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Navbar from '../components/layout/Navbar.js';\nimport HeadOne from '../components/layout/Head.js';\nimport Footer from '../components/layout/Footer.js';\nimport { connect, Provider } from 'react-redux';\nimport { DrizzleContext, DrizzleProvider, drizzleConnect } from \"@drizzle/react-plugin\";\nimport { ToastContainer } from 'react-toastify';\nimport { generateStore } from \"@drizzle/store\";\nimport drizzleOptions from \"../EthComponents/drizzleOptions\";\nimport { contractEventSaga, joinTransactionSaga } from '../middleware/capMiddleWare';\nimport rootSaga from '../middleware/sagas/fetchSaga';\nimport appSagas from '../middleware/sagas/rootSaga';\nimport reducer from '../middleware/reducers/appReducers.js';\nimport MyComponent from './innerInnerTestPage';\nimport PropTypes from 'prop-types';\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props); // const { onSetDrizzleState } = this.props;\n\n    {\n      console.log(context.drizzle);\n    } // onSetDrizzleState(context.drizzle);\n  }\n\n  render() {\n    this.props.getCurrentProp();\n    return __jsx(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, console.log(this.props.store), console.log(this.props.propAddress), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"hello\"), __jsx(MyComponent, {\n      props: this.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nApp.contextTypes = {\n  drizzle: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n  return {\n    propAddress: state.propAddress,\n    drizzleStatus: state.drizzleStatus //UserStorage: state.accounts[0]\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCurrentProp: () => dispatch({\n      type: \"GET_PROP_ADDRESS\",\n      propAddress: 2\n    }),\n    onSetDrizzleState: drizzle => dispatch({\n      type: \"SET_DRIZZLE_STATE\",\n      drizzle: drizzle\n    })\n  };\n};\n\nexport default _c = drizzleConnect(App, mapStateToProps, mapDispatchToProps);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/pages/innerTestPage.js"],"names":["React","Navbar","HeadOne","Footer","connect","Provider","DrizzleContext","DrizzleProvider","drizzleConnect","ToastContainer","generateStore","drizzleOptions","contractEventSaga","joinTransactionSaga","rootSaga","appSagas","reducer","MyComponent","PropTypes","App","Component","constructor","props","context","console","log","drizzle","render","getCurrentProp","store","propAddress","propTypes","classes","object","isRequired","contextTypes","mapStateToProps","state","drizzleStatus","mapDispatchToProps","dispatch","type","onSetDrizzleState"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,cAA1C,QAAiE,uBAAjE;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,cAAP,MAA4B,iCAA5B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,6BAAvD;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,OAAP,MAAoB,uCAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAN,SAAkBnB,KAAK,CAACoB,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN,EAD0B,CAE1B;;AACA;AAACE,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,OAApB;AAA6B,KAHJ,CAK1B;AAED;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKL,KAAL,CAAWM,cAAX;AACA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBJ,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWO,KAAvB,CAAtB,EACCL,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWQ,WAAvB,CADD,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE,MAAC,WAAD;AAAa,MAAA,KAAK,EAAE,KAAKR,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADJ;AAQD;;AApB+B;;AAuBlCH,GAAG,CAACY,SAAJ,GAAgB;AACdC,EAAAA,OAAO,EAAEd,SAAS,CAACe,MAAV,CAAiBC;AADZ,CAAhB;AAIAf,GAAG,CAACgB,YAAJ,GAAmB;AACjBT,EAAAA,OAAO,EAAER,SAAS,CAACe;AADF,CAAnB;;AAIA,MAAMG,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLP,IAAAA,WAAW,EAAEO,KAAK,CAACP,WADd;AAELQ,IAAAA,aAAa,EAAED,KAAK,CAACC,aAFhB,CAGL;;AAHK,GAAP;AAKD,CAND;;AAQA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLZ,IAAAA,cAAc,EAAE,MAAOY,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,kBAAR;AAA2BX,MAAAA,WAAW,EAAC;AAAvC,KAAD,CAD1B;AAELY,IAAAA,iBAAiB,EAAGhB,OAAD,IAAac,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,mBAAR;AAA6Bf,MAAAA,OAAO,EAAEA;AAAtC,KAAD;AAFnC,GAAP;AAID,CALD;;AAOA,oBAAelB,cAAc,CAACW,GAAD,EAAMiB,eAAN,EAAuBG,kBAAvB,CAA7B","sourcesContent":["\r\nimport React from 'react';\r\nimport Navbar from '../components/layout/Navbar.js';\r\nimport HeadOne from '../components/layout/Head.js';\r\nimport Footer from '../components/layout/Footer.js'\r\nimport { connect, Provider } from 'react-redux';\r\nimport { DrizzleContext, DrizzleProvider, drizzleConnect  } from \"@drizzle/react-plugin\"; \r\nimport { ToastContainer } from 'react-toastify';   \r\nimport { generateStore } from \"@drizzle/store\";\r\nimport drizzleOptions  from \"../EthComponents/drizzleOptions\";\r\nimport { contractEventSaga, joinTransactionSaga } from '../middleware/capMiddleWare';\r\nimport rootSaga from '../middleware/sagas/fetchSaga';\r\nimport appSagas from '../middleware/sagas/rootSaga';\r\nimport reducer from '../middleware/reducers/appReducers.js'\r\nimport MyComponent from './innerInnerTestPage'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass App extends React.Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n    // const { onSetDrizzleState } = this.props;\r\n    {console.log(context.drizzle)}\r\n    \r\n    // onSetDrizzleState(context.drizzle);\r\n\r\n  }\r\n  \r\n  render() {\r\n    this.props.getCurrentProp()\r\n    return (\r\n        <div className=\"App\">{console.log(this.props.store)}\r\n        {console.log(this.props.propAddress)}\r\n          <div>hello</div>\r\n          <MyComponent props={this.props} />\r\n        </div>\r\n   \r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = { \r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nApp.contextTypes = {\r\n  drizzle: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    propAddress: state.propAddress,\r\n    drizzleStatus: state.drizzleStatus,\r\n    //UserStorage: state.accounts[0]\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCurrentProp: () =>  dispatch({ type: \"GET_PROP_ADDRESS\",propAddress:2 }),\r\n    onSetDrizzleState: (drizzle) => dispatch({ type: \"SET_DRIZZLE_STATE\", drizzle: drizzle })\r\n  };\r\n};\r\n\r\nexport default drizzleConnect(App, mapStateToProps, mapDispatchToProps);\r\n\r\n"]},"metadata":{},"sourceType":"module"}