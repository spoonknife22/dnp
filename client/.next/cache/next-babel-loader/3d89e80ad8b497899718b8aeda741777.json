{"ast":null,"code":"import { EventActions } from '@drizzle/store';\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nconst TX_DONE = 'TX_DONE';\nconst TX_PROCESSING = 'TX_PROCESSING'; // export const contractEventSaga = store => next => action => {\n//   if (action.type === EventActions.EVENT_FIRED) {\n//     const message = action.event.returnValues._message\n//     const display = `${message}`\n//     toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\n//   }\n//   return next(action)\n// }\n// export const joinTransactionSaga = store => next => action => {\n//   if (action.type === 'TX_SUCCESSFUL') {\n//     const transactionHash = action.txHash\n//     const display = `${transactionHash}`\n//     toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\n//   }\n//   return next(action)\n// }\n\nfunction* showMetaMaskOverlay() {\n  yield put({\n    type: 'CHECK_METAMASK'\n  });\n}\n\nfunction* showTxErrorMsg() {\n  yield put({\n    type: 'TX_ERROR_METAMASK'\n  });\n}\n\nfunction* showCheckingTxMsg() {\n  yield put({\n    type: 'REDIRECT_HOME'\n  });\n  yield put({\n    type: 'CHECKING_TX_UI'\n  });\n}\n\nfunction* fetchTransaction() {\n  yield put({\n    type: TX_PROCESSING\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: TX_DONE\n  });\n} // Combine all your redux concerns\n// app root saga\n\n\nfunction* appRootSaga() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', fetchTransaction);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n}\n\nexport const appSagas = [appRootSaga];","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/middleware/capSagas.js"],"names":["EventActions","all","fork","takeLatest","put","call","take","race","select","toast","TX_DONE","TX_PROCESSING","showMetaMaskOverlay","type","showTxErrorMsg","showCheckingTxMsg","fetchTransaction","txSuccessful","appRootSaga","appSagas"],"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,QAAqE,oBAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA,UAAUC,mBAAV,GAAgC;AAC9B,QAAMR,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUC,cAAV,GAA2B;AACzB,QAAMV,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUE,iBAAV,GAA8B;AAC5B,QAAMX,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACA,QAAMT,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAT;AACD;;AAED,UAAUG,gBAAV,GAA6B;AAC3B,QAAMZ,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAEF;AAAR,GAAD,CAAT;AACA;;AAGF,UAAUM,YAAV,GAAyB;AACvB,QAAMb,GAAG,CAAC;AAAES,IAAAA,IAAI,EAAEH;AAAR,GAAD,CAAT;AACD,C,CAED;AAEA;;;AACA,UAAUQ,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBS,mBAApB,CAAhB;AACA,QAAMT,UAAU,CAAC,UAAD,EAAaW,cAAb,CAAhB;AACA,QAAMX,UAAU,CAAC,gBAAD,EAAmBa,gBAAnB,CAAhB;AACA,QAAMb,UAAU,CAAC,eAAD,EAAkBc,YAAlB,CAAhB;AACD;;AAED,OAAO,MAAME,QAAQ,GAAG,CAACD,WAAD,CAAjB","sourcesContent":["\r\nimport { EventActions } from '@drizzle/store';\r\nimport { all, fork, takeLatest, put, call, take, race, select } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst TX_DONE = 'TX_DONE'\r\nconst TX_PROCESSING = 'TX_PROCESSING'\r\n\r\n\r\n// export const contractEventSaga = store => next => action => {\r\n//   if (action.type === EventActions.EVENT_FIRED) {\r\n//     const message = action.event.returnValues._message\r\n//     const display = `${message}`\r\n \r\n//     toast.success(display, { position: toast.POSITION.BOTTOM_RIGHT })\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\n\r\n// export const joinTransactionSaga = store => next => action => {\r\n//   if (action.type === 'TX_SUCCESSFUL') {\r\n//     const transactionHash = action.txHash\r\n//     const display = `${transactionHash}`\r\n \r\n//     toast.success(display, { position: toast.POSITION.BOTTOM_LEFT })\r\n//   }\r\n//   return next(action)\r\n// }\r\n\r\n\r\nfunction* showMetaMaskOverlay() {\r\n  yield put({ type: 'CHECK_METAMASK' });\r\n}\r\n\r\nfunction* showTxErrorMsg() {\r\n  yield put({ type: 'TX_ERROR_METAMASK' });\r\n}\r\n\r\nfunction* showCheckingTxMsg() {\r\n  yield put({ type: 'REDIRECT_HOME' });\r\n  yield put({ type: 'CHECKING_TX_UI' });\r\n} \r\n\r\nfunction *fetchTransaction() {\r\n  yield put({ type: TX_PROCESSING })\r\n }\r\n\r\n \r\nfunction *txSuccessful() {\r\n  yield put({ type: TX_DONE});\r\n}\r\n\r\n// Combine all your redux concerns\r\n   \r\n// app root saga\r\nfunction *appRootSaga() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', fetchTransaction)\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful)\r\n}\r\n\r\nexport const appSagas = [appRootSaga];\r\n"]},"metadata":{},"sourceType":"module"}