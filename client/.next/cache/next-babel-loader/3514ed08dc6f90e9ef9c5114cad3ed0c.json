{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === \"TX_BROADCASTED\") {\n    store.dispatch({\n      type: \"TX_PROCESSING\"\n    });\n  }\n\n  if (action.type === \"TX_SUCCESSFUL\") {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    store.dispatch({\n      type: \"TX_PROCESSING_DONE\"\n    });\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\n\nconst deposit = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(propContract, convertedContribution, account) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", propContract.methods[\"contribute\"].cacheSend(convertedContribution, {\n            from: \"\".concat(account),\n            gas: 3000000\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function deposit(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport const depositCurrency = store => next => /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(action) {\n    var _store$getState, accounts, account, convertedContribution, propAddress, stackId, drizzle, state, transactionStack, transactions, txHash, propContract;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(action.type === \"GOT_STACK_ID\")) {\n            _context2.next = 19;\n            break;\n          }\n\n          _store$getState = store.getState(), accounts = _store$getState.accounts;\n          account = accounts[0];\n          convertedContribution = action.convertedContribution, propAddress = action.propAddress, stackId = action.stackId, drizzle = action.drizzle;\n          _context2.next = 6;\n          return drizzle.store.getState();\n\n        case 6:\n          state = _context2.sent;\n          transactionStack = state.transactionStack, transactions = state.transactions;\n\n          if (!transactionStack[stackId]) {\n            _context2.next = 19;\n            break;\n          }\n\n          txHash = transactionStack[stackId];\n\n          if (txHash) {\n            _context2.next = 14;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", console.log(\"!txHash capMiddleWare 32\"));\n\n        case 14:\n          if (!txHash) {\n            _context2.next = 19;\n            break;\n          }\n\n          _context2.next = 17;\n          return drizzle.contracts[\"\".concat(propAddress)];\n\n        case 17:\n          propContract = _context2.sent;\n          //console.log(transactions[txHash].status)\n          deposit(propContract, convertedContribution, account).then(result => {\n            toast(\"Transaction status: \".concat(transactions[txHash] && transactions[txHash].status), {\n              position: toast.POSITION.BOTTOM_LEFT\n            });\n          }); //propContract.methods[\"contribute\"].cacheSend(convertedContribution,{from:`${account}`, gas:3000000}) \n          //toast(`Transaction status: ${transactions[txHash] && transactions[txHash].status}`, { position: toast.POSITION.BOTTOM_LEFT})\n\n        case 19:\n          return _context2.abrupt(\"return\", next(action));\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n\n  return function (_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const display = \"\".concat(message);\n\n      if (action.event.event === \"ContributionSuccess\") {\n        const poolDepth = action.event.returnValues.currentContractBalance;\n        store.dispatch({\n          type: \"PROPOSAL_BALANCE\",\n          balance: \"\".concat(poolDepth)\n        });\n      }\n\n      if (action.event.event === \"AssetNomination\") {\n        const propAddress = action.event.returnValues._proposalAddress;\n        const proposalAddress = \"\".concat(propAddress);\n        store.dispatch({\n          type: \"GOT_PROP_ADDRESS\",\n          proposalAddress: proposalAddress\n        });\n      }\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","dispatch","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","deposit","propContract","convertedContribution","account","methods","cacheSend","from","gas","depositCurrency","getState","accounts","propAddress","stackId","drizzle","state","transactionStack","transactions","console","log","contracts","then","result","status","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","display","poolDepth","currentContractBalance","balance","_proposalAddress","proposalAddress","info","TOP_RIGHT"],"mappings":"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","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === \"TX_BROADCASTED\") {\r\n    store.dispatch({type:\"TX_PROCESSING\"})\r\n  }\r\n  if (action.type === \"TX_SUCCESSFUL\") { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    store.dispatch({type:\"TX_PROCESSING_DONE\"})\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\nconst deposit = async (propContract,convertedContribution, account) => {\r\n  return propContract.methods[\"contribute\"].cacheSend(convertedContribution,{from:`${account}`, gas:3000000})\r\n}\r\n\r\n\r\nexport const depositCurrency = store => next => async (action) => {\r\n  if (action.type === \"GOT_STACK_ID\") {\r\n    const { accounts } = store.getState();\r\n    const account = accounts[0];\r\n    const { convertedContribution, propAddress, stackId, drizzle } = action;\r\n    let state = await drizzle.store.getState();\r\n    const { transactionStack, transactions} = state;\r\n\r\n    if (transactionStack[stackId]) {\r\n      const txHash = transactionStack[stackId];\r\n      if (!txHash) {\r\n        return(\r\n          console.log(\"!txHash capMiddleWare 32\")\r\n        )\r\n      }\r\n      else if(txHash){\r\n            const propContract = await drizzle.contracts[`${propAddress}`];\r\n            //console.log(transactions[txHash].status)\r\n            deposit(propContract, convertedContribution, account)\r\n            .then((result) => {\r\n            toast(`Transaction status: ${transactions[txHash] && transactions[txHash].status}`, { position: toast.POSITION.BOTTOM_LEFT})\r\n            })\r\n            //propContract.methods[\"contribute\"].cacheSend(convertedContribution,{from:`${account}`, gas:3000000}) \r\n            //toast(`Transaction status: ${transactions[txHash] && transactions[txHash].status}`, { position: toast.POSITION.BOTTOM_LEFT})\r\n    }\r\n  }\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const display = `${message}`\r\n       if(action.event.event === \"ContributionSuccess\"){\r\n        const poolDepth = action.event.returnValues.currentContractBalance\r\n        store.dispatch({type:\"PROPOSAL_BALANCE\", balance:`${poolDepth}`})\r\n       }\r\n       if(action.event.event === \"AssetNomination\"){\r\n        const propAddress = action.event.returnValues._proposalAddress\r\n        const proposalAddress = `${propAddress}`\r\n        store.dispatch({type:\"GOT_PROP_ADDRESS\", proposalAddress:proposalAddress})\r\n        }\r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}