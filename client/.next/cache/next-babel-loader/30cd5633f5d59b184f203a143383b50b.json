{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\NominateButton.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { Button } from \"shards-react\";\nimport { Loader } from 'rimble-ui';\nimport { newContextComponents } from \"@drizzle/react-components\";\nconst AccountData = newContextComponents.AccountData,\n      ContractData = newContextComponents.ContractData,\n      ContractForm = newContextComponents.ContractForm;\n\nconst NominationButton = ({\n  nominateAsset,\n  transactionProcessing,\n  drizzle,\n  drizzleState,\n  tokenId\n}) => {\n  // let state = drizzle.store.getState();\n  // let transactProcessing = state.transactionProcessing;\n  // useEffect(  () => {\n  //   if(transactProcessing){ \n  //     setShow(true);\n  //   }\n  //   else{\n  //   setShow(false);\n  //   }\n  // }, [transactProcessing]);   \n  //const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"deployedProposals\" methodArgs={[tokenId]} toUtf8 />\n  const Member = __jsx(ContractData, {\n    drizzle: drizzle,\n    drizzleState: drizzleState,\n    contract: \"ProposalController\",\n    method: \"getProposalIdsFromUser\",\n    methodArgs: [0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 18\n    }\n  });\n\n  if (!transactionProcessing) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }\n    }, __jsx(ContractData, {\n      drizzle: drizzle,\n      drizzleState: drizzleState,\n      contract: \"ProposalController\",\n      method: \"getProposalIdsFromUser\",\n      methodArgs: [0],\n      toUtf8: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }), __jsx(AccountData, {\n      accountIndex: 0,\n      units: \"ether\",\n      precision: 3,\n      render: ({\n        address,\n        balance,\n        units\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }, \"My Address: \", __jsx(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 30\n        }\n      }, address)), __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, \"My Ether: \", __jsx(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 28\n        }\n      }, balance), \" \", units)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }), __jsx(Button, {\n      className: \"btn btn-block btn-success contribute-form-btn\",\n      key: \"submit\",\n      type: \"button\",\n      onClick: nominateAsset,\n      theme: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, \"Nominate\"), console.log(Member)));\n  }\n\n  if (transactionProcessing) {\n    return __jsx(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, __jsx(Loader, {\n      color: \"#007bff\",\n      size: \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }));\n  }\n};\n\n_c = NominationButton;\n\nconst mapStateToProps = state => ({\n  transactionProcessing: state.appReducers.transactionProcessing\n});\n\nconst mapDispatchToProps = dispatch => ({\n  nominationProcess: () => dispatch({\n    type: \"NOM_TX_PROCESSING\"\n  })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"NominationButton\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/NominateButton.js"],"names":["React","useState","useEffect","connect","Button","Loader","newContextComponents","AccountData","ContractData","ContractForm","NominationButton","nominateAsset","transactionProcessing","drizzle","drizzleState","tokenId","Member","address","balance","units","color","console","log","mapStateToProps","state","appReducers","mapDispatchToProps","dispatch","nominationProcess","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Button } from \"shards-react\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { newContextComponents } from \"@drizzle/react-components\";\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\nconst NominationButton = ({ nominateAsset, transactionProcessing, drizzle, drizzleState, tokenId }) => {     \r\n\r\n  // let state = drizzle.store.getState();\r\n  // let transactProcessing = state.transactionProcessing;\r\n \r\n  // useEffect(  () => {\r\n\r\n  //   if(transactProcessing){ \r\n  //     setShow(true);\r\n  //   }\r\n  //   else{\r\n  //   setShow(false);\r\n  //   }\r\n  // }, [transactProcessing]);   \r\n  \r\n  //const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"deployedProposals\" methodArgs={[tokenId]} toUtf8 />\r\n  const Member = <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getProposalIdsFromUser\" methodArgs={[0]} />\r\n  if(!transactionProcessing)  {  \r\n    \r\n  return (\r\n    <div>\r\n    <ContractData drizzle={drizzle} drizzleState={drizzleState} contract=\"ProposalController\" method=\"getProposalIdsFromUser\" methodArgs={[0]} toUtf8 />\r\n    <AccountData\r\n        accountIndex={0}\r\n        units=\"ether\"\r\n        precision={3}\r\n        render={({ address, balance, units }) => (\r\n          <div>\r\n            <div>My Address: <span style={{ color: \"red\" }}>{address}</span></div>\r\n            <div>My Ether: <span style={{ color: \"red\" }}>{balance}</span> {units}</div>\r\n          </div>\r\n        )}\r\n      />\r\n    \r\n          <Button className=\"btn btn-block btn-success contribute-form-btn\" key=\"submit\" type=\"button\" onClick={nominateAsset}  theme=\"success\" >\r\n            <p className=\"mb-0\">Nominate</p>{console.log(Member)}\r\n            \r\n          </Button>\r\n          </div>\r\n        )   \r\n  } \r\n  if(transactionProcessing)  {\r\n    return (   \r\n            <div className=\"mx-auto\">   \r\n              <Loader color=\"#007bff\" size=\"40px\" />\r\n            </div>\r\n        )   \r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  transactionProcessing: state.appReducers.transactionProcessing,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  nominationProcess: () =>  dispatch({ type: \"NOM_TX_PROCESSING\" })\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationButton);\r\n"]},"metadata":{},"sourceType":"module"}