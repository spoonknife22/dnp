{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null\n    });\n  }\n\n  componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage;\n    const account = drizzleState.accounts[0];\n    let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\n    //let Key = contract.methods[\"addresses\"].cacheCall(account);\n    //let dataKey = contract.methods[\"profiles\"].cacheCall(Key);\n\n    this.setState({\n      dataKey,\n      Key\n    });\n  }\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    console.log(this.state.Key); //  const profile = UserStorage.profiles[this.state.dataKey];\n    //username: Web3.utils.toAscii(username),\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 6\n      }\n    }, \"Hi from Truffle! Here is your storedData: \", displayData && displayData.value[0]);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","componentDidMount","drizzle","drizzleState","props","contract","contracts","UserStorage","account","accounts","methods","cacheCall","setState","Key","render","displayData","profiles","state","console","log","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADiC;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA4B,KAAKC,KAAvC;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,WAAnC;AACA,UAAMC,OAAO,GAAGL,YAAY,CAACM,QAAb,CAAsB,CAAtB,CAAhB;AACA,QAAIT,OAAO,GAAGK,QAAQ,CAACK,OAAT,CAAiB,WAAjB,EAA8BC,SAA9B,CAAwCH,OAAxC,CAAd,CAJkB,CAI8C;AAGhE;AACA;;AACA,SAAKI,QAAL,CAAc;AAAEZ,MAAAA,OAAF;AAAUa,MAAAA;AAAV,KAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA;AAAF,QAAkB,KAAKH,KAAL,CAAWD,YAAX,CAAwBG,SAAhD;AACA,UAAMS,WAAW,GAAGR,WAAW,CAACS,QAAZ,CAAqB,KAAKC,KAAL,CAAWjB,OAAhC,CAApB,CAFO,CAEuD;;AAC/DkB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWJ,GAAvB,EAHQ,CAIR;AAGC;;AAEA,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAA8CE,WAAW,IAAIA,WAAW,CAACK,KAAZ,CAAkB,CAAlB,CAA7D,CAFF;AAID;;AA5BwC;;AA+B1C,eAAetB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null };\r\n\r\n componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n   const account = drizzleState.accounts[0];\r\n   let dataKey = contract.methods[\"addresses\"].cacheCall(account); // declare this call to be cached and synchronized\r\n\r\n\r\n   //let Key = contract.methods[\"addresses\"].cacheCall(account);\r\n   //let dataKey = contract.methods[\"profiles\"].cacheCall(Key);\r\n   this.setState({ dataKey,Key });\r\n }\r\n\r\n render() {\r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n  console.log(this.state.Key)\r\n  //  const profile = UserStorage.profiles[this.state.dataKey];\r\n\r\n   \r\n   //username: Web3.utils.toAscii(username),\r\n\r\n   return (\r\n    \r\n     <p>Hi from Truffle! Here is your storedData: {displayData && displayData.value[0]}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}