{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\AbPreNomCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\nimport Web3 from \"web3\"; //import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\n\nconst AbPreNomCard = ({\n  props,\n  userManaBalance\n}) => {\n  _s();\n\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  const graphql = JSON.stringify({\n    query: \" {\\n        projects(where: {projectId: \\\"23\\\", contract_in: [\\\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\\\", \\\"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\\\"]}) {\\n          invocations\\n          tokens{\\n         tokenId\\n         }\\n        }\\n        \\n       }\"\n  });\n  useEffect(() => {\n    const fetchTokenIds = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var targetUrl;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n              targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks';\n              fetch(targetUrl, {\n                method: \"POST\",\n                headers: myHeaders,\n                body: graphql,\n                variables: {},\n                redirect: 'follow'\n              }).then(res => res.json()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n                  var projectsGQL, callsPerProject, i, tokenIdArray, j, tokenIdObject;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return result.data.projects[0].invocations;\n\n                      case 2:\n                        projectsGQL = _context.sent;\n                        callsPerProject = Math.ceil(projectsGQL / 100);\n                        tokenIdArray = [];\n                        console.log(tokenIdArray);\n\n                        for (i = 0; i < callsPerProject; i++) {\n                          for (j = 0; j < 100; j++) {\n                            tokenIdObject = result.data.projects[0].tokens[j];\n                            tokenIdArray.push(tokenIdObject.tokenId);\n                          }\n                        }\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }(), error => {\n                setLoading(true), error;\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function fetchTokenIds() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchTokenIds();\n  }, []); // Get current posts\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(AbPreNomCard, \"bJyDl1LdBflfhvAVAPwVI64uMwY=\");\n\n_c = AbPreNomCard;\nexport default AbPreNomCard; // let ids = '3000001,3000002,3000003';\n// let nftIds = ids.split(\",\");\n//nftIds.map(Number);\n//let tokensArray = [`?token_ids=${3000001}&token_ids=${3000002}&token_ids=${3000003}`];\n// var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n//targetUrl = \"https://api.opensea.io/api/v1/assets?\"\n//let querystring = '&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270'\n//targetUrl = `https://api.opensea.io/api/v1/assets?token_ids=106000174&token_ids=106000177&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;\n\nvar _c;\n\n$RefreshReg$(_c, \"AbPreNomCard\");","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/AbPreNomCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Web3","AbPreNomCard","props","userManaBalance","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","myHeaders","Headers","append","graphql","JSON","stringify","query","fetchTokenIds","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","projects","invocations","projectsGQL","callsPerProject","Math","ceil","tokenIdArray","console","log","i","j","tokenIdObject","tokens","push","tokenId","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\nimport Web3 from \"web3\";\r\n//import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\r\n\r\nconst AbPreNomCard = ({ props, userManaBalance }) => {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n  const graphql= JSON.stringify({ query: \r\n      ` {\r\n        projects(where: {projectId: \"23\", contract_in: [\"0x059edd72cd353df5106d2b9cc5ab83a52287ac3a\", \"0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270\"]}) {\r\n          invocations\r\n          tokens{\r\n         tokenId\r\n         }\r\n        }\r\n        \r\n       }`\r\n    })\r\n\r\n  useEffect(() => {\r\n    const fetchTokenIds = async () => {\r\n    //const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/artblocks/art-blocks'\r\n  \r\n    fetch(targetUrl, {\r\n      method: \"POST\",\r\n      headers:myHeaders,  \r\n      body:graphql, variables:{},\r\n      redirect: 'follow'\r\n    })\r\n      .then(res => res.json())\r\n      .then( async (result) => {\r\n       \r\n        const projectsGQL = await result.data.projects[0].invocations;\r\n        const callsPerProject = Math.ceil(projectsGQL / 100);\r\n        \r\n        let i;\r\n        let tokenIdArray = [];\r\n        console.log(tokenIdArray)\r\n        let j;\r\n\r\n        for (i = 0; i < callsPerProject; i++) {\r\n          for (j = 0; j < 100; j++) {\r\n            const tokenIdObject = result.data.projects[0].tokens[j];\r\n            tokenIdArray.push(tokenIdObject.tokenId)\r\n          }             \r\n        }\r\n      },\r\n        (error) => {\r\n          setLoading(true),\r\n          error;\r\n        }\r\n    ) \r\n  }\r\n    fetchTokenIds();  \r\n  }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>{}</div>\r\n\r\n      {/* <Nominations \r\n        posts={currentPosts} \r\n        loading={loading} \r\n      />\r\n      \r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      /> */}\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\nexport default AbPreNomCard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // let ids = '3000001,3000002,3000003';\r\n  // let nftIds = ids.split(\",\");\r\n  //nftIds.map(Number);\r\n  //let tokensArray = [`?token_ids=${3000001}&token_ids=${3000002}&token_ids=${3000003}`];\r\n\r\n  // var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n  //targetUrl = \"https://api.opensea.io/api/v1/assets?\"\r\n  //let querystring = '&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270'\r\n//targetUrl = `https://api.opensea.io/api/v1/assets?token_ids=106000174&token_ids=106000177&asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=token_id&order_direction=desc&offset=0&limit=20`;"]},"metadata":{},"sourceType":"module"}