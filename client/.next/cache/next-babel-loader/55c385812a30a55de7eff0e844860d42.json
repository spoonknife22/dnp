{"ast":null,"code":"import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n\nimport { drizzleSagas } from '@drizzle/store';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nfunction* fetchTokenId(action) {\n  yield put({\n    type: 'TOKEN_ID_FETCHING',\n    tokenId: action.tokenId\n  });\n}\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL'\n  });\n}\n\nfunction* appSagas() {\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n} //export default appSagas;\n\n\nexport default function* root() {\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\n  yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\n  yield all(drizzleSagas.map(saga => fork(saga)));\n  yield getStoredValueWatcher();\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["all","fork","takeLatest","put","call","take","race","select","takeEvery","drizzleSagas","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","fetchTokenId","action","type","tokenId","txSuccessful","appSagas","root","showMetaMaskOverlay","showTxErrorMsg","showCheckingTxMsg","map","saga","getStoredValueWatcher"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB;;AAEA,MAAMI,cAAc,GAAG,gBAAvB;;AAEA,UAAUC,YAAV,CAAwBC,MAAxB,EAAgC;AAC9B,QAAMd,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAC,mBAAP;AAA4BC,IAAAA,OAAO,EAACF,MAAM,CAACE;AAA3C,GAAD,CAAT;AACD;;AAED,UAAUC,YAAV,GAAyB;AACvB,QAAMjB,GAAG,CAAC;AAACe,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAT;AACD;;AAED,UAAUG,QAAV,GAAsB;AACpB,QAAMb,SAAS,CAAC,eAAD,EAAkBY,YAAlB,CAAf;AACA,QAAMlB,UAAU,CAAC,gBAAD,EAAmBc,YAAnB,CAAhB;AACD,C,CACD;;;AAEA,eAAe,UAAUM,IAAV,GAAiB;AAC9B,QAAMpB,UAAU,CAAC,iBAAD,EAAoBqB,mBAApB,CAAhB;AACA,QAAMrB,UAAU,CAAC,UAAD,EAAasB,cAAb,CAAhB;AACA,QAAMtB,UAAU,CAAC,gBAAD,EAAmBuB,iBAAnB,CAAhB;AACA,QAAMvB,UAAU,CAAC,eAAD,EAAkBkB,YAAlB,CAAhB;AACA,QAAMpB,GAAG,CACPS,YAAY,CAACiB,GAAb,CAAiBC,IAAI,IAAI1B,IAAI,CAAC0B,IAAD,CAA7B,CADO,CAAT;AAGA,QAAMC,qBAAqB,EAA3B;AACD","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\nimport { drizzleSagas } from '@drizzle/store';\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type:'TOKEN_ID_FETCHING', tokenId:action.tokenId  });\r\n}\r\n\r\nfunction* txSuccessful() {\r\n  yield put({type: 'TX_SUCCESSFUL'});\r\n}\r\n\r\nfunction* appSagas () {\r\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n}\r\n//export default appSagas;\r\n\r\nexport default function* root() {\r\n  yield takeLatest('PUSH_TO_TXSTACK', showMetaMaskOverlay);\r\n  yield takeLatest('TX_ERROR', showTxErrorMsg);\r\n  yield takeLatest('TX_BROADCASTED', showCheckingTxMsg);\r\n  yield takeLatest('TX_SUCCESSFUL', txSuccessful);\r\n  yield all(\r\n    drizzleSagas.map(saga => fork(saga))\r\n  );\r\n  yield getStoredValueWatcher();\r\n}"]},"metadata":{},"sourceType":"module"}