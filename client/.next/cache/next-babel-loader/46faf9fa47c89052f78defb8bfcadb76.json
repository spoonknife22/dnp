{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\UpdatePropBtn.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { Button, Row, Form, Container } from \"shards-react\";\nimport Web3 from \"web3\";\nimport Moment from \"react-moment\";\n\nconst UpdatePropBtn = ({\n  drizzle,\n  drizzleState,\n  assetPrice,\n  listPrice,\n  propAddress,\n  orderId,\n  prevOrderStatus,\n  expiresAt,\n  currentExpiresAt,\n  storedOrderId\n}) => {\n  // const update = async () => {\n  //   const account = await drizzleState.accounts[0];\n  //   const contract = await drizzle.contracts[`${propAddress}`];\n  //   //uint256 _newPrice, uint256 _expiresAt, bytes16 _orderId\n  //   try {\n  //       contract.methods[\"updateContract\"].cacheSend(assetPrice, currentExpiresAt, expiresAt, {from:`${account}`});\n  //     } catch (err) {\n  //       console.error(\"Err:\", err)\n  //     }\n  //   }\n  // if(!prevOrderStatus || !listPrice || !expiresAt) {  \n  //   return <></>;\n  // }\n  // if(prevOrderStatus || listPrice || expiresAt)  {\n  //   console.log('prevOrderStatus')\n  //   return <></>;\n  // }\n  //else if(prevOrderStatus === 'cancelled') {\n  // if(prevOrderStatus) {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"dfdddd\") // <Accordion defaultActiveKey=\"1\">\n  //   <Row className=\"mt-2 mb-1 justify-content-center\">fffffffffffffffffffffffffffffffffffffff\n  //     <div className=\"justify-content-left\">\n  //       <Accordion.Toggle as={Button} className=\"px-4 py-1\" variant=\"link\" eventKey=\"0\" theme=\"warning\" outline >\n  //       {/* <div className=\"amount-text\" >Update Price:</div> */}\n  //         <Row className=\"mt-1 justify-content-center\">\n  //           <h5 className=\"text-dark display-5 mb-1\">Update:</h5>\n  //         </Row>bbb\n  //         {/* {(() => {  \n  //           if(prevOrderStatus === 'cancelled') { */}\n  //             <Row className=\"mt-1 mb-1\">\n  //               <div className=\"order-id-text d-inline-block\">New Id:<span className=\"text-danger order-id-text d-inline-block text-truncate\">0x442e276a9572ae5df715790f95e5433f4d4e258981d3e0d42286760760b1bfe4 {orderId}</span></div>\n  //             </Row>\n  //             <Row className=\"mt-1 mb-1\">\n  //               <div className=\"order-id-text d-inline-block\">Old Id:<span className=\"text-danger order-id-text d-inline-block text-truncate\">{storedOrderId}</span></div>\n  //             </Row>\n  //           {/* }\n  //         })} */}\n  //         {(() => {\n  //           if(listPrice != assetPrice && listPrice != 0) {\n  //             <>\n  //               <Row className=\"mt-1\">\n  //                 <div className=\"text-dark text-primary amount-text\" >Current Price: <span className=\"amount-number\">{Web3.utils.fromWei(`${assetPrice}`,'ether')}</span> MANA</div>\n  //               </Row>\n  //               <Row className=\"mt-1\">\n  //                 <div className=\"text-dark text-danger amount-text\" >Original Price: <span className=\"original-amount-number\">{Web3.utils.fromWei(`${listPrice}`,'ether')}</span> MANA</div>\n  //               </Row>\n  //             </>\n  //           }\n  //         })}\n  //         {(() => {\n  //           if(expiresAt != 0 && expiresAt != currentExpiresAt)  {  \n  //             <>   \n  //               <Row className=\"mt-1\">\n  //                 <div className=\"text-dark text-danger mr-1 text-right card-text\">Old Date:</div>\n  //                 <div className=\" expire-text text-left card-text\">\n  //                   {(typeof(Number(expiresAt)) == 'number')?\n  //                     <Moment format=\"h:mma M/DD/YY\">\n  //                       {Number(expiresAt)}\n  //                     </Moment>       \n  //                   :\n  //                     'no end date'\n  //                   }\n  //                 </div> \n  //               </Row>  \n  //               <Row className=\"mt-1\">\n  //                 <div className=\"text-dark text-primary mr-1 text-right card-text\">New Date:</div>\n  //                 <div className=\"expire-text text-left card-text\">\n  //                   {(typeof(Number(currentExpiresAt)) == 'number')?\n  //                     <Moment format=\"h:mma M/DD/YY\">\n  //                       {Number(currentExpiresAt)}\n  //                     </Moment>       \n  //                   :\n  //                     'no end date'\n  //                   }\n  //                 </div> \n  //               </Row>  \n  //             </>\n  //           }\n  //         })}\n  //       </Accordion.Toggle>\n  //         <Accordion.Collapse eventKey=\"0\">\n  //           <Row className=\"justify-content-center\">\n  //             <Form onSubmit={update}>\n  //               <Button outline theme=\"success\" size=\"sm\" className=\"mt-2 mx-auto\"\n  //                 key=\"submit\"\n  //                 type=\"button\"\n  //                 onClick={update} \n  //                 style={{ fontSize: 12 }}\n  //               >\n  //                 Update Price\n  //               </Button>\n  //             </Form>\n  //           </Row>\n  //         </Accordion.Collapse>\n  //     </div> \n  //   </Row>\n  //   <style jsx> {` \n  //       .order-id-text{max-width: 150px;color:#000;font-family: Poppins;}\n  //       .amount-text {color:#000;font-family: Poppins;}\n  //       .amount-number {color:#66a3ff;font-family: Poppins}\n  //       .original-amount-number{color:#c4183c;font-family: Poppins}\n  //       .expire-text {color:#000;font-family: Poppins;}\n  //     `}    \n  //   </style>\n  // </Accordion>\n  ;\n}; // else{\n//   return <></>;\n// }\n//}\n//check to see at right depth to get info\n\n\nconst mapStateToProps = state => ({\n  listPrice: state.appReducers.listPrice,\n  assetPrice: state.appReducers.assetPrice,\n  expiresAt: state.appReducers.expiresAt,\n  currentExpiresAt: state.appReducers.currentExpiresAt,\n  storedOrderId: state.appReducers.storedOrderId\n});\n\nexport default connect(mapStateToProps, null)(UpdatePropBtn);","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/UpdatePropBtn.js"],"names":["React","connect","Accordion","Button","Row","Form","Container","Web3","Moment","UpdatePropBtn","drizzle","drizzleState","assetPrice","listPrice","propAddress","orderId","prevOrderStatus","expiresAt","currentExpiresAt","storedOrderId","mapStateToProps","state","appReducers"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,SAA5B,QAA6C,cAA7C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,MAAMC,aAAa,GAAI,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA,UAAzB;AAAqCC,EAAAA,SAArC;AAAgDC,EAAAA,WAAhD;AAA6DC,EAAAA,OAA7D;AAAsEC,EAAAA,eAAtE;AAAuFC,EAAAA,SAAvF;AAAkGC,EAAAA,gBAAlG;AAAoHC,EAAAA;AAApH,CAAD,KAAyI;AAEhK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACE;AACE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvFF;AAyFD,CAjHH,C,CAkHE;AACA;AACA;AAEF;AAEA;;;AACA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCR,EAAAA,SAAS,EAACQ,KAAK,CAACC,WAAN,CAAkBT,SADM;AAElCD,EAAAA,UAAU,EAACS,KAAK,CAACC,WAAN,CAAkBV,UAFK;AAGlCK,EAAAA,SAAS,EAACI,KAAK,CAACC,WAAN,CAAkBL,SAHM;AAIlCC,EAAAA,gBAAgB,EAACG,KAAK,CAACC,WAAN,CAAkBJ,gBAJD;AAKlCC,EAAAA,aAAa,EAACE,KAAK,CAACC,WAAN,CAAkBH;AALE,CAAZ,CAAxB;;AAUA,eAAelB,OAAO,CAACmB,eAAD,EAAkB,IAAlB,CAAP,CAA+BX,aAA/B,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport { Button, Row, Form, Container } from \"shards-react\";\r\nimport Web3 from \"web3\";\r\nimport Moment from \"react-moment\";\r\n\r\nconst UpdatePropBtn =  ({ drizzle, drizzleState, assetPrice, listPrice, propAddress, orderId, prevOrderStatus, expiresAt, currentExpiresAt, storedOrderId }) => { \r\n\r\n// const update = async () => {\r\n//   const account = await drizzleState.accounts[0];\r\n//   const contract = await drizzle.contracts[`${propAddress}`];\r\n//   //uint256 _newPrice, uint256 _expiresAt, bytes16 _orderId\r\n//   try {\r\n//       contract.methods[\"updateContract\"].cacheSend(assetPrice, currentExpiresAt, expiresAt, {from:`${account}`});\r\n//     } catch (err) {\r\n//       console.error(\"Err:\", err)\r\n//     }\r\n//   }\r\n\r\n  \r\n// if(!prevOrderStatus || !listPrice || !expiresAt) {  \r\n//   return <></>;\r\n// }\r\n\r\n// if(prevOrderStatus || listPrice || expiresAt)  {\r\n//   console.log('prevOrderStatus')\r\n//   return <></>;\r\n// }\r\n//else if(prevOrderStatus === 'cancelled') {\r\n  // if(prevOrderStatus) {\r\n    return (\r\n      <div>dfdddd</div>\r\n      // <Accordion defaultActiveKey=\"1\">\r\n      //   <Row className=\"mt-2 mb-1 justify-content-center\">fffffffffffffffffffffffffffffffffffffff\r\n      //     <div className=\"justify-content-left\">\r\n      //       <Accordion.Toggle as={Button} className=\"px-4 py-1\" variant=\"link\" eventKey=\"0\" theme=\"warning\" outline >\r\n      //       {/* <div className=\"amount-text\" >Update Price:</div> */}\r\n      //         <Row className=\"mt-1 justify-content-center\">\r\n      //           <h5 className=\"text-dark display-5 mb-1\">Update:</h5>\r\n      //         </Row>bbb\r\n      //         {/* {(() => {  \r\n      //           if(prevOrderStatus === 'cancelled') { */}\r\n      //             <Row className=\"mt-1 mb-1\">\r\n      //               <div className=\"order-id-text d-inline-block\">New Id:<span className=\"text-danger order-id-text d-inline-block text-truncate\">0x442e276a9572ae5df715790f95e5433f4d4e258981d3e0d42286760760b1bfe4 {orderId}</span></div>\r\n      //             </Row>\r\n      //             <Row className=\"mt-1 mb-1\">\r\n      //               <div className=\"order-id-text d-inline-block\">Old Id:<span className=\"text-danger order-id-text d-inline-block text-truncate\">{storedOrderId}</span></div>\r\n      //             </Row>\r\n      //           {/* }\r\n      //         })} */}\r\n      //         {(() => {\r\n      //           if(listPrice != assetPrice && listPrice != 0) {\r\n      //             <>\r\n      //               <Row className=\"mt-1\">\r\n      //                 <div className=\"text-dark text-primary amount-text\" >Current Price: <span className=\"amount-number\">{Web3.utils.fromWei(`${assetPrice}`,'ether')}</span> MANA</div>\r\n      //               </Row>\r\n      //               <Row className=\"mt-1\">\r\n      //                 <div className=\"text-dark text-danger amount-text\" >Original Price: <span className=\"original-amount-number\">{Web3.utils.fromWei(`${listPrice}`,'ether')}</span> MANA</div>\r\n      //               </Row>\r\n      //             </>\r\n      //           }\r\n      //         })}\r\n      //         {(() => {\r\n      //           if(expiresAt != 0 && expiresAt != currentExpiresAt)  {  \r\n      //             <>   \r\n      //               <Row className=\"mt-1\">\r\n      //                 <div className=\"text-dark text-danger mr-1 text-right card-text\">Old Date:</div>\r\n      //                 <div className=\" expire-text text-left card-text\">\r\n      //                   {(typeof(Number(expiresAt)) == 'number')?\r\n      //                     <Moment format=\"h:mma M/DD/YY\">\r\n      //                       {Number(expiresAt)}\r\n      //                     </Moment>       \r\n      //                   :\r\n      //                     'no end date'\r\n      //                   }\r\n      //                 </div> \r\n      //               </Row>  \r\n      //               <Row className=\"mt-1\">\r\n      //                 <div className=\"text-dark text-primary mr-1 text-right card-text\">New Date:</div>\r\n      //                 <div className=\"expire-text text-left card-text\">\r\n      //                   {(typeof(Number(currentExpiresAt)) == 'number')?\r\n      //                     <Moment format=\"h:mma M/DD/YY\">\r\n      //                       {Number(currentExpiresAt)}\r\n      //                     </Moment>       \r\n      //                   :\r\n      //                     'no end date'\r\n      //                   }\r\n      //                 </div> \r\n      //               </Row>  \r\n      //             </>\r\n      //           }\r\n      //         })}\r\n      //       </Accordion.Toggle>\r\n      //         <Accordion.Collapse eventKey=\"0\">\r\n      //           <Row className=\"justify-content-center\">\r\n      //             <Form onSubmit={update}>\r\n      //               <Button outline theme=\"success\" size=\"sm\" className=\"mt-2 mx-auto\"\r\n      //                 key=\"submit\"\r\n      //                 type=\"button\"\r\n      //                 onClick={update} \r\n      //                 style={{ fontSize: 12 }}\r\n      //               >\r\n      //                 Update Price\r\n      //               </Button>\r\n      //             </Form>\r\n      //           </Row>\r\n      //         </Accordion.Collapse>\r\n      //     </div> \r\n      //   </Row>\r\n      //   <style jsx> {` \r\n      //       .order-id-text{max-width: 150px;color:#000;font-family: Poppins;}\r\n      //       .amount-text {color:#000;font-family: Poppins;}\r\n      //       .amount-number {color:#66a3ff;font-family: Poppins}\r\n      //       .original-amount-number{color:#c4183c;font-family: Poppins}\r\n      //       .expire-text {color:#000;font-family: Poppins;}\r\n      //     `}    \r\n      //   </style>\r\n      // </Accordion>\r\n    )\r\n  }\r\n  // else{\r\n  //   return <></>;\r\n  // }\r\n\r\n//}\r\n\r\n//check to see at right depth to get info\r\nconst mapStateToProps = (state) => ({\r\n  listPrice:state.appReducers.listPrice,\r\n  assetPrice:state.appReducers.assetPrice,\r\n  expiresAt:state.appReducers.expiresAt,\r\n  currentExpiresAt:state.appReducers.currentExpiresAt,\r\n  storedOrderId:state.appReducers.storedOrderId\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, null)(UpdatePropBtn);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}