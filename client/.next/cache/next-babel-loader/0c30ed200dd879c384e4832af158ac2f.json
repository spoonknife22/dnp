{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(root);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\nimport { drizzleSagas } from '@drizzle/store';\nconst drizzleSaga = drizzleSagas; // const dtuff = ...drizzleSagas;\n\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\n\nfunction fetchPropAddr(action) {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: action.propAddress\n        });\n\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nexport default function root() {\n  return regeneratorRuntime.wrap(function root$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return takeLatest(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n        _context2.next = 4;\n        return all(drizzleSagas.map(saga => fork(saga)));\n\n      case 4:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n} //export default fetchPropSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/fetchSaga.js"],"names":["fetchPropAddr","root","all","fork","takeLatest","put","call","take","race","select","takeEvery","drizzleSagas","drizzleSaga","GET_PROP_ADDRESS","action","type","propAddress","map","saga"],"mappings":"mDAYWA,a;oDAIcC,I;;AAhBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF;AACA,SAASC,YAAT,QAA8B,gBAA9B;AAKA,MAAMC,WAAW,GAAGD,YAApB,C,CACA;;AACA,MAAME,gBAAgB,GAAE,kBAAxB;;AAIA,SAAWb,aAAX,CAA0Bc,MAA1B;AAAA;AAAA;AAAA;AAAA;AACE,eAAMT,GAAG,CAAC;AAAEU,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,WAAW,EAACF,MAAM,CAACE;AAA/C,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUf,IAAV;AAAA;AAAA;AAAA;AAAA;AACb,eAAMG,UAAU,CAACS,gBAAD,EAAmBb,aAAnB,CAAhB;;AADa;AAAA;AAEb,eAAME,GAAG,CACPS,YAAY,CAACM,GAAb,CAAiBC,IAAI,IAAIf,IAAI,CAACe,IAAD,CAA7B,CADO,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOf","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\nimport { drizzleSagas }  from '@drizzle/store';\r\n\r\n\r\n\r\n\r\nconst drizzleSaga = drizzleSagas;\r\n// const dtuff = ...drizzleSagas;\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\n\r\n\r\nfunction * fetchPropAddr (action) {\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:action.propAddress});\r\n}\r\n\r\nexport default function* root() {\r\n  yield takeLatest(GET_PROP_ADDRESS, fetchPropAddr);\r\n  yield all(\r\n    drizzleSagas.map(saga => fork(saga))\r\n  );\r\n\r\n  }\r\n//export default fetchPropSaga;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}