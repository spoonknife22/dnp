{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\components\\\\buttons\\\\CardFooterBtn.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Web3 from \"web3\";\nimport { Loader } from 'rimble-ui';\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\nimport NominationModal from '../modals/NominationModal';\nimport FundingModal from '../modals/FundingModal.js';\nimport SaleModal from '../modals/SaleModal.js';\nimport SoldModal from '../modals/SoldModal.js';\nimport PaidOutModal from '../modals/PaidOutModal.js';\nimport PurchaseModal from '../modals/PurchaseModal.js';\nimport NominationDetailsLink from '../NominationDetailsLink.js';\nimport Moment from \"react-moment\";\n\nconst CardFooterButton = ({\n  props,\n  userManaBalance,\n  getSoldStatus,\n  nftAddress,\n  expiresAt,\n  assetPrice,\n  tokenId,\n  orderId,\n  getOrderId,\n  orderStatus\n}) => {\n  _s();\n\n  //Contract Proposal Status\n  const _useState = useState(),\n        isStatus = _useState[0],\n        setStatus = _useState[1]; //Contract OrderId\n\n\n  const _useState2 = useState(),\n        isContractOrderId = _useState2[0],\n        setContractOrderId = _useState2[1]; //Current Order status from Marketplace\n\n\n  const _useState3 = useState(),\n        isOrderStatus = _useState3[0],\n        setOrderStatus = _useState3[1];\n\n  const _useState4 = useState(false),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const oderStatusCall = contractOrderId => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const graphql = JSON.stringify({\n      query: \"{\\n        orders(where: {id:\\\"\".concat(contractOrderId, \"\\\",category:parcel }) {\\n          status\\n        }\\n      }\")\n    });\n    const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace';\n    fetch(targetUrl, {\n      method: \"POST\",\n      headers: myHeaders,\n      body: graphql,\n      variables: {},\n      redirect: 'follow'\n    }).then(res => res.json()).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(result) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              setOrderStatus(result.data.orders[0].status);\n              setLoading(false);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(), error => {\n      return error;\n    });\n  };\n\n  const fetchProposals = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var proposal, proposalAddress, proposalBalance, propData, statusString, status, soldStatus;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return props.drizzle.contracts.ProposalController.methods.deployedProposals(\"\".concat(tokenId)).call();\n\n          case 2:\n            proposal = _context2.sent;\n\n            if (!proposal) {\n              _context2.next = 23;\n              break;\n            }\n\n            _context2.next = 6;\n            return props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(\"\".concat(tokenId)).call();\n\n          case 6:\n            proposalAddress = _context2.sent;\n            _context2.next = 9;\n            return props.drizzle.contracts.MANAToken.methods.balanceOf(\"\".concat(proposalAddress)).call();\n\n          case 9:\n            proposalBalance = _context2.sent;\n            _context2.next = 12;\n            return props.drizzle.contracts.ProposalController.methods.getPropData(\"\".concat(proposalAddress)).call();\n\n          case 12:\n            propData = _context2.sent;\n            statusString = propData[0];\n            setStatus(statusString.toString());\n            status = propData[0];\n            getOrderId(propData[2]);\n            setContractOrderId(propData[2]);\n            oderStatusCall(propData[2]);\n            console.log(proposal); //status 4\n\n            if (status === '4') {\n              //Production code to ensure sale went through and payout can be run\n              //if(proposalBalance > assetPrice && isOrderStatus === 'sold'){\n              if (proposalBalance > assetPrice) {\n                soldStatus = '6';\n                getSoldStatus(proposalBalance, soldStatus);\n                setStatus('6');\n              } else {\n                setStatus(status);\n                getOrderId(orderId);\n              }\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 23:\n            if (!proposal) {\n              setStatus();\n              getOrderId(orderId);\n              setContractOrderId();\n            }\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function fetchProposals() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(() => {\n    fetchProposals();\n  }, [tokenId]); // if(isStatus === '0' && `\"${orderId}\"` === `\"${isContractOrderId}\"`){\n\n  if (isStatus === '0' && isOrderStatus === 'open') {\n    //0-FUNDING\n    return __jsx(CardFooter, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, __jsx(FundingModal, {\n      nftAddress: nftAddress,\n      tokenId: tokenId,\n      assetPrice: assetPrice,\n      expiresAt: expiresAt,\n      props: props,\n      userManaBalance: userManaBalance,\n      orderStatus: orderStatus,\n      orderId: orderId,\n      storedOrderId: isContractOrderId,\n      prevOrderStatus: isOrderStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }));\n  } //else if(isStatus === '0' && `'${isContractOrderId}'` !== 'undifined') {\n  else if (isStatus === '0' && isOrderStatus === 'cancelled' || isOrderStatus === 'sold') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, __jsx(FundingModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 16\n        }\n      }));\n    } else if (isStatus === '1') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, __jsx(PurchaseModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '4' && orderStatus === 'open') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, console.log(orderStatus, isOrderStatus), __jsx(SaleModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }\n      }));\n    } else if (isStatus === '6' || orderStatus === 'sold') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }\n      }, console.log(orderStatus), __jsx(SoldModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 19\n        }\n      }));\n    } else if (isStatus === '7') {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, __jsx(PaidOutModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        orderId: orderId,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 19\n        }\n      }));\n    } else {\n      return __jsx(CardFooter, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }\n      }, __jsx(NominationModal, {\n        nftAddress: nftAddress,\n        tokenId: tokenId,\n        assetPrice: assetPrice,\n        expiresAt: expiresAt,\n        props: props,\n        orderId: orderId,\n        userManaBalance: userManaBalance,\n        orderStatus: orderStatus,\n        storedOrderId: isContractOrderId,\n        prevOrderStatus: isOrderStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }\n      }));\n    }\n}; //export default CardFooterButton;\n\n\n_s(CardFooterButton, \"mscMIkpnao83XgrFRaMknbsezPE=\");\n\n_c = CardFooterButton;\n\nconst mapDispatchToProps = dispatch => ({\n  getOrderId: storedOrderId => dispatch({\n    type: \"GOT_STORED_ORDER_ID\",\n    storedOrderId: storedOrderId\n  })\n});\n\nexport default connect(null, mapDispatchToProps)(CardFooterButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"CardFooterButton\");","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/components/buttons/CardFooterBtn.js"],"names":["React","useState","useEffect","connect","Web3","Loader","Card","CardHeader","CardBody","CardFooter","CardTitle","Button","Row","NominationModal","FundingModal","SaleModal","SoldModal","PaidOutModal","PurchaseModal","NominationDetailsLink","Moment","CardFooterButton","props","userManaBalance","getSoldStatus","nftAddress","expiresAt","assetPrice","tokenId","orderId","getOrderId","orderStatus","isStatus","setStatus","isContractOrderId","setContractOrderId","isOrderStatus","setOrderStatus","loading","setLoading","oderStatusCall","contractOrderId","myHeaders","Headers","append","graphql","JSON","stringify","query","targetUrl","fetch","method","headers","body","variables","redirect","then","res","json","result","data","orders","status","error","fetchProposals","drizzle","contracts","ProposalController","methods","deployedProposals","call","proposal","proposalTokenIdMap","proposalAddress","MANAToken","balanceOf","proposalBalance","getPropData","propData","statusString","toString","console","log","soldStatus","mapDispatchToProps","dispatch","storedOrderId","type"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Web3 from \"web3\";\r\nimport { Loader } from 'rimble-ui';\r\nimport { Card, CardHeader, CardBody, CardFooter, CardTitle, Button, Row } from \"shards-react\";\r\nimport NominationModal from '../modals/NominationModal';\r\nimport FundingModal from '../modals/FundingModal.js';\r\nimport SaleModal from '../modals/SaleModal.js';\r\nimport SoldModal from '../modals/SoldModal.js';\r\nimport PaidOutModal from '../modals/PaidOutModal.js';\r\nimport PurchaseModal from '../modals/PurchaseModal.js';\r\nimport NominationDetailsLink from '../NominationDetailsLink.js';\r\nimport Moment from \"react-moment\";\r\n\r\n\r\nconst CardFooterButton = ({ props, userManaBalance, getSoldStatus, nftAddress, expiresAt, assetPrice, tokenId, orderId, getOrderId, orderStatus }) => {\r\n  //Contract Proposal Status\r\n  const [isStatus, setStatus] = useState();\r\n  //Contract OrderId\r\n  const [isContractOrderId, setContractOrderId] = useState();\r\n  //Current Order status from Marketplace\r\n  const [isOrderStatus, setOrderStatus] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const oderStatusCall = (contractOrderId) => {\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n \r\n  \r\n    const graphql = JSON.stringify({ query: \r\n      `{\r\n        orders(where: {id:\"${contractOrderId}\",category:parcel }) {\r\n          status\r\n        }\r\n      }`\r\n  })\r\n  \r\n  const targetUrl = 'https://api.thegraph.com/subgraphs/name/decentraland/marketplace'\r\n  fetch(targetUrl, {\r\n    method: \"POST\",\r\n    headers:myHeaders,  \r\n    body:graphql, variables:{},\r\n    redirect: 'follow'\r\n  })\r\n    .then(res => res.json())\r\n    .then( async (result) => {\r\n        setOrderStatus(result.data.orders[0].status);\r\n        setLoading(false); \r\n    },\r\n    (error) => {\r\n    return error;\r\n    }\r\n  )\r\n  }\r\n\r\n  const fetchProposals = async () => {\r\n    const proposal = await props.drizzle.contracts.ProposalController.methods.deployedProposals(`${tokenId}`).call();\r\n    if(proposal){\r\n      const proposalAddress = await props.drizzle.contracts.ProposalController.methods.proposalTokenIdMap(`${tokenId}`).call();\r\n      const proposalBalance = await props.drizzle.contracts.MANAToken.methods.balanceOf(`${proposalAddress}`).call();\r\n      const propData = await props.drizzle.contracts.ProposalController.methods.getPropData(`${proposalAddress}`).call();\r\n      const statusString = (propData[0])\r\n      setStatus(statusString.toString());\r\n      const status = propData[0];\r\n      getOrderId(propData[2]);\r\n      setContractOrderId(propData[2]);\r\n      oderStatusCall(propData[2]);\r\n      console.log(proposal)\r\n      //status 4\r\n      if(status === '4'){\r\n        //Production code to ensure sale went through and payout can be run\r\n        //if(proposalBalance > assetPrice && isOrderStatus === 'sold'){\r\n        if(proposalBalance > assetPrice){  \r\n          const soldStatus = '6';\r\n          getSoldStatus(proposalBalance, soldStatus);\r\n          setStatus('6');\r\n        }\r\n        else{\r\n            setStatus(status);\r\n            getOrderId(orderId);\r\n        }\r\n      }\r\n    }\r\n      else if (!proposal){\r\n      \r\n        setStatus()\r\n        getOrderId(orderId);\r\n        setContractOrderId()\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      fetchProposals();\r\n    }, [tokenId]);\r\n\r\n\r\n      // if(isStatus === '0' && `\"${orderId}\"` === `\"${isContractOrderId}\"`){\r\n      if(isStatus === '0' &&  isOrderStatus === 'open'){\r\n        //0-FUNDING\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <FundingModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt}  \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n          )\r\n        }\r\n      //else if(isStatus === '0' && `'${isContractOrderId}'` !== 'undifined') {\r\n      else if(isStatus === '0' &&  isOrderStatus === 'cancelled' || isOrderStatus === 'sold') {\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n               <FundingModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt}  \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n        )\r\n      }\r\n      else if(isStatus === '1') {\r\n        return (\r\n            <CardFooter className=\"p-0\">\r\n              <PurchaseModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n          )\r\n      }\r\n      else if(isStatus === '4' && orderStatus === 'open') {\r\n        return (\r\n            <CardFooter className=\"p-0\">{console.log(orderStatus,isOrderStatus)}\r\n              <SaleModal \r\n                nftAddress={nftAddress}\r\n                tokenId={tokenId}\r\n                assetPrice={assetPrice}\r\n                expiresAt={expiresAt} \r\n                props={props} \r\n                userManaBalance={userManaBalance}\r\n                orderStatus={orderStatus}\r\n                orderId={orderId}\r\n                storedOrderId={isContractOrderId}\r\n                prevOrderStatus={isOrderStatus}\r\n              />\r\n            </CardFooter> \r\n        )\r\n    }\r\n      else if(isStatus === '6' || orderStatus === 'sold') {\r\n        return (\r\n                <CardFooter className=\"p-0\">{console.log(orderStatus)}\r\n                  <SoldModal \r\n                    nftAddress={nftAddress}\r\n                    tokenId={tokenId}\r\n                    assetPrice={assetPrice}\r\n                    expiresAt={expiresAt} \r\n                    props={props} \r\n                    userManaBalance={userManaBalance}\r\n                    orderStatus={orderStatus}\r\n                    orderId={orderId}\r\n                    storedOrderId={isContractOrderId}\r\n                    prevOrderStatus={isOrderStatus}\r\n                  />\r\n                </CardFooter> \r\n            )\r\n      }\r\n      else if(isStatus === '7') {\r\n        return (\r\n                <CardFooter className=\"p-0\">\r\n                  <PaidOutModal\r\n                    nftAddress={nftAddress}\r\n                    tokenId={tokenId}\r\n                    assetPrice={assetPrice}\r\n                    expiresAt={expiresAt} \r\n                    props={props} \r\n                    userManaBalance={userManaBalance}\r\n                    orderStatus={orderStatus}\r\n                    orderId={orderId}\r\n                    storedOrderId={isContractOrderId}\r\n                    prevOrderStatus={isOrderStatus}\r\n                  />\r\n                </CardFooter> \r\n            )\r\n      }\r\n      else{\r\n        return (\r\n          <CardFooter className=\"p-0\">\r\n            <NominationModal\r\n              nftAddress={nftAddress}\r\n              tokenId={tokenId}\r\n              assetPrice={assetPrice}\r\n              expiresAt={expiresAt} \r\n              props={props} \r\n              orderId={orderId}\r\n              userManaBalance={userManaBalance}\r\n              orderStatus={orderStatus}\r\n              storedOrderId={isContractOrderId}\r\n              prevOrderStatus={isOrderStatus}\r\n            />\r\n          </CardFooter> \r\n        )\r\n      }\r\n  }\r\n  \r\n  //export default CardFooterButton;\r\n\r\n  const mapDispatchToProps = (dispatch) => ({\r\n    getOrderId: (storedOrderId) =>  dispatch({ type: \"GOT_STORED_ORDER_ID\", storedOrderId: storedOrderId })\r\n  });\r\n    \r\n    \r\n  export default connect(null, mapDispatchToProps)(CardFooterButton);"]},"metadata":{},"sourceType":"module"}