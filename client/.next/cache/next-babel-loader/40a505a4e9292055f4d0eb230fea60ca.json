{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\dnp\\\\client\\\\components\\\\cards\\\\InnerAbCard.js\";\nvar __jsx = React.createElement;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React, { useState, useEffect } from 'react';\nimport Pagination from '../Pagination';\nimport Nominations from '../Nominations';\nimport moment from \"moment\";\nimport Web3 from \"web3\"; //import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\n\nconst InnerAbCard = ({\n  props,\n  userManaBalance,\n  projectTokenIds,\n  totalTokens\n}) => {\n  // console.log(projectTokenIds);\n  const _useState = useState([]),\n        orders = _useState[0],\n        setOrders = _useState[1];\n\n  const _useState2 = useState(false),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(1),\n        currentPage = _useState3[0],\n        setCurrentPage = _useState3[1];\n\n  const _useState4 = useState(6),\n        parcelsPerPage = _useState4[0];\n\n  const _useState5 = useState(),\n        totalOrders = _useState5[0],\n        setTotalOrders = _useState5[1];\n\n  useEffect(() => {\n    const fetchPosts = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var proxyUrl, targetUrl, contractAddress, i, j, artArray, callsPerProject;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'https://api.opensea.io/api/v1/assets?';\n              contractAddress = 'asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=listing_date&order_direction=desc&offset=0&limit=50'; //asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&event_type=created&only_opensea=false&offset=0&limit=100\n\n              artArray = [];\n              callsPerProject = Math.ceil(totalTokens / 50);\n\n              for (i = 0; i < callsPerProject; i++) {\n                for (j = 0; j < 50; j++) {\n                  // const tokenIdObject = result.data.projects[0].tokens[j];\n                  // artArray.push(tokenIdObject.tokenId)\n                  fetch(targetUrl + contractAddress, {\n                    header: 'x-api-key:2f2a0900458f4bdfbb489680a58e7526'\n                  }).then(res => res.json()).then(result => {\n                    console.log(result, 'line 34');\n                    setPosts(result.asset_events);\n                    setLoading(false);\n                  }, error => {\n                    setLoading(true), error;\n                  });\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchPosts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchPosts();\n  }, []); // Get current posts\n\n  const indexOfLastParcel = currentPage * parcelsPerPage;\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InnerAbCard;","map":{"version":3,"sources":["C:/Users/Samsung/code/dnp/client/components/cards/InnerAbCard.js"],"names":["React","useState","useEffect","Pagination","Nominations","moment","Web3","InnerAbCard","props","userManaBalance","projectTokenIds","totalTokens","orders","setOrders","loading","setLoading","currentPage","setCurrentPage","parcelsPerPage","totalOrders","setTotalOrders","fetchPosts","proxyUrl","targetUrl","contractAddress","artArray","callsPerProject","Math","ceil","i","j","fetch","header","then","res","json","result","console","log","setPosts","asset_events","error","indexOfLastParcel","indexOfFirstParcel","currentParcels","slice","paginate","pageNumber"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,eAAT;AAA0BC,EAAAA,eAA1B;AAA2CC,EAAAA;AAA3C,CAAD,KAA8D;AAChF;AADgF,oBAEpDV,QAAQ,CAAC,EAAD,CAF4C;AAAA,QAEzEW,MAFyE;AAAA,QAEjEC,SAFiE;;AAAA,qBAGlDZ,QAAQ,CAAC,KAAD,CAH0C;AAAA,QAGzEa,OAHyE;AAAA,QAGhEC,UAHgE;;AAAA,qBAI1Cd,QAAQ,CAAC,CAAD,CAJkC;AAAA,QAIzEe,WAJyE;AAAA,QAI5DC,cAJ4D;;AAAA,qBAKvDhB,QAAQ,CAAC,CAAD,CAL+C;AAAA,QAKzEiB,cALyE;;AAAA,qBAM1CjB,QAAQ,EANkC;AAAA,QAMzEkB,WANyE;AAAA,QAM5DC,cAN4D;;AAQ9ElB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,UAAU;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,QADe,GACJ,sCADI,EAEnBC,SAFmB,GAEP,uCAFO;AAGfC,cAAAA,eAHe,GAGG,gIAHH,EAInB;;AAGIC,cAAAA,QAPe,GAOJ,EAPI;AAQbC,cAAAA,eARa,GAQKC,IAAI,CAACC,IAAL,CAAUjB,WAAW,GAAG,EAAxB,CARL;;AASnB,mBAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,eAAhB,EAAiCG,CAAC,EAAlC,EAAsC;AACpC,qBAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvB;AACA;AACJC,kBAAAA,KAAK,CAACR,SAAS,GAAGC,eAAb,EAA6B;AAACQ,oBAAAA,MAAM,EAAC;AAAR,mBAA7B,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVC,oBAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,SAApB;AACAG,oBAAAA,QAAQ,CAACH,MAAM,CAACI,YAAR,CAAR;AACAzB,oBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,mBAPL,EAQK0B,KAAD,IAAW;AACT1B,oBAAAA,UAAU,CAAC,IAAD,CAAV,EACA0B,KADA;AAED,mBAXL;AAcC;AACF;;AA5BoB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVpB,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAgCAA,IAAAA,UAAU;AACX,GAlCQ,EAkCN,EAlCM,CAAT,CAR8E,CA4ChF;;AACA,QAAMqB,iBAAiB,GAAG1B,WAAW,GAAGE,cAAxC;AACA,QAAMyB,kBAAkB,GAAGD,iBAAiB,GAAGxB,cAA/C;AACA,QAAM0B,cAAc,GAAGhC,MAAM,CAACiC,KAAP,CAAaF,kBAAb,EAAiCD,iBAAjC,CAAvB;;AACA,QAAMI,QAAQ,GAAGC,UAAU,IAAI9B,cAAc,CAAC8B,UAAD,CAA7C;;AAIA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAmBD,CAvED;;AAyEA,eAAexC,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pagination from '../Pagination';\r\nimport Nominations from '../Nominations'\r\nimport moment from \"moment\";\r\nimport Web3 from \"web3\";\r\n//import { OpenSeaPort, Network, OpenSeaAsset  } from 'opensea-js'\r\n\r\nconst InnerAbCard = ({ props, userManaBalance, projectTokenIds, totalTokens }) => {\r\n  // console.log(projectTokenIds);\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [parcelsPerPage] = useState(6);\r\n  const [totalOrders, setTotalOrders] = useState();\r\n\r\n    useEffect(() => {\r\n      const fetchPosts = async () => {\r\n      var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n      targetUrl = 'https://api.opensea.io/api/v1/assets?';\r\n      let contractAddress = 'asset_contract_address=0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270&order_by=listing_date&order_direction=desc&offset=0&limit=50'\r\n      //asset_contract_address=0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d&event_type=created&only_opensea=false&offset=0&limit=100\r\n      let i;\r\n      let j;\r\n      let artArray = [];\r\n      const callsPerProject = Math.ceil(totalTokens / 50);\r\n      for (i = 0; i < callsPerProject; i++) {\r\n        for (j = 0; j < 50; j++) {\r\n          // const tokenIdObject = result.data.projects[0].tokens[j];\r\n          // artArray.push(tokenIdObject.tokenId)\r\n      fetch(targetUrl + contractAddress,{header:'x-api-key:2f2a0900458f4bdfbb489680a58e7526'})\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            console.log(result, 'line 34')\r\n            setPosts(result.asset_events);\r\n            setLoading(false);\r\n          },\r\n          (error) => {\r\n            setLoading(true),\r\n            error;\r\n          }\r\n        ) \r\n\r\n      }             \r\n    } \r\n      \r\n        }\r\n  \r\n      fetchPosts();\r\n    }, []);\r\n\r\n  // Get current posts\r\n  const indexOfLastParcel = currentPage * parcelsPerPage;\r\n  const indexOfFirstParcel = indexOfLastParcel - parcelsPerPage;\r\n  const currentParcels = orders.slice(indexOfFirstParcel, indexOfLastParcel);\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>{}</div>\r\n\r\n      {/* <Nominations \r\n        posts={currentPosts} \r\n        loading={loading} \r\n      />\r\n      \r\n      <Pagination\r\n        postsPerPage={postsPerPage}\r\n        totalPosts={posts.length}\r\n        paginate={paginate}\r\n      /> */}\r\n    </>\r\n\r\n\r\n  \r\n  );\r\n};\r\n\r\nexport default InnerAbCard;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}