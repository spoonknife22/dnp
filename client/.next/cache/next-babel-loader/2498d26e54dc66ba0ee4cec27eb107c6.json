{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(testSaga),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(fetchPropAddr),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(appRootSaga);\n\nimport { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; // const delay = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nconst TEST_SAGA = 'TEST_SAGA';\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\nconst ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING';\nconst CONTRACT_SYNCED = 'CONTRACT_SYNCED';\n\nfunction testSaga() {\n  return regeneratorRuntime.wrap(function testSaga$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        console.log('Yes!');\n\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n\nfunction fetchPropAddr(action) {\n  return regeneratorRuntime.wrap(function fetchPropAddr$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return put({\n          type: 'GOT_PROP_ADDRESS',\n          propAddress: 33\n        });\n\n      case 2:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _marked2);\n}\n\nfunction appRootSaga() {\n  return regeneratorRuntime.wrap(function appRootSaga$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\n\n      case 2:\n        _context3.next = 4;\n        return takeEvery(TEST_SAGA, testSaga);\n\n      case 4:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked3);\n}\n\nexport default appRootSaga;","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["testSaga","fetchPropAddr","appRootSaga","all","fork","takeLatest","put","call","take","race","select","takeEvery","TOKEN_ID_FETCH","GET_PROP_ADDRESS","TEST_SAGA","TX_SUCCESSFUL","ACCOUNTS_FETCHING","CONTRACT_SYNCED","console","log","action","type","propAddress"],"mappings":"mDAUUA,Q;oDAIAC,a;oDAIAC,W;;AAlBV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;;AAEA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,gBAAgB,GAAE,kBAAxB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACC,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;;AAED,SAAUjB,QAAV;AAAA;AAAA;AAAA;AACEkB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUlB,aAAV,CAAyBmB,MAAzB;AAAA;AAAA;AAAA;AAAA;AACE,eAAMd,GAAG,CAAC;AAAEe,UAAAA,IAAI,EAAE,kBAAR;AAA4BC,UAAAA,WAAW,EAAC;AAAxC,SAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AACE,eAAMS,SAAS,CAACE,gBAAD,EAAmBZ,aAAnB,CAAf;;AADF;AAAA;AAEE,eAAMU,SAAS,CAACG,SAAD,EAAYd,QAAZ,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeE,WAAf","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n// const delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\nconst TEST_SAGA = 'TEST_SAGA';\r\nconst TX_SUCCESSFUL = 'TX_SUCCESSFUL';\r\n const ACCOUNTS_FETCHING = 'ACCOUNTS_FETCHING';\r\n const CONTRACT_SYNCED = 'CONTRACT_SYNCED'\r\n\r\nfunction* testSaga () {\r\n  console.log('Yes!');\r\n}\r\n\r\nfunction* fetchPropAddr (action) {\r\n  yield put({ type: 'GOT_PROP_ADDRESS', propAddress:33});\r\n}\r\n\r\nfunction* appRootSaga () {\r\n  yield takeEvery(GET_PROP_ADDRESS, fetchPropAddr);\r\n  yield takeEvery(TEST_SAGA, testSaga);\r\n}\r\n\r\n\r\nexport default appRootSaga;\r\n"]},"metadata":{},"sourceType":"module"}