{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Samsung\\\\code\\\\cacp\\\\client\\\\EthComponents\\\\EthAccounts.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\nimport Web3 from \"web3\";\n\nclass EthAccounts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataKey: null,\n      userId: null\n    });\n\n    _defineProperty(this, \"getDataKey\", async (contract, drizzleState, drizzle) => {\n      const userId = drizzle.contracts.UserStorage.methods().addresses.call(drizzleState.accounts[0]); //const userId = await contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\n\n      const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\n      this.setState({\n        dataKey,\n        userId\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.UserStorage; // const account = drizzleState.accounts[0];\n    //const userId = await this.getUserId(contract,drizzleState);\n    // const user = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\n    //const userId = 1;\n\n    this.getDataKey(contract, drizzleState, drizzle); //const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\n    // const dataKey = contract.methods[\"profiles\"].cacheCall(1);\n    //  this.setState({ dataKey });\n  } // getUserId = async(contract,drizzleState) => {\n  //   const userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\n  //   return parseInt(userId);\n  // }\n\n\n  render() {\n    const {\n      UserStorage\n    } = this.props.drizzleState.contracts;\n    const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \n\n    console.log(this.state.userId); //username: Web3.utils.toAscii(username),\n\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }\n    }, \"Hi: \", displayData && displayData.value[1]);\n  }\n\n}\n\nexport default EthAccounts; //  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/EthComponents/EthAccounts.js"],"names":["React","ContractForm","AccountData","ContractData","Web3","EthAccounts","Component","dataKey","userId","contract","drizzleState","drizzle","contracts","UserStorage","methods","addresses","call","accounts","cacheCall","setState","componentDidMount","props","getDataKey","render","displayData","profiles","state","console","log","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,QAAwD,2BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AAAA;AAAA;;AAAA,mCACjC;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KADiC;;AAAA,wCA2B7B,OAAMC,QAAN,EAAeC,YAAf,EAA4BC,OAA5B,KAAwC;AACnD,YAAMH,MAAM,GAAGG,OAAO,CAACC,SAAR,CAAkBC,WAAlB,CAA8BC,OAA9B,GAAwCC,SAAxC,CAAkDC,IAAlD,CAAuDN,YAAY,CAACO,QAAb,CAAsB,CAAtB,CAAvD,CAAf,CADmD,CAEnD;;AACA,YAAMV,OAAO,GAAG,MAAME,QAAQ,CAACK,OAAT,CAAiB,UAAjB,EAA6BI,SAA7B,CAAuCV,MAAvC,CAAtB;AACA,WAAKW,QAAL,CAAc;AAAEZ,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAd;AACD,KAhCyC;AAAA;;AAGzC,QAAMY,iBAAN,GAA0B;AACxB,UAAM;AAAET,MAAAA,OAAF;AAAWD,MAAAA;AAAX,QAA4B,KAAKW,KAAvC;AACA,UAAMZ,QAAQ,GAAGE,OAAO,CAACC,SAAR,CAAkBC,WAAnC,CAFwB,CAGzB;AAGE;AACA;AACA;;AACA,SAAKS,UAAL,CAAgBb,QAAhB,EAA0BC,YAA1B,EAAwCC,OAAxC,EATuB,CAUvB;AAIF;AACA;AAEA,GApBwC,CAsB1C;AACA;AACA;AACA;;;AASCY,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEV,MAAAA;AAAF,QAAkB,KAAKQ,KAAL,CAAWX,YAAX,CAAwBE,SAAhD;AACA,UAAMY,WAAW,GAAGX,WAAW,CAACY,QAAZ,CAAqB,KAAKC,KAAL,CAAWnB,OAAhC,CAApB,CAHO,CAGuD;;AAC9DoB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWlB,MAAvB,EAJO,CAOP;;AAEA,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAQgB,WAAW,IAAIA,WAAW,CAACK,KAAZ,CAAkB,CAAlB,CAAvB,CAFF;AAID;;AA/CwC;;AAkD1C,eAAexB,WAAf,C,CAEA","sourcesContent":["import React from 'react';\r\nimport { ContractForm, AccountData, ContractData } from \"@drizzle/react-components\";\r\nimport Web3 from \"web3\"\r\n\r\nclass EthAccounts extends React.Component {\r\n state = { dataKey: null, userId: null };\r\n\r\n async componentDidMount() {\r\n   const { drizzle, drizzleState } = this.props;\r\n   const contract = drizzle.contracts.UserStorage;\r\n  // const account = drizzleState.accounts[0];\r\n   \r\n\r\n    //const userId = await this.getUserId(contract,drizzleState);\r\n    // const user = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\r\n    //const userId = 1;\r\n    this.getDataKey(contract, drizzleState, drizzle);\r\n    //const dataKey = contract.methods[\"profiles\"].cacheCall(userId);\r\n\r\n\r\n\r\n  // const dataKey = contract.methods[\"profiles\"].cacheCall(1);\r\n  //  this.setState({ dataKey });\r\n \r\n }\r\n\r\n// getUserId = async(contract,drizzleState) => {\r\n//   const userId = contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\r\n//   return parseInt(userId);\r\n// }\r\n\r\ngetDataKey = async(contract,drizzleState,drizzle) => {\r\n  const userId = drizzle.contracts.UserStorage.methods().addresses.call(drizzleState.accounts[0]);\r\n  //const userId = await contract.methods[\"addresses\"].cacheCall(drizzleState.accounts[0])\r\n  const dataKey = await contract.methods[\"profiles\"].cacheCall(userId);\r\n  this.setState({ dataKey, userId });\r\n}\r\n\r\n render() {\r\n  \r\n   const { UserStorage } = this.props.drizzleState.contracts;\r\n   const displayData = UserStorage.profiles[this.state.dataKey]; // if displayData (an object) exists, then we can display the value \r\n   console.log(this.state.userId)\r\n\r\n   \r\n   //username: Web3.utils.toAscii(username),\r\n\r\n   return (\r\n    \r\n     <p>Hi: {displayData && displayData.value[1]}</p>\r\n   )\r\n }\r\n}\r\n\r\nexport default EthAccounts\r\n\r\n//  <ContractData contract=\"Storage\" method=\"getData\" toUtf8 toAscii />\r\n"]},"metadata":{},"sourceType":"module"}