{"ast":null,"code":"import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects'; //import { toast } from 'react-toastify';\n//import drizzleSagas from '@drizzle/store/src/rootSaga';\n\nimport { drizzleSagas } from '@drizzle/store'; //import { drizzleSagas } from 'drizzle';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms)); //const drizzleSagas=[];\n\n\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\n\nfunction* fetchTokenId(action) {\n  yield put({\n    type: 'TOKEN_ID_FETCHING',\n    tokenId: action.tokenId\n  });\n} //const drizzleSagas=drizzleSaga;\n\n\nfunction* txSuccessful() {\n  yield put({\n    type: 'TX_SUCCESSFUL'\n  });\n} // function* appSagas () {\n//   yield takeEvery('TX_SUCCESSFUL', txSuccessful);\n//   yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n// }\n//export default appSagas;\n\n\nexport default function* root(action) {\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\n  yield all(...DrizzleSagas.map(saga => fork(saga))); //yield getStoredValueWatcher();\n}","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/sagas/appSagas.js"],"names":["all","fork","takeLatest","put","call","take","race","select","takeEvery","drizzleSagas","delay","ms","Promise","res","setTimeout","TOKEN_ID_FETCH","fetchTokenId","action","type","tokenId","txSuccessful","root","DrizzleSagas","map","saga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,IAAjD,EAAuDC,MAAvD,EAA+DC,SAA/D,QAAgF,oBAAhF,C,CACA;AACA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CACA;;AACA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAtB,C,CAEA;;;AACA,MAAMI,cAAc,GAAG,gBAAvB;;AAEA,UAAUC,YAAV,CAAwBC,MAAxB,EAAgC;AAC9B,QAAMd,GAAG,CAAC;AAAEe,IAAAA,IAAI,EAAC,mBAAP;AAA4BC,IAAAA,OAAO,EAACF,MAAM,CAACE;AAA3C,GAAD,CAAT;AACD,C,CACD;;;AACA,UAAUC,YAAV,GAAyB;AACvB,QAAMjB,GAAG,CAAC;AAACe,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAT;AACD,C,CAED;AACA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUG,IAAV,CAAeJ,MAAf,EAAuB;AACpC,QAAMT,SAAS,CAAC,eAAD,EAAkBY,YAAlB,CAAf;AACA,QAAMlB,UAAU,CAAC,gBAAD,EAAmBc,YAAnB,CAAhB;AACA,QAAMhB,GAAG,CACP,GAAGsB,YAAY,CAACC,GAAb,CAAiBC,IAAI,IAAIvB,IAAI,CAACuB,IAAD,CAA7B,CADI,CAAT,CAHoC,CAMpC;AACD","sourcesContent":["import { all, fork, takeLatest, put, call, take, race, select, takeEvery } from 'redux-saga/effects';\r\n//import { toast } from 'react-toastify';\r\n//import drizzleSagas from '@drizzle/store/src/rootSaga';\r\nimport { drizzleSagas } from '@drizzle/store';\r\n//import { drizzleSagas } from 'drizzle';\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\r\n\r\n//const drizzleSagas=[];\r\nconst TOKEN_ID_FETCH = 'TOKEN_ID_FETCH';\r\n\r\nfunction* fetchTokenId (action) {\r\n  yield put({ type:'TOKEN_ID_FETCHING', tokenId:action.tokenId  });\r\n}\r\n//const drizzleSagas=drizzleSaga;\r\nfunction* txSuccessful() {\r\n  yield put({type: 'TX_SUCCESSFUL'});\r\n}\r\n\r\n// function* appSagas () {\r\n//   yield takeEvery('TX_SUCCESSFUL', txSuccessful);\r\n//   yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n// }\r\n//export default appSagas;\r\n\r\nexport default function* root(action) {\r\n  yield takeEvery('TX_SUCCESSFUL', txSuccessful);\r\n  yield takeLatest('TOKEN_ID_FETCH', fetchTokenId);\r\n  yield all(\r\n    ...DrizzleSagas.map(saga => fork(saga))\r\n  );\r\n  //yield getStoredValueWatcher();\r\n}"]},"metadata":{},"sourceType":"module"}