{"ast":null,"code":"import { EventActions } from \"@drizzle/store\";\nimport { toast } from 'react-toastify'; // import { newContextComponents } from \"@drizzle/react-components\";\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\n\nconst GET_PROP_ADDRESS = 'GET_PROP_ADDRESS';\nexport const joinTransactionSaga = store => next => action => {\n  if (action.type === 'TX_SUCCESSFUL') {\n    const transactionHash = action.txHash;\n    const transactionNumber = \"\".concat(transactionHash);\n    toast(transactionNumber, {\n      position: toast.POSITION.BOTTOM_LEFT,\n      className: 'successful-transaction'\n    });\n  }\n\n  return next(action);\n};\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    if (action.event.id !== lastSeenEventId) {\n      lastSeenEventId = action.event.id;\n      const message = action.event.returnValues._message;\n      const propAddress = action.event.returnValues._proposalAddress;\n      const proposalAddress = \"\".concat(propAddress);\n      const display = \"\".concat(message);\n      const poolDepth = action.event.returnValues.currentContractBalance;\n\n      if (Number.isInteger(poolDepth)) {\n        {\n          console.log('proposalAddress in pooldepth', poolDepth, proposalAddress);\n        }\n        store.dispatch({\n          type: \"PROPOSAL_BALANCE\",\n          balance: \"\".concat(poolDepth)\n        });\n      }\n\n      if (Number.isInteger(proposalAddress)) {\n        {\n          console.log('pooldepth in propadd', poolDepth, proposalAddress);\n        }\n        store.dispatch({\n          type: \"GOT_PROP_ADDRESS\",\n          proposalAddress: proposalAddress\n        });\n      }\n\n      toast.info(display, {\n        position: toast.POSITION.TOP_RIGHT\n      });\n    }\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/Users/Samsung/code/cacp/client/middleware/capMiddleWare.js"],"names":["EventActions","toast","GET_PROP_ADDRESS","joinTransactionSaga","store","next","action","type","transactionHash","txHash","transactionNumber","position","POSITION","BOTTOM_LEFT","className","contractEventSaga","lastSeenEventId","EVENT_FIRED","event","id","message","returnValues","_message","propAddress","_proposalAddress","proposalAddress","display","poolDepth","currentContractBalance","Number","isInteger","console","log","dispatch","balance","info","TOP_RIGHT"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CACA;AACA;;AAEA,MAAMC,gBAAgB,GAAE,kBAAxB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAMC,eAAe,GAAGF,MAAM,CAACG,MAA/B;AACA,UAAMC,iBAAiB,aAAMF,eAAN,CAAvB;AACAP,IAAAA,KAAK,CAACS,iBAAD,EAAoB;AAAEC,MAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAeC,WAA3B;AAAuCC,MAAAA,SAAS,EAAC;AAAjD,KAApB,CAAL;AACD;;AACD,SAAOT,IAAI,CAACC,MAAD,CAAX;AACD,CAPM;AAUP,OAAO,MAAMS,iBAAiB,GAAGC,eAAe,IAAIZ,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC7E,MAAIA,MAAM,CAACC,IAAP,KAAgBP,YAAY,CAACiB,WAAjC,EAA8C;AAC5C,QAAIX,MAAM,CAACY,KAAP,CAAaC,EAAb,KAAoBH,eAAxB,EAAyC;AACvCA,MAAAA,eAAe,GAAGV,MAAM,CAACY,KAAP,CAAaC,EAA/B;AACC,YAAMC,OAAO,GAAGd,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BC,QAA1C;AACA,YAAMC,WAAW,GAAGjB,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BG,gBAA9C;AACA,YAAMC,eAAe,aAAMF,WAAN,CAArB;AACA,YAAMG,OAAO,aAAMN,OAAN,CAAb;AACA,YAAMO,SAAS,GAAGrB,MAAM,CAACY,KAAP,CAAaG,YAAb,CAA0BO,sBAA5C;;AACA,UAAGC,MAAM,CAACC,SAAP,CAAiBH,SAAjB,CAAH,EAA+B;AAC7B;AAACI,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA2CL,SAA3C,EAAsDF,eAAtD;AAAuE;AAC1ErB,QAAAA,KAAK,CAAC6B,QAAN,CAAe;AAAC1B,UAAAA,IAAI,EAAC,kBAAN;AAA0B2B,UAAAA,OAAO,YAAIP,SAAJ;AAAjC,SAAf;AACC;;AACD,UAAGE,MAAM,CAACC,SAAP,CAAiBL,eAAjB,CAAH,EAAqC;AACpC;AAACM,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCL,SAAnC,EAA8CF,eAA9C;AAA+D;AAChErB,QAAAA,KAAK,CAAC6B,QAAN,CAAe;AAAC1B,UAAAA,IAAI,EAAC,kBAAN;AAA0BkB,UAAAA,eAAe,EAACA;AAA1C,SAAf;AACC;;AAEFxB,MAAAA,KAAK,CAACkC,IAAN,CAAWT,OAAX,EAAoB;AAAEf,QAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAewB;AAA3B,OAApB;AACF;AACF;;AACD,SAAO/B,IAAI,CAACC,MAAD,CAAX;AACD,CAtBM","sourcesContent":["import { EventActions } from \"@drizzle/store\";\r\nimport { toast } from 'react-toastify';\r\n// import { newContextComponents } from \"@drizzle/react-components\";\r\n// const { AccountData, ContractData, ContractForm } = newContextComponents;\r\n\r\nconst GET_PROP_ADDRESS ='GET_PROP_ADDRESS';\r\n\r\nexport const joinTransactionSaga = store => next => action => {\r\n  if (action.type === 'TX_SUCCESSFUL') { \r\n    const transactionHash = action.txHash\r\n    const transactionNumber = `${transactionHash}`\r\n    toast(transactionNumber, { position: toast.POSITION.BOTTOM_LEFT,className:'successful-transaction' })\r\n  }\r\n  return next(action)\r\n}\r\n\r\n   \r\nexport const contractEventSaga = lastSeenEventId => store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    if (action.event.id !== lastSeenEventId) {\r\n      lastSeenEventId = action.event.id\r\n       const message = action.event.returnValues._message\r\n       const propAddress = action.event.returnValues._proposalAddress\r\n       const proposalAddress = `${propAddress}`\r\n       const display = `${message}`\r\n       const poolDepth = action.event.returnValues.currentContractBalance\r\n       if(Number.isInteger(poolDepth)){\r\n         {console.log('proposalAddress in pooldepth',poolDepth, proposalAddress)}\r\n       store.dispatch({type:\"PROPOSAL_BALANCE\", balance:`${poolDepth}`})\r\n       }\r\n       if(Number.isInteger(proposalAddress)){\r\n        {console.log('pooldepth in propadd',poolDepth, proposalAddress)}\r\n        store.dispatch({type:\"GOT_PROP_ADDRESS\", proposalAddress:proposalAddress})\r\n        }\r\n    \r\n       toast.info(display, { position: toast.POSITION.TOP_RIGHT })\r\n    }\r\n  }\r\n  return next(action)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}